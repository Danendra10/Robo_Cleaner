
Robot_Cleaner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008840  08008840  00018840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001dc  08008e78  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08008e78  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111b3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c9  00000000  00000000  000313bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00033688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017768  00000000  00000000  000355b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001286d  00000000  00000000  0004cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009110f  00000000  00000000  0005f58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f069c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055cc  00000000  00000000  000f06ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008828 	.word	0x08008828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008828 	.word	0x08008828

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f023 030f 	bic.w	r3, r3, #15
 8000ecc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f043 030c 	orr.w	r3, r3, #12
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	f043 030c 	orr.w	r3, r3, #12
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000efc:	f107 0208 	add.w	r2, r7, #8
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2304      	movs	r3, #4
 8000f06:	214e      	movs	r1, #78	; 0x4e
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <lcd_send_cmd+0x5c>)
 8000f0a:	f002 f883 	bl	8003014 <HAL_I2C_Master_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200001f8 	.word	0x200001f8

08000f1c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f023 030f 	bic.w	r3, r3, #15
 8000f2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	f043 030d 	orr.w	r3, r3, #13
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f043 0309 	orr.w	r3, r3, #9
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2304      	movs	r3, #4
 8000f66:	214e      	movs	r1, #78	; 0x4e
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <lcd_send_data+0x5c>)
 8000f6a:	f002 f853 	bl	8003014 <HAL_I2C_Master_Transmit>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001f8 	.word	0x200001f8

08000f7c <lcd_clear>:

void lcd_clear (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000f82:	2080      	movs	r0, #128	; 0x80
 8000f84:	f7ff ff9a 	bl	8000ebc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	e005      	b.n	8000f9a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000f8e:	2020      	movs	r0, #32
 8000f90:	f7ff ffc4 	bl	8000f1c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3301      	adds	r3, #1
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b45      	cmp	r3, #69	; 0x45
 8000f9e:	ddf6      	ble.n	8000f8e <lcd_clear+0x12>
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <lcd_put_cur+0x18>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d005      	beq.n	8000fcc <lcd_put_cur+0x22>
 8000fc0:	e009      	b.n	8000fd6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	603b      	str	r3, [r7, #0]
            break;
 8000fca:	e004      	b.n	8000fd6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fd2:	603b      	str	r3, [r7, #0]
            break;
 8000fd4:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff6e 	bl	8000ebc <lcd_send_cmd>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <lcd_init>:


void lcd_init (void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fec:	2032      	movs	r0, #50	; 0x32
 8000fee:	f000 fff7 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ff2:	2030      	movs	r0, #48	; 0x30
 8000ff4:	f7ff ff62 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f000 fff1 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ffe:	2030      	movs	r0, #48	; 0x30
 8001000:	f7ff ff5c 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001004:	2001      	movs	r0, #1
 8001006:	f000 ffeb 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800100a:	2030      	movs	r0, #48	; 0x30
 800100c:	f7ff ff56 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(10);
 8001010:	200a      	movs	r0, #10
 8001012:	f000 ffe5 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001016:	2020      	movs	r0, #32
 8001018:	f7ff ff50 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f000 ffdf 	bl	8001fe0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001022:	2028      	movs	r0, #40	; 0x28
 8001024:	f7ff ff4a 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f000 ffd9 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800102e:	2008      	movs	r0, #8
 8001030:	f7ff ff44 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 ffd3 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff ff3e 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 ffcd 	bl	8001fe0 <HAL_Delay>
	HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 ffca 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800104c:	2006      	movs	r0, #6
 800104e:	f7ff ff35 	bl	8000ebc <lcd_send_cmd>
	HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 ffc4 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001058:	200c      	movs	r0, #12
 800105a:	f7ff ff2f 	bl	8000ebc <lcd_send_cmd>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}

08001062 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800106a:	e006      	b.n	800107a <lcd_send_string+0x18>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff51 	bl	8000f1c <lcd_send_data>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f4      	bne.n	800106c <lcd_send_string+0xa>
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_UARTEx_RxEventCallback>:
uint8_t main_msgs[main_size];

char *datas;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART6)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_UARTEx_RxEventCallback+0x54>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d11a      	bne.n	80010d8 <HAL_UARTEx_RxEventCallback+0x4c>
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_UARTEx_RxEventCallback+0x58>)
 80010a4:	781a      	ldrb	r2, [r3, #0]
  {
	  memcpy(&state, rx_msgs, 1);
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80010a8:	701a      	strb	r2, [r3, #0]
	  memcpy(&gyro_z_data, rx_msgs + 1, 4);
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_UARTEx_RxEventCallback+0x60>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_UARTEx_RxEventCallback+0x64>)
 80010b2:	601a      	str	r2, [r3, #0]
	  memcpy(&dist_to_obj, rx_msgs + 5, 4);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_UARTEx_RxEventCallback+0x68>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_UARTEx_RxEventCallback+0x6c>)
 80010bc:	601a      	str	r2, [r3, #0]
//    datas = strtok(NULL, "~");
//    gyro_z_data = atof(datas);
//    // get the third data
//    datas = strtok(NULL, "~");
//    dist_to_obj = atof(datas);
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_msgs, rx_size);
 80010be:	2214      	movs	r2, #20
 80010c0:	4908      	ldr	r1, [pc, #32]	; (80010e4 <HAL_UARTEx_RxEventCallback+0x58>)
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <HAL_UARTEx_RxEventCallback+0x70>)
 80010c4:	f003 fbb5 	bl	8004832 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_UARTEx_RxEventCallback+0x74>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_UARTEx_RxEventCallback+0x74>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0208 	bic.w	r2, r2, #8
 80010d6:	601a      	str	r2, [r3, #0]
  }
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40011400 	.word	0x40011400
 80010e4:	20000348 	.word	0x20000348
 80010e8:	20000344 	.word	0x20000344
 80010ec:	20000349 	.word	0x20000349
 80010f0:	2000033c 	.word	0x2000033c
 80010f4:	2000034d 	.word	0x2000034d
 80010f8:	20000340 	.word	0x20000340
 80010fc:	20000294 	.word	0x20000294
 8001100:	200002d8 	.word	0x200002d8

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fef8 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 fa30 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 fb6a 	bl	80017e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001114:	f000 fb48 	bl	80017a8 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001118:	f000 fb1c 	bl	8001754 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800111c:	f000 fa88 	bl	8001630 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001120:	f000 fab4 	bl	800168c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001124:	2100      	movs	r1, #0
 8001126:	48bc      	ldr	r0, [pc, #752]	; (8001418 <main+0x314>)
 8001128:	f002 ff24 	bl	8003f74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800112c:	2104      	movs	r1, #4
 800112e:	48ba      	ldr	r0, [pc, #744]	; (8001418 <main+0x314>)
 8001130:	f002 ff20 	bl	8003f74 <HAL_TIM_PWM_Start>
  lcd_init();
 8001134:	f7ff ff58 	bl	8000fe8 <lcd_init>
  lcd_put_cur(0, 3);
 8001138:	2103      	movs	r1, #3
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff35 	bl	8000faa <lcd_put_cur>
  lcd_send_string("Initializing");
 8001140:	48b6      	ldr	r0, [pc, #728]	; (800141c <main+0x318>)
 8001142:	f7ff ff8e 	bl	8001062 <lcd_send_string>
  HAL_Delay(1000);
 8001146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114a:	f000 ff49 	bl	8001fe0 <HAL_Delay>
  lcd_send_string(".");
 800114e:	48b4      	ldr	r0, [pc, #720]	; (8001420 <main+0x31c>)
 8001150:	f7ff ff87 	bl	8001062 <lcd_send_string>
  HAL_Delay(1000);
 8001154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001158:	f000 ff42 	bl	8001fe0 <HAL_Delay>
  lcd_send_string(".");
 800115c:	48b0      	ldr	r0, [pc, #704]	; (8001420 <main+0x31c>)
 800115e:	f7ff ff80 	bl	8001062 <lcd_send_string>
  HAL_Delay(1000);
 8001162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001166:	f000 ff3b 	bl	8001fe0 <HAL_Delay>
  lcd_send_string(".");
 800116a:	48ad      	ldr	r0, [pc, #692]	; (8001420 <main+0x31c>)
 800116c:	f7ff ff79 	bl	8001062 <lcd_send_string>
  HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001174:	f000 ff34 	bl	8001fe0 <HAL_Delay>
  lcd_clear();
 8001178:	f7ff ff00 	bl	8000f7c <lcd_clear>

  lcd_put_cur(0, 3);
 800117c:	2103      	movs	r1, #3
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ff13 	bl	8000faa <lcd_put_cur>
  lcd_send_string("HELLO SET :)");
 8001184:	48a7      	ldr	r0, [pc, #668]	; (8001424 <main+0x320>)
 8001186:	f7ff ff6c 	bl	8001062 <lcd_send_string>
  lcd_clear();
 800118a:	f7ff fef7 	bl	8000f7c <lcd_clear>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_msgs, rx_size);
 800118e:	2214      	movs	r2, #20
 8001190:	49a5      	ldr	r1, [pc, #660]	; (8001428 <main+0x324>)
 8001192:	48a6      	ldr	r0, [pc, #664]	; (800142c <main+0x328>)
 8001194:	f003 fb4d 	bl	8004832 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001198:	4ba5      	ldr	r3, [pc, #660]	; (8001430 <main+0x32c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4ba4      	ldr	r3, [pc, #656]	; (8001430 <main+0x32c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0208 	bic.w	r2, r2, #8
 80011a6:	601a      	str	r2, [r3, #0]

  static uint8_t algorithm_state;

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ae:	48a1      	ldr	r0, [pc, #644]	; (8001434 <main+0x330>)
 80011b0:	f001 fdd2 	bl	8002d58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ba:	489e      	ldr	r0, [pc, #632]	; (8001434 <main+0x330>)
 80011bc:	f001 fdcc 	bl	8002d58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c6:	489b      	ldr	r0, [pc, #620]	; (8001434 <main+0x330>)
 80011c8:	f001 fdc6 	bl	8002d58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d2:	4898      	ldr	r0, [pc, #608]	; (8001434 <main+0x330>)
 80011d4:	f001 fdc0 	bl	8002d58 <HAL_GPIO_WritePin>

  v_kanan = 600;
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
  v_kiri = 820;
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e6:	f44f 724d 	mov.w	r2, #820	; 0x334
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_put_cur(0, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fedb 	bl	8000faa <lcd_put_cur>
	  sprintf(buff, "%d", algorithm_state);
 80011f4:	4b90      	ldr	r3, [pc, #576]	; (8001438 <main+0x334>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4990      	ldr	r1, [pc, #576]	; (800143c <main+0x338>)
 80011fc:	4890      	ldr	r0, [pc, #576]	; (8001440 <main+0x33c>)
 80011fe:	f005 f89b 	bl	8006338 <siprintf>
	  lcd_send_string(buff);
 8001202:	488f      	ldr	r0, [pc, #572]	; (8001440 <main+0x33c>)
 8001204:	f7ff ff2d 	bl	8001062 <lcd_send_string>
	  lcd_put_cur(0, 15);
 8001208:	210f      	movs	r1, #15
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fecd 	bl	8000faa <lcd_put_cur>
	  sprintf(buff, "%d", state);
 8001210:	4b8c      	ldr	r3, [pc, #560]	; (8001444 <main+0x340>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4989      	ldr	r1, [pc, #548]	; (800143c <main+0x338>)
 8001218:	4889      	ldr	r0, [pc, #548]	; (8001440 <main+0x33c>)
 800121a:	f005 f88d 	bl	8006338 <siprintf>
	  lcd_send_string(buff);
 800121e:	4888      	ldr	r0, [pc, #544]	; (8001440 <main+0x33c>)
 8001220:	f7ff ff1f 	bl	8001062 <lcd_send_string>

	  lcd_put_cur(1, 0);
 8001224:	2100      	movs	r1, #0
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff febf 	bl	8000faa <lcd_put_cur>
	  sprintf(buff, "%.2f", gyro_z_data);
 800122c:	4b86      	ldr	r3, [pc, #536]	; (8001448 <main+0x344>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f991 	bl	8000558 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4984      	ldr	r1, [pc, #528]	; (800144c <main+0x348>)
 800123c:	4880      	ldr	r0, [pc, #512]	; (8001440 <main+0x33c>)
 800123e:	f005 f87b 	bl	8006338 <siprintf>
	  lcd_send_string(buff);
 8001242:	487f      	ldr	r0, [pc, #508]	; (8001440 <main+0x33c>)
 8001244:	f7ff ff0d 	bl	8001062 <lcd_send_string>
	  lcd_put_cur(1, 8);
 8001248:	2108      	movs	r1, #8
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fead 	bl	8000faa <lcd_put_cur>
	  sprintf(buff, "%.2f", dist_to_obj);
 8001250:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <main+0x34c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f97f 	bl	8000558 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	497b      	ldr	r1, [pc, #492]	; (800144c <main+0x348>)
 8001260:	4877      	ldr	r0, [pc, #476]	; (8001440 <main+0x33c>)
 8001262:	f005 f869 	bl	8006338 <siprintf>
	  lcd_send_string(buff);
 8001266:	4876      	ldr	r0, [pc, #472]	; (8001440 <main+0x33c>)
 8001268:	f7ff fefb 	bl	8001062 <lcd_send_string>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  Forward();

	  switch(state)
 800126c:	4b75      	ldr	r3, [pc, #468]	; (8001444 <main+0x340>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <main+0x176>
 8001274:	2b01      	cmp	r3, #1
 8001276:	d006      	beq.n	8001286 <main+0x182>
 8001278:	e167      	b.n	800154a <main+0x446>
	  {

	  case 0:
		  algorithm_state = 0;
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <main+0x334>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		  Stop();
 8001280:	f000 fb04 	bl	800188c <Stop>
		  break;
 8001284:	e161      	b.n	800154a <main+0x446>
	  case 1:
		  switch(algorithm_state)
 8001286:	4b6c      	ldr	r3, [pc, #432]	; (8001438 <main+0x334>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b21      	cmp	r3, #33	; 0x21
 800128c:	f200 815c 	bhi.w	8001548 <main+0x444>
 8001290:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <main+0x194>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	08001321 	.word	0x08001321
 800129c:	08001549 	.word	0x08001549
 80012a0:	08001549 	.word	0x08001549
 80012a4:	08001549 	.word	0x08001549
 80012a8:	08001549 	.word	0x08001549
 80012ac:	08001549 	.word	0x08001549
 80012b0:	08001549 	.word	0x08001549
 80012b4:	08001549 	.word	0x08001549
 80012b8:	08001549 	.word	0x08001549
 80012bc:	08001549 	.word	0x08001549
 80012c0:	08001339 	.word	0x08001339
 80012c4:	0800138b 	.word	0x0800138b
 80012c8:	080013ad 	.word	0x080013ad
 80012cc:	080013f1 	.word	0x080013f1
 80012d0:	08001549 	.word	0x08001549
 80012d4:	08001549 	.word	0x08001549
 80012d8:	08001549 	.word	0x08001549
 80012dc:	08001549 	.word	0x08001549
 80012e0:	08001549 	.word	0x08001549
 80012e4:	08001549 	.word	0x08001549
 80012e8:	08001549 	.word	0x08001549
 80012ec:	08001549 	.word	0x08001549
 80012f0:	08001549 	.word	0x08001549
 80012f4:	08001549 	.word	0x08001549
 80012f8:	08001549 	.word	0x08001549
 80012fc:	08001549 	.word	0x08001549
 8001300:	08001549 	.word	0x08001549
 8001304:	08001549 	.word	0x08001549
 8001308:	08001549 	.word	0x08001549
 800130c:	08001549 	.word	0x08001549
 8001310:	08001469 	.word	0x08001469
 8001314:	080014bb 	.word	0x080014bb
 8001318:	080014dd 	.word	0x080014dd
 800131c:	08001521 	.word	0x08001521
		  {
		  case 0:
			  if(!flag)
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <main+0x350>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d103      	bne.n	8001330 <main+0x22c>
				  algorithm_state = 10;
 8001328:	4b43      	ldr	r3, [pc, #268]	; (8001438 <main+0x334>)
 800132a:	220a      	movs	r2, #10
 800132c:	701a      	strb	r2, [r3, #0]
			  else
				  algorithm_state = 30;
			  break;
 800132e:	e10b      	b.n	8001548 <main+0x444>
				  algorithm_state = 30;
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <main+0x334>)
 8001332:	221e      	movs	r2, #30
 8001334:	701a      	strb	r2, [r3, #0]
			  break;
 8001336:	e107      	b.n	8001548 <main+0x444>

		  case 10:
			  Forward();
 8001338:	f000 fad2 	bl	80018e0 <Forward>
			  if(gyro_z_data > 10 )
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <main+0x344>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	dd01      	ble.n	8001354 <main+0x250>
				  Right();
 8001350:	f000 fb1a 	bl	8001988 <Right>
			  if(gyro_z_data < -10 )
 8001354:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <main+0x344>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800135e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d501      	bpl.n	800136c <main+0x268>
				  Left();
 8001368:	f000 fae4 	bl	8001934 <Left>

			  if(dist_to_obj < 20)
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <main+0x34c>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d400      	bmi.n	8001382 <main+0x27e>
				  algorithm_state = 11;
			  break;
 8001380:	e0e2      	b.n	8001548 <main+0x444>
				  algorithm_state = 11;
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <main+0x334>)
 8001384:	220b      	movs	r2, #11
 8001386:	701a      	strb	r2, [r3, #0]
			  break;
 8001388:	e0de      	b.n	8001548 <main+0x444>
		  case 11:
			  Right();
 800138a:	f000 fafd 	bl	8001988 <Right>
			  if(gyro_z_data < -90 + 10)
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <main+0x344>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001458 <main+0x354>
 8001398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d400      	bmi.n	80013a4 <main+0x2a0>
				  algorithm_state = 12;
			  break;
 80013a2:	e0d1      	b.n	8001548 <main+0x444>
				  algorithm_state = 12;
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <main+0x334>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	701a      	strb	r2, [r3, #0]
			  break;
 80013aa:	e0cd      	b.n	8001548 <main+0x444>
		  case 12:
			  Forward();
 80013ac:	f000 fa98 	bl	80018e0 <Forward>
			  if(gyro_z_data > -85)
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <main+0x344>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800145c <main+0x358>
 80013ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dd01      	ble.n	80013c8 <main+0x2c4>
				  Right();
 80013c4:	f000 fae0 	bl	8001988 <Right>
			  if(gyro_z_data < -95)
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <main+0x344>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001460 <main+0x35c>
 80013d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d501      	bpl.n	80013e0 <main+0x2dc>
				  Left();
 80013dc:	f000 faaa 	bl	8001934 <Left>
			  HAL_Delay(500);
 80013e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e4:	f000 fdfc 	bl	8001fe0 <HAL_Delay>
			  algorithm_state = 13;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <main+0x334>)
 80013ea:	220d      	movs	r2, #13
 80013ec:	701a      	strb	r2, [r3, #0]
			  break;
 80013ee:	e0ab      	b.n	8001548 <main+0x444>
		  case 13:
			  Right();
 80013f0:	f000 faca 	bl	8001988 <Right>
			  if(gyro_z_data < -180 + 10)
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <main+0x344>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001464 <main+0x360>
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d400      	bmi.n	800140a <main+0x306>
			  {
				  flag = 1;
				  algorithm_state = 0;
			  }
			  break;
 8001408:	e09e      	b.n	8001548 <main+0x444>
				  flag = 1;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <main+0x350>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
				  algorithm_state = 0;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <main+0x334>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
			  break;
 8001416:	e097      	b.n	8001548 <main+0x444>
 8001418:	2000024c 	.word	0x2000024c
 800141c:	08008840 	.word	0x08008840
 8001420:	08008850 	.word	0x08008850
 8001424:	08008854 	.word	0x08008854
 8001428:	20000348 	.word	0x20000348
 800142c:	20000294 	.word	0x20000294
 8001430:	200002d8 	.word	0x200002d8
 8001434:	40020400 	.word	0x40020400
 8001438:	20000366 	.word	0x20000366
 800143c:	08008864 	.word	0x08008864
 8001440:	2000035c 	.word	0x2000035c
 8001444:	20000344 	.word	0x20000344
 8001448:	2000033c 	.word	0x2000033c
 800144c:	08008868 	.word	0x08008868
 8001450:	20000340 	.word	0x20000340
 8001454:	20000338 	.word	0x20000338
 8001458:	c2a00000 	.word	0xc2a00000
 800145c:	c2aa0000 	.word	0xc2aa0000
 8001460:	c2be0000 	.word	0xc2be0000
 8001464:	c32a0000 	.word	0xc32a0000


		  case 30:
			  Forward();
 8001468:	f000 fa3a 	bl	80018e0 <Forward>
			  if(gyro_z_data < -170 )
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <main+0x448>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001550 <main+0x44c>
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d501      	bpl.n	8001484 <main+0x380>
				  Right();
 8001480:	f000 fa82 	bl	8001988 <Right>
			  if(gyro_z_data > 170 )
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <main+0x448>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001554 <main+0x450>
 800148e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	dd01      	ble.n	800149c <main+0x398>
				  Left();
 8001498:	f000 fa4c 	bl	8001934 <Left>

			  if(dist_to_obj < 10)
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <main+0x454>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	d400      	bmi.n	80014b2 <main+0x3ae>
				  algorithm_state = 31;
			  break;
 80014b0:	e04a      	b.n	8001548 <main+0x444>
				  algorithm_state = 31;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <main+0x458>)
 80014b4:	221f      	movs	r2, #31
 80014b6:	701a      	strb	r2, [r3, #0]
			  break;
 80014b8:	e046      	b.n	8001548 <main+0x444>
		  case 31:
			  Left();
 80014ba:	f000 fa3b 	bl	8001934 <Left>
			  if(gyro_z_data > -90)
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <main+0x448>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001560 <main+0x45c>
 80014c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	dc00      	bgt.n	80014d4 <main+0x3d0>
				  algorithm_state = 32;
			  break;
 80014d2:	e039      	b.n	8001548 <main+0x444>
				  algorithm_state = 32;
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <main+0x458>)
 80014d6:	2220      	movs	r2, #32
 80014d8:	701a      	strb	r2, [r3, #0]
			  break;
 80014da:	e035      	b.n	8001548 <main+0x444>
		  case 32:
			  Forward();
 80014dc:	f000 fa00 	bl	80018e0 <Forward>
			  if(gyro_z_data > -85)
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <main+0x448>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001564 <main+0x460>
 80014ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd01      	ble.n	80014f8 <main+0x3f4>
				  Right();
 80014f4:	f000 fa48 	bl	8001988 <Right>
			  if(gyro_z_data < -95)
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <main+0x448>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001568 <main+0x464>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	d501      	bpl.n	8001510 <main+0x40c>
				  Left();
 800150c:	f000 fa12 	bl	8001934 <Left>
			  HAL_Delay(500);
 8001510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001514:	f000 fd64 	bl	8001fe0 <HAL_Delay>
			  algorithm_state = 33;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <main+0x458>)
 800151a:	2221      	movs	r2, #33	; 0x21
 800151c:	701a      	strb	r2, [r3, #0]
			  break;
 800151e:	e013      	b.n	8001548 <main+0x444>
		  case 33:
			  Left();
 8001520:	f000 fa08 	bl	8001934 <Left>
			  if(gyro_z_data > - 10)
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <main+0x448>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800152e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	dc00      	bgt.n	800153a <main+0x436>
			  {
				  flag = 0;
				  algorithm_state = 0;
			  }
			  break;
 8001538:	e005      	b.n	8001546 <main+0x442>
				  flag = 0;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <main+0x468>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
				  algorithm_state = 0;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <main+0x458>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
			  break;
 8001546:	bf00      	nop


		  }
		  break;
 8001548:	bf00      	nop
	  lcd_put_cur(0, 0);
 800154a:	e64f      	b.n	80011ec <main+0xe8>
 800154c:	2000033c 	.word	0x2000033c
 8001550:	c32a0000 	.word	0xc32a0000
 8001554:	432a0000 	.word	0x432a0000
 8001558:	20000340 	.word	0x20000340
 800155c:	20000366 	.word	0x20000366
 8001560:	c2b40000 	.word	0xc2b40000
 8001564:	c2aa0000 	.word	0xc2aa0000
 8001568:	c2be0000 	.word	0xc2be0000
 800156c:	20000338 	.word	0x20000338

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	; 0x50
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	2230      	movs	r2, #48	; 0x30
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fa68 	bl	8005a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <SystemClock_Config+0xb8>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a22      	ldr	r2, [pc, #136]	; (8001628 <SystemClock_Config+0xb8>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <SystemClock_Config+0xb8>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <SystemClock_Config+0xbc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <SystemClock_Config+0xbc>)
 80015be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <SystemClock_Config+0xbc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d8:	2310      	movs	r3, #16
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 f81d 	bl	8003624 <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015f0:	f000 f9f4 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f4:	230f      	movs	r3, #15
 80015f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fa80 	bl	8003b14 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800161a:	f000 f9df 	bl	80019dc <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	; 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C1_Init+0x50>)
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_I2C1_Init+0x54>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C1_Init+0x50>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_I2C1_Init+0x58>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_I2C1_Init+0x50>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_I2C1_Init+0x50>)
 800166e:	f001 fb8d 	bl	8002d8c <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 f9b0 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001f8 	.word	0x200001f8
 8001684:	40005400 	.word	0x40005400
 8001688:	000186a0 	.word	0x000186a0

0800168c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016b8:	2253      	movs	r2, #83	; 0x53
 80016ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d6:	481e      	ldr	r0, [pc, #120]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016d8:	f002 fbfc 	bl	8003ed4 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016e2:	f000 f97b 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4619      	mov	r1, r3
 80016f4:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_TIM2_Init+0xc4>)
 80016f6:	f002 ffe1 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001700:	f000 f96c 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001704:	2360      	movs	r3, #96	; 0x60
 8001706:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_TIM2_Init+0xc4>)
 800171c:	f002 fcda 	bl	80040d4 <HAL_TIM_PWM_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001726:	f000 f959 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2204      	movs	r2, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM2_Init+0xc4>)
 8001732:	f002 fccf 	bl	80040d4 <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800173c:	f000 f94e 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM2_Init+0xc4>)
 8001742:	f000 f9e1 	bl	8001b08 <HAL_TIM_MspPostInit>

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000024c 	.word	0x2000024c

08001754 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <MX_USART6_UART_Init+0x50>)
 800175c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800178c:	f003 f804 	bl	8004798 <HAL_UART_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001796:	f000 f921 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000294 	.word	0x20000294
 80017a4:	40011400 	.word	0x40011400

080017a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_DMA_Init+0x3c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <MX_DMA_Init+0x3c>)
 80017b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_DMA_Init+0x3c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2039      	movs	r0, #57	; 0x39
 80017d0:	f000 fd05 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017d4:	2039      	movs	r0, #57	; 0x39
 80017d6:	f000 fd1e 	bl	8002216 <HAL_NVIC_EnableIRQ>

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_GPIO_Init+0x9c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <MX_GPIO_Init+0x9c>)
 8001808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_GPIO_Init+0x9c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_GPIO_Init+0x9c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <MX_GPIO_Init+0x9c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_GPIO_Init+0x9c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_GPIO_Init+0x9c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a11      	ldr	r2, [pc, #68]	; (8001884 <MX_GPIO_Init+0x9c>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_GPIO_Init+0x9c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <MX_GPIO_Init+0xa0>)
 800185a:	f001 fa7d 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800185e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_GPIO_Init+0xa0>)
 8001878:	f001 f8ea 	bl	8002a50 <HAL_GPIO_Init>

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400

0800188c <Stop>:

/* USER CODE BEGIN 4 */
void Stop(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	lcd_put_cur(0, 5);
 8001890:	2105      	movs	r1, #5
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fb89 	bl	8000faa <lcd_put_cur>
	lcd_send_string("Stop");
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <Stop+0x4c>)
 800189a:	f7ff fbe2 	bl	8001062 <lcd_send_string>
	lcd_clear();
 800189e:	f7ff fb6d 	bl	8000f7c <lcd_clear>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <Stop+0x50>)
 80018aa:	f001 fa55 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <Stop+0x50>)
 80018b6:	f001 fa4f 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <Stop+0x50>)
 80018c2:	f001 fa49 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <Stop+0x50>)
 80018ce:	f001 fa43 	bl	8002d58 <HAL_GPIO_WritePin>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	08008870 	.word	0x08008870
 80018dc:	40020400 	.word	0x40020400

080018e0 <Forward>:
void Forward(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	lcd_put_cur(0, 5);
 80018e4:	2105      	movs	r1, #5
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fb5f 	bl	8000faa <lcd_put_cur>
	lcd_send_string("Forward");
 80018ec:	480f      	ldr	r0, [pc, #60]	; (800192c <Forward+0x4c>)
 80018ee:	f7ff fbb8 	bl	8001062 <lcd_send_string>
	lcd_clear();
 80018f2:	f7ff fb43 	bl	8000f7c <lcd_clear>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <Forward+0x50>)
 80018fe:	f001 fa2b 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <Forward+0x50>)
 800190a:	f001 fa25 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001914:	4806      	ldr	r0, [pc, #24]	; (8001930 <Forward+0x50>)
 8001916:	f001 fa1f 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <Forward+0x50>)
 8001922:	f001 fa19 	bl	8002d58 <HAL_GPIO_WritePin>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	08008878 	.word	0x08008878
 8001930:	40020400 	.word	0x40020400

08001934 <Left>:
void Left(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	lcd_put_cur(0, 5);
 8001938:	2105      	movs	r1, #5
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fb35 	bl	8000faa <lcd_put_cur>
	lcd_send_string("Left");
 8001940:	480f      	ldr	r0, [pc, #60]	; (8001980 <Left+0x4c>)
 8001942:	f7ff fb8e 	bl	8001062 <lcd_send_string>
	lcd_clear();
 8001946:	f7ff fb19 	bl	8000f7c <lcd_clear>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <Left+0x50>)
 8001952:	f001 fa01 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195c:	4809      	ldr	r0, [pc, #36]	; (8001984 <Left+0x50>)
 800195e:	f001 f9fb 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <Left+0x50>)
 800196a:	f001 f9f5 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <Left+0x50>)
 8001976:	f001 f9ef 	bl	8002d58 <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	08008880 	.word	0x08008880
 8001984:	40020400 	.word	0x40020400

08001988 <Right>:
void Right(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	lcd_put_cur(0, 5);
 800198c:	2105      	movs	r1, #5
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fb0b 	bl	8000faa <lcd_put_cur>
	lcd_send_string("Right");
 8001994:	480f      	ldr	r0, [pc, #60]	; (80019d4 <Right+0x4c>)
 8001996:	f7ff fb64 	bl	8001062 <lcd_send_string>
	lcd_clear();
 800199a:	f7ff faef 	bl	8000f7c <lcd_clear>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <Right+0x50>)
 80019a6:	f001 f9d7 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <Right+0x50>)
 80019b2:	f001 f9d1 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <Right+0x50>)
 80019be:	f001 f9cb 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <Right+0x50>)
 80019ca:	f001 f9c5 	bl	8002d58 <HAL_GPIO_WritePin>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08008888 	.word	0x08008888
 80019d8:	40020400 	.word	0x40020400

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_I2C_MspInit+0x84>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d12b      	bne.n	8001ab2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23c0      	movs	r3, #192	; 0xc0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7a:	2312      	movs	r3, #18
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a86:	2304      	movs	r3, #4
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <HAL_I2C_MspInit+0x8c>)
 8001a92:	f000 ffdd 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d10d      	bne.n	8001af6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d11d      	bne.n	8001b66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_TIM_MspPostInit+0x68>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_TIM_MspPostInit+0x68>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_TIM_MspPostInit+0x68>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b46:	2303      	movs	r3, #3
 8001b48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <HAL_TIM_MspPostInit+0x6c>)
 8001b62:	f000 ff75 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <HAL_UART_MspInit+0xf0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d162      	bne.n	8001c60 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001be4:	2308      	movs	r3, #8
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4820      	ldr	r0, [pc, #128]	; (8001c70 <HAL_UART_MspInit+0xf8>)
 8001bf0:	f000 ff2e 	bl	8002a50 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001bf6:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_UART_MspInit+0x100>)
 8001bf8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001bfc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001c00:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c14:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001c34:	480f      	ldr	r0, [pc, #60]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c36:	f000 fb09 	bl	800224c <HAL_DMA_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c40:	f7ff fecc 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	2047      	movs	r0, #71	; 0x47
 8001c56:	f000 fac2 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c5a:	2047      	movs	r0, #71	; 0x47
 8001c5c:	f000 fadb 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40011400 	.word	0x40011400
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	200002d8 	.word	0x200002d8
 8001c78:	40026428 	.word	0x40026428

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <NMI_Handler+0x4>

08001c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler+0x4>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc8:	f000 f96a 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <DMA2_Stream1_IRQHandler+0x10>)
 8001cd6:	f000 fc51 	bl	800257c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200002d8 	.word	0x200002d8

08001ce4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <USART6_IRQHandler+0x10>)
 8001cea:	f002 fe07 	bl	80048fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000294 	.word	0x20000294

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d12:	f003 fe75 	bl	8005a00 <__errno>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2216      	movs	r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_exit>:

void _exit (int status)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3a:	e7fe      	b.n	8001d3a <_exit+0x12>

08001d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e00a      	b.n	8001d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4e:	f3af 8000 	nop.w
 8001d52:	4601      	mov	r1, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	b2ca      	uxtb	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf0      	blt.n	8001d4e <_read+0x12>
	}

return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e009      	b.n	8001d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf1      	blt.n	8001d88 <_write+0x12>
	}
	return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_close>:

int _close(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	return -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_isatty>:

int _isatty(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	return 1;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f003 fdda 	bl	8005a00 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20010000 	.word	0x20010000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000368 	.word	0x20000368
 8001e80:	20000380 	.word	0x20000380

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:



  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eac:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eae:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec4:	4c0b      	ldr	r4, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ed2:	f7ff ffd7 	bl	8001e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f003 fd99 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7ff f913 	bl	8001104 <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ee0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001eec:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 8001ef0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ef4:	20000380 	.word	0x20000380

08001ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_Init+0x40>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_Init+0x40>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_Init+0x40>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f94f 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f000 f808 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fd5a 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x54>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f967 	bl	8002232 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f92f 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_InitTick+0x5c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	2000036c 	.word	0x2000036c

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000036c 	.word	0x2000036c

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff feb6 	bl	8001fc8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e099      	b.n	800239c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002288:	e00f      	b.n	80022aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800228a:	f7ff fe9d 	bl	8001fc8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b05      	cmp	r3, #5
 8002296:	d908      	bls.n	80022aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e078      	b.n	800239c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e8      	bne.n	800228a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_DMA_Init+0x158>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2b04      	cmp	r3, #4
 8002302:	d107      	bne.n	8002314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4313      	orrs	r3, r2
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0307 	bic.w	r3, r3, #7
 800232a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2b04      	cmp	r3, #4
 800233c:	d117      	bne.n	800236e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fb01 	bl	8002958 <DMA_CheckFifoParam>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800236a:	2301      	movs	r3, #1
 800236c:	e016      	b.n	800239c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fab8 	bl	80028ec <DMA_CalcBaseAndBitshift>
 800237c:	4603      	mov	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	223f      	movs	r2, #63	; 0x3f
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f010803f 	.word	0xf010803f

080023a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Start_IT+0x26>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e040      	b.n	8002450 <HAL_DMA_Start_IT+0xa8>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d12f      	bne.n	8002442 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fa4a 	bl	8002890 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	223f      	movs	r2, #63	; 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0216 	orr.w	r2, r2, #22
 8002416:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e005      	b.n	800244e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002466:	f7ff fdaf 	bl	8001fc8 <HAL_GetTick>
 800246a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d008      	beq.n	800248a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e052      	b.n	8002530 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0216 	bic.w	r2, r2, #22
 8002498:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_DMA_Abort+0x62>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0208 	bic.w	r2, r2, #8
 80024c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024da:	e013      	b.n	8002504 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024dc:	f7ff fd74 	bl	8001fc8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d90c      	bls.n	8002504 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e015      	b.n	8002530 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e4      	bne.n	80024dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	223f      	movs	r2, #63	; 0x3f
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d004      	beq.n	8002556 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00c      	b.n	8002570 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2205      	movs	r2, #5
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002588:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <HAL_DMA_IRQHandler+0x248>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a8e      	ldr	r2, [pc, #568]	; (80027c8 <HAL_DMA_IRQHandler+0x24c>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0a9b      	lsrs	r3, r3, #10
 8002594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2208      	movs	r2, #8
 80025a8:	409a      	lsls	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0204 	bic.w	r2, r2, #4
 80025ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	2208      	movs	r2, #8
 80025d6:	409a      	lsls	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2201      	movs	r2, #1
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d012      	beq.n	800261e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	2201      	movs	r2, #1
 800260c:	409a      	lsls	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f043 0202 	orr.w	r2, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2204      	movs	r2, #4
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	2204      	movs	r2, #4
 8002642:	409a      	lsls	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	2210      	movs	r2, #16
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d043      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03c      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	2210      	movs	r2, #16
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d018      	beq.n	80026be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d024      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
 80026aa:	e01f      	b.n	80026ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01b      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e016      	b.n	80026ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0208 	bic.w	r2, r2, #8
 80026da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2220      	movs	r2, #32
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 808f 	beq.w	800281c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8087 	beq.w	800281c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2220      	movs	r2, #32
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b05      	cmp	r3, #5
 8002724:	d136      	bne.n	8002794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0216 	bic.w	r2, r2, #22
 8002734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <HAL_DMA_IRQHandler+0x1da>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0208 	bic.w	r2, r2, #8
 8002764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	223f      	movs	r2, #63	; 0x3f
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002786:	2b00      	cmp	r3, #0
 8002788:	d07e      	beq.n	8002888 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
        }
        return;
 8002792:	e079      	b.n	8002888 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01d      	beq.n	80027de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10d      	bne.n	80027cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d031      	beq.n	800281c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	e02c      	b.n	800281c <HAL_DMA_IRQHandler+0x2a0>
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000
 80027c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
 80027dc:	e01e      	b.n	800281c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10f      	bne.n	800280c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0210 	bic.w	r2, r2, #16
 80027fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	2b00      	cmp	r3, #0
 8002822:	d032      	beq.n	800288a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d022      	beq.n	8002876 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2205      	movs	r2, #5
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	3301      	adds	r3, #1
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	d307      	bcc.n	8002864 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f2      	bne.n	8002848 <HAL_DMA_IRQHandler+0x2cc>
 8002862:	e000      	b.n	8002866 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002864:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
 8002886:	e000      	b.n	800288a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002888:	bf00      	nop
    }
  }
}
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d108      	bne.n	80028d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ce:	e007      	b.n	80028e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	60da      	str	r2, [r3, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3b10      	subs	r3, #16
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <DMA_CalcBaseAndBitshift+0x64>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002906:	4a13      	ldr	r2, [pc, #76]	; (8002954 <DMA_CalcBaseAndBitshift+0x68>)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d909      	bls.n	800292e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	1d1a      	adds	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	659a      	str	r2, [r3, #88]	; 0x58
 800292c:	e007      	b.n	800293e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002936:	f023 0303 	bic.w	r3, r3, #3
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	aaaaaaab 	.word	0xaaaaaaab
 8002954:	080088a8 	.word	0x080088a8

08002958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11f      	bne.n	80029b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d856      	bhi.n	8002a26 <DMA_CheckFifoParam+0xce>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <DMA_CheckFifoParam+0x28>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	080029a3 	.word	0x080029a3
 8002988:	08002991 	.word	0x08002991
 800298c:	08002a27 	.word	0x08002a27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d046      	beq.n	8002a2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e043      	b.n	8002a2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029aa:	d140      	bne.n	8002a2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b0:	e03d      	b.n	8002a2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ba:	d121      	bne.n	8002a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d837      	bhi.n	8002a32 <DMA_CheckFifoParam+0xda>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <DMA_CheckFifoParam+0x70>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029df 	.word	0x080029df
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	080029f1 	.word	0x080029f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      break;
 80029dc:	e030      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d025      	beq.n	8002a36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ee:	e022      	b.n	8002a36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f8:	d11f      	bne.n	8002a3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029fe:	e01c      	b.n	8002a3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d903      	bls.n	8002a0e <DMA_CheckFifoParam+0xb6>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d003      	beq.n	8002a14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a0c:	e018      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      break;
 8002a12:	e015      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e00b      	b.n	8002a3e <DMA_CheckFifoParam+0xe6>
      break;
 8002a26:	bf00      	nop
 8002a28:	e00a      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e008      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e006      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e004      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e002      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e159      	b.n	8002d20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8148 	bne.w	8002d1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a2 	beq.w	8002d1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4a56      	ldr	r2, [pc, #344]	; (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	; 0x44
 8002be6:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf2:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_GPIO_Init+0x2ec>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a49      	ldr	r2, [pc, #292]	; (8002d40 <HAL_GPIO_Init+0x2f0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d019      	beq.n	8002c52 <HAL_GPIO_Init+0x202>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a48      	ldr	r2, [pc, #288]	; (8002d44 <HAL_GPIO_Init+0x2f4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_GPIO_Init+0x1fe>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a47      	ldr	r2, [pc, #284]	; (8002d48 <HAL_GPIO_Init+0x2f8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00d      	beq.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a46      	ldr	r2, [pc, #280]	; (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <HAL_GPIO_Init+0x1f6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a45      	ldr	r2, [pc, #276]	; (8002d50 <HAL_GPIO_Init+0x300>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_GPIO_Init+0x1f2>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c42:	2307      	movs	r3, #7
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c52:	2300      	movs	r3, #0
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c64:	4935      	ldr	r1, [pc, #212]	; (8002d3c <HAL_GPIO_Init+0x2ec>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c72:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c96:	4a2f      	ldr	r2, [pc, #188]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc0:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	f67f aea2 	bls.w	8002a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e12b      	b.n	8002ff6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fe40 	bl	8001a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	; 0x24
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df0:	f001 f848 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a81      	ldr	r2, [pc, #516]	; (8003000 <HAL_I2C_Init+0x274>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d807      	bhi.n	8002e10 <HAL_I2C_Init+0x84>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a80      	ldr	r2, [pc, #512]	; (8003004 <HAL_I2C_Init+0x278>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e006      	b.n	8002e1e <HAL_I2C_Init+0x92>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a7d      	ldr	r2, [pc, #500]	; (8003008 <HAL_I2C_Init+0x27c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0e7      	b.n	8002ff6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a78      	ldr	r2, [pc, #480]	; (800300c <HAL_I2C_Init+0x280>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a6a      	ldr	r2, [pc, #424]	; (8003000 <HAL_I2C_Init+0x274>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d802      	bhi.n	8002e60 <HAL_I2C_Init+0xd4>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	e009      	b.n	8002e74 <HAL_I2C_Init+0xe8>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a69      	ldr	r2, [pc, #420]	; (8003010 <HAL_I2C_Init+0x284>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	3301      	adds	r3, #1
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	495c      	ldr	r1, [pc, #368]	; (8003000 <HAL_I2C_Init+0x274>)
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d819      	bhi.n	8002ec8 <HAL_I2C_Init+0x13c>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e59      	subs	r1, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_I2C_Init+0x138>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e59      	subs	r1, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec2:	e051      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	e04f      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <HAL_I2C_Init+0x168>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e58      	subs	r0, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e012      	b.n	8002f1a <HAL_I2C_Init+0x18e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x196>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e022      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10e      	bne.n	8002f48 <HAL_I2C_Init+0x1bc>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1e58      	subs	r0, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	440b      	add	r3, r1
 8002f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	e00f      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	0099      	lsls	r1, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6809      	ldr	r1, [r1, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6911      	ldr	r1, [r2, #16]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68d2      	ldr	r2, [r2, #12]
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	000186a0 	.word	0x000186a0
 8003004:	001e847f 	.word	0x001e847f
 8003008:	003d08ff 	.word	0x003d08ff
 800300c:	431bde83 	.word	0x431bde83
 8003010:	10624dd3 	.word	0x10624dd3

08003014 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
 8003024:	4613      	mov	r3, r2
 8003026:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7fe ffce 	bl	8001fc8 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 80e0 	bne.w	80031fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2319      	movs	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	4970      	ldr	r1, [pc, #448]	; (8003208 <HAL_I2C_Master_Transmit+0x1f4>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f964 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e0d3      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_Master_Transmit+0x50>
 8003060:	2302      	movs	r3, #2
 8003062:	e0cc      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d007      	beq.n	800308a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2221      	movs	r2, #33	; 0x21
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2210      	movs	r2, #16
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	893a      	ldrh	r2, [r7, #8]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_I2C_Master_Transmit+0x1f8>)
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6a3a      	ldr	r2, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f89c 	bl	8003210 <I2C_MasterRequestWrite>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e08d      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030f8:	e066      	b.n	80031c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6a39      	ldr	r1, [r7, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f9de 	bl	80034c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b04      	cmp	r3, #4
 8003110:	d107      	bne.n	8003122 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06b      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11b      	bne.n	800319c <HAL_I2C_Master_Transmit+0x188>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d017      	beq.n	800319c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	6a39      	ldr	r1, [r7, #32]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f9ce 	bl	8003542 <I2C_WaitOnBTFFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d107      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e01a      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d194      	bne.n	80030fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	00100002 	.word	0x00100002
 800320c:	ffff0000 	.word	0xffff0000

08003210 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	460b      	mov	r3, r1
 800321e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d006      	beq.n	800323a <I2C_MasterRequestWrite+0x2a>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d003      	beq.n	800323a <I2C_MasterRequestWrite+0x2a>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003238:	d108      	bne.n	800324c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e00b      	b.n	8003264 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	2b12      	cmp	r3, #18
 8003252:	d107      	bne.n	8003264 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f84f 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328a:	d103      	bne.n	8003294 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e035      	b.n	8003304 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a0:	d108      	bne.n	80032b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032b0:	611a      	str	r2, [r3, #16]
 80032b2:	e01b      	b.n	80032ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032b4:	897b      	ldrh	r3, [r7, #10]
 80032b6:	11db      	asrs	r3, r3, #7
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 0306 	and.w	r3, r3, #6
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f063 030f 	orn	r3, r3, #15
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	490e      	ldr	r1, [pc, #56]	; (800330c <I2C_MasterRequestWrite+0xfc>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f875 	bl	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e010      	b.n	8003304 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4907      	ldr	r1, [pc, #28]	; (8003310 <I2C_MasterRequestWrite+0x100>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f865 	bl	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	00010008 	.word	0x00010008
 8003310:	00010002 	.word	0x00010002

08003314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003324:	e025      	b.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe fe4b 	bl	8001fc8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e023      	b.n	80033ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10d      	bne.n	8003398 <I2C_WaitOnFlagUntilTimeout+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	e00c      	b.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d0b6      	beq.n	8003326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033d0:	e051      	b.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d123      	bne.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f043 0204 	orr.w	r2, r3, #4
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e046      	b.n	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d021      	beq.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fe fdc9 	bl	8001fc8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e020      	b.n	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10c      	bne.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4013      	ands	r3, r2
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e00b      	b.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d18d      	bne.n	80033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034cc:	e02d      	b.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f878 	bl	80035c4 <I2C_IsAcknowledgeFailed>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e02d      	b.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d021      	beq.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7fe fd6f 	bl	8001fc8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e007      	b.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d1ca      	bne.n	80034ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800354e:	e02d      	b.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f837 	bl	80035c4 <I2C_IsAcknowledgeFailed>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e02d      	b.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d021      	beq.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fe fd2e 	bl	8001fc8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d1ca      	bne.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d11b      	bne.n	8003614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e267      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d075      	beq.n	800372e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003642:	4b88      	ldr	r3, [pc, #544]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d00c      	beq.n	8003668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364e:	4b85      	ldr	r3, [pc, #532]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003656:	2b08      	cmp	r3, #8
 8003658:	d112      	bne.n	8003680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b82      	ldr	r3, [pc, #520]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003666:	d10b      	bne.n	8003680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	4b7e      	ldr	r3, [pc, #504]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d05b      	beq.n	800372c <HAL_RCC_OscConfig+0x108>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d157      	bne.n	800372c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e242      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x74>
 800368a:	4b76      	ldr	r3, [pc, #472]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a75      	ldr	r2, [pc, #468]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xb0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x98>
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6f      	ldr	r2, [pc, #444]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6d      	ldr	r3, [pc, #436]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6c      	ldr	r2, [pc, #432]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xb0>
 80036bc:	4b69      	ldr	r3, [pc, #420]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a68      	ldr	r2, [pc, #416]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b66      	ldr	r3, [pc, #408]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a65      	ldr	r2, [pc, #404]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fc74 	bl	8001fc8 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe fc70 	bl	8001fc8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e207      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xc0>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe fc60 	bl	8001fc8 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe fc5c 	bl	8001fc8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1f3      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b51      	ldr	r3, [pc, #324]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0xe8>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373a:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003746:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x152>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1c7      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4937      	ldr	r1, [pc, #220]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_RCC_OscConfig+0x244>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fe fc15 	bl	8001fc8 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a2:	f7fe fc11 	bl	8001fc8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1a8      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4925      	ldr	r1, [pc, #148]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x244>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe fbf4 	bl	8001fc8 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fe fbf0 	bl	8001fc8 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e187      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d036      	beq.n	800387c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_RCC_OscConfig+0x248>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe fbd4 	bl	8001fc8 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003824:	f7fe fbd0 	bl	8001fc8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e167      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x200>
 8003842:	e01b      	b.n	800387c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_OscConfig+0x248>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7fe fbbd 	bl	8001fc8 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	e00e      	b.n	8003870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003852:	f7fe fbb9 	bl	8001fc8 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d907      	bls.n	8003870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e150      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	42470000 	.word	0x42470000
 800386c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ea      	bne.n	8003852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8097 	beq.w	80039b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	4b7d      	ldr	r3, [pc, #500]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a7c      	ldr	r2, [pc, #496]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
 80038aa:	4b7a      	ldr	r3, [pc, #488]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ba:	4b77      	ldr	r3, [pc, #476]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d118      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c6:	4b74      	ldr	r3, [pc, #464]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d2:	f7fe fb79 	bl	8001fc8 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7fe fb75 	bl	8001fc8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e10c      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d106      	bne.n	800390e <HAL_RCC_OscConfig+0x2ea>
 8003900:	4b64      	ldr	r3, [pc, #400]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a63      	ldr	r2, [pc, #396]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
 800390c:	e01c      	b.n	8003948 <HAL_RCC_OscConfig+0x324>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b05      	cmp	r3, #5
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x30c>
 8003916:	4b5f      	ldr	r3, [pc, #380]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a5e      	ldr	r2, [pc, #376]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
 8003922:	4b5c      	ldr	r3, [pc, #368]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5b      	ldr	r2, [pc, #364]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0x324>
 8003930:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a57      	ldr	r2, [pc, #348]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	4b55      	ldr	r3, [pc, #340]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a54      	ldr	r2, [pc, #336]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003942:	f023 0304 	bic.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fe fb3a 	bl	8001fc8 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fe fb36 	bl	8001fc8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0cb      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0ee      	beq.n	8003958 <HAL_RCC_OscConfig+0x334>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397c:	f7fe fb24 	bl	8001fc8 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe fb20 	bl	8001fc8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0b5      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399a:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ee      	bne.n	8003984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	4a38      	ldr	r2, [pc, #224]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a1 	beq.w	8003b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c2:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d05c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d141      	bne.n	8003a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <HAL_RCC_OscConfig+0x478>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe faf4 	bl	8001fc8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe faf0 	bl	8001fc8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e087      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	491b      	ldr	r1, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x478>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fe fac9 	bl	8001fc8 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7fe fac5 	bl	8001fc8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e05c      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x416>
 8003a58:	e054      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0x478>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fab2 	bl	8001fc8 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fe faae 	bl	8001fc8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e045      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x444>
 8003a86:	e03d      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e038      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x4ec>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d028      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d121      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d11a      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0cc      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b68      	ldr	r3, [pc, #416]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d90c      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0b8      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a58      	ldr	r2, [pc, #352]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b80:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a52      	ldr	r2, [pc, #328]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	494d      	ldr	r1, [pc, #308]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d044      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d119      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e07f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e067      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4934      	ldr	r1, [pc, #208]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fe f9e0 	bl	8001fc8 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fe f9dc 	bl	8001fc8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e04f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d20c      	bcs.n	8003c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e032      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4916      	ldr	r1, [pc, #88]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c9a:	f000 f821 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	490a      	ldr	r1, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	5ccb      	ldrb	r3, [r1, r3]
 8003cae:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb2:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe f940 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	08008890 	.word	0x08008890
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	20000004 	.word	0x20000004

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce4:	b090      	sub	sp, #64	; 0x40
 8003ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
 8003cec:	2300      	movs	r3, #0
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf8:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d00d      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x40>
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	f200 80a1 	bhi.w	8003e4c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x34>
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d12:	e09b      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d18:	e09b      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1a:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d1e:	e098      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d2a:	4b4d      	ldr	r3, [pc, #308]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d028      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b4a      	ldr	r3, [pc, #296]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	627a      	str	r2, [r7, #36]	; 0x24
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d4c:	fb03 f201 	mul.w	r2, r3, r1
 8003d50:	2300      	movs	r3, #0
 8003d52:	fb00 f303 	mul.w	r3, r0, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d60:	460a      	mov	r2, r1
 8003d62:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d66:	4413      	add	r3, r2
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	61fa      	str	r2, [r7, #28]
 8003d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d7a:	f7fc ff1d 	bl	8000bb8 <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4613      	mov	r3, r2
 8003d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d86:	e053      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d88:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	2200      	movs	r2, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	617a      	str	r2, [r7, #20]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d9a:	f04f 0b00 	mov.w	fp, #0
 8003d9e:	4652      	mov	r2, sl
 8003da0:	465b      	mov	r3, fp
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	0159      	lsls	r1, r3, #5
 8003dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db0:	0150      	lsls	r0, r2, #5
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	ebb2 080a 	subs.w	r8, r2, sl
 8003dba:	eb63 090b 	sbc.w	r9, r3, fp
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dd2:	ebb2 0408 	subs.w	r4, r2, r8
 8003dd6:	eb63 0509 	sbc.w	r5, r3, r9
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	00eb      	lsls	r3, r5, #3
 8003de4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de8:	00e2      	lsls	r2, r4, #3
 8003dea:	4614      	mov	r4, r2
 8003dec:	461d      	mov	r5, r3
 8003dee:	eb14 030a 	adds.w	r3, r4, sl
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	eb45 030b 	adc.w	r3, r5, fp
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e06:	4629      	mov	r1, r5
 8003e08:	028b      	lsls	r3, r1, #10
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e10:	4621      	mov	r1, r4
 8003e12:	028a      	lsls	r2, r1, #10
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	60fa      	str	r2, [r7, #12]
 8003e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e24:	f7fc fec8 	bl	8000bb8 <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3740      	adds	r7, #64	; 0x40
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	00f42400 	.word	0x00f42400
 8003e68:	017d7840 	.word	0x017d7840

08003e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000000 	.word	0x20000000

08003e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e88:	f7ff fff0 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	080088a0 	.word	0x080088a0

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb0:	f7ff ffdc 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0b5b      	lsrs	r3, r3, #13
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	080088a0 	.word	0x080088a0

08003ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e041      	b.n	8003f6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fde4 	bl	8001ac8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f000 f9a0 	bl	8004258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_TIM_PWM_Start+0x24>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e022      	b.n	8003fde <HAL_TIM_PWM_Start+0x6a>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d109      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0x3e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e015      	b.n	8003fde <HAL_TIM_PWM_Start+0x6a>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d109      	bne.n	8003fcc <HAL_TIM_PWM_Start+0x58>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e008      	b.n	8003fde <HAL_TIM_PWM_Start+0x6a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e068      	b.n	80040b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x82>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff4:	e013      	b.n	800401e <HAL_TIM_PWM_Start+0xaa>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_PWM_Start+0x92>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004004:	e00b      	b.n	800401e <HAL_TIM_PWM_Start+0xaa>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Start+0xa2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004014:	e003      	b.n	800401e <HAL_TIM_PWM_Start+0xaa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2201      	movs	r2, #1
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fb22 	bl	8004670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <HAL_TIM_PWM_Start+0x14c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d107      	bne.n	8004046 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <HAL_TIM_PWM_Start+0x14c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_TIM_PWM_Start+0x10e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d013      	beq.n	8004082 <HAL_TIM_PWM_Start+0x10e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_TIM_PWM_Start+0x150>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_TIM_PWM_Start+0x10e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <HAL_TIM_PWM_Start+0x154>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_TIM_PWM_Start+0x10e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_TIM_PWM_Start+0x158>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_TIM_PWM_Start+0x10e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_TIM_PWM_Start+0x15c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d111      	bne.n	80040a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b06      	cmp	r3, #6
 8004092:	d010      	beq.n	80040b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a4:	e007      	b.n	80040b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	40014000 	.word	0x40014000

080040d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e0ae      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	f200 809f 	bhi.w	8004240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	0800413d 	.word	0x0800413d
 800410c:	08004241 	.word	0x08004241
 8004110:	08004241 	.word	0x08004241
 8004114:	08004241 	.word	0x08004241
 8004118:	0800417d 	.word	0x0800417d
 800411c:	08004241 	.word	0x08004241
 8004120:	08004241 	.word	0x08004241
 8004124:	08004241 	.word	0x08004241
 8004128:	080041bf 	.word	0x080041bf
 800412c:	08004241 	.word	0x08004241
 8004130:	08004241 	.word	0x08004241
 8004134:	08004241 	.word	0x08004241
 8004138:	080041ff 	.word	0x080041ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f908 	bl	8004358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6999      	ldr	r1, [r3, #24]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	619a      	str	r2, [r3, #24]
      break;
 800417a:	e064      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f94e 	bl	8004424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	021a      	lsls	r2, r3, #8
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	619a      	str	r2, [r3, #24]
      break;
 80041bc:	e043      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f999 	bl	80044fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0208 	orr.w	r2, r2, #8
 80041d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0204 	bic.w	r2, r2, #4
 80041e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69d9      	ldr	r1, [r3, #28]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	61da      	str	r2, [r3, #28]
      break;
 80041fc:	e023      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f9e3 	bl	80045d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	61da      	str	r2, [r3, #28]
      break;
 800423e:	e002      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a34      	ldr	r2, [pc, #208]	; (800433c <TIM_Base_SetConfig+0xe4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a31      	ldr	r2, [pc, #196]	; (8004340 <TIM_Base_SetConfig+0xe8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a30      	ldr	r2, [pc, #192]	; (8004344 <TIM_Base_SetConfig+0xec>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x38>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <TIM_Base_SetConfig+0xf0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a25      	ldr	r2, [pc, #148]	; (800433c <TIM_Base_SetConfig+0xe4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01b      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d017      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a22      	ldr	r2, [pc, #136]	; (8004340 <TIM_Base_SetConfig+0xe8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a21      	ldr	r2, [pc, #132]	; (8004344 <TIM_Base_SetConfig+0xec>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00f      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a20      	ldr	r2, [pc, #128]	; (8004348 <TIM_Base_SetConfig+0xf0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <TIM_Base_SetConfig+0xf4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_Base_SetConfig+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_Base_SetConfig+0x8a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <TIM_Base_SetConfig+0xfc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <TIM_Base_SetConfig+0xe4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	615a      	str	r2, [r3, #20]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 0302 	bic.w	r3, r3, #2
 80043a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <TIM_OC1_SetConfig+0xc8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10c      	bne.n	80043ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0308 	bic.w	r3, r3, #8
 80043ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 0304 	bic.w	r3, r3, #4
 80043cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a13      	ldr	r2, [pc, #76]	; (8004420 <TIM_OC1_SetConfig+0xc8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d111      	bne.n	80043fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	621a      	str	r2, [r3, #32]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40010000 	.word	0x40010000

08004424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f023 0210 	bic.w	r2, r3, #16
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0320 	bic.w	r3, r3, #32
 800446e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <TIM_OC2_SetConfig+0xd4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10d      	bne.n	80044a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800448a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <TIM_OC2_SetConfig+0xd4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d113      	bne.n	80044d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000

080044fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <TIM_OC3_SetConfig+0xd0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10d      	bne.n	8004576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <TIM_OC3_SetConfig+0xd0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d113      	bne.n	80045a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40010000 	.word	0x40010000

080045d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800461a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	031b      	lsls	r3, r3, #12
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <TIM_OC4_SetConfig+0x9c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d109      	bne.n	8004644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	019b      	lsls	r3, r3, #6
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40010000 	.word	0x40010000

08004670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2201      	movs	r2, #1
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e050      	b.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d013      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a16      	ldr	r2, [pc, #88]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a15      	ldr	r2, [pc, #84]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10c      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4313      	orrs	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40014000 	.word	0x40014000

08004798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e03f      	b.n	800482a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd f9da 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fe9b 	bl	8005518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b08c      	sub	sp, #48	; 0x30
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b20      	cmp	r3, #32
 800484a:	d152      	bne.n	80048f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e04b      	b.n	80048f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004866:	2302      	movs	r3, #2
 8004868:	e044      	b.n	80048f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	461a      	mov	r2, r3
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fbea 	bl	8005058 <UART_Start_Receive_DMA>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800488a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800488e:	2b00      	cmp	r3, #0
 8004890:	d12c      	bne.n	80048ec <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	2b01      	cmp	r3, #1
 8004898:	d125      	bne.n	80048e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	617b      	str	r3, [r7, #20]
   return(result);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f043 0310 	orr.w	r3, r3, #16
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d0:	627a      	str	r2, [r7, #36]	; 0x24
 80048d2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6a39      	ldr	r1, [r7, #32]
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80048e4:	e002      	b.n	80048ec <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80048ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048f0:	e000      	b.n	80048f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3730      	adds	r7, #48	; 0x30
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b0ba      	sub	sp, #232	; 0xe8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004922:	2300      	movs	r3, #0
 8004924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004928:	2300      	movs	r3, #0
 800492a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800493a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_UART_IRQHandler+0x66>
 800494e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fd21 	bl	80053a2 <UART_Receive_IT>
      return;
 8004960:	e256      	b.n	8004e10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80de 	beq.w	8004b28 <HAL_UART_IRQHandler+0x22c>
 800496c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80d1 	beq.w	8004b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_UART_IRQHandler+0xae>
 8004992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <HAL_UART_IRQHandler+0xd2>
 80049b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0202 	orr.w	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_UART_IRQHandler+0xf6>
 80049da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0204 	orr.w	r2, r3, #4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d011      	beq.n	8004a22 <HAL_UART_IRQHandler+0x126>
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0208 	orr.w	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 81ed 	beq.w	8004e06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_UART_IRQHandler+0x14e>
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fcac 	bl	80053a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <HAL_UART_IRQHandler+0x17a>
 8004a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d04f      	beq.n	8004b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fbb4 	bl	80051e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d141      	bne.n	8004b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3314      	adds	r3, #20
 8004a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1d9      	bne.n	8004a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d013      	beq.n	8004b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	4a7d      	ldr	r2, [pc, #500]	; (8004cd8 <HAL_UART_IRQHandler+0x3dc>)
 8004ae4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fd fd24 	bl	8002538 <HAL_DMA_Abort_IT>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d016      	beq.n	8004b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b00:	4610      	mov	r0, r2
 8004b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	e00e      	b.n	8004b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9a4 	bl	8004e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0c:	e00a      	b.n	8004b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f9a0 	bl	8004e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b14:	e006      	b.n	8004b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f99c 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b22:	e170      	b.n	8004e06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	bf00      	nop
    return;
 8004b26:	e16e      	b.n	8004e06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	f040 814a 	bne.w	8004dc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8143 	beq.w	8004dc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 813c 	beq.w	8004dc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	f040 80b4 	bne.w	8004cdc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8140 	beq.w	8004e0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b92:	429a      	cmp	r2, r3
 8004b94:	f080 8139 	bcs.w	8004e0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	f000 8088 	beq.w	8004cbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1d9      	bne.n	8004bae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3314      	adds	r3, #20
 8004c00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e1      	bne.n	8004bfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e3      	bne.n	8004c36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ca2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e3      	bne.n	8004c7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd fbcd 	bl	8002458 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc f9dc 	bl	800108c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cd4:	e099      	b.n	8004e0a <HAL_UART_IRQHandler+0x50e>
 8004cd6:	bf00      	nop
 8004cd8:	080052ab 	.word	0x080052ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 808b 	beq.w	8004e0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8086 	beq.w	8004e0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d26:	647a      	str	r2, [r7, #68]	; 0x44
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e3      	bne.n	8004d02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	623b      	str	r3, [r7, #32]
   return(result);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e3      	bne.n	8004d3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0310 	bic.w	r3, r3, #16
 8004d96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004da4:	61fa      	str	r2, [r7, #28]
 8004da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	69b9      	ldr	r1, [r7, #24]
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	617b      	str	r3, [r7, #20]
   return(result);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e3      	bne.n	8004d80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fc f964 	bl	800108c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dc4:	e023      	b.n	8004e0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_UART_IRQHandler+0x4ea>
 8004dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa77 	bl	80052d2 <UART_Transmit_IT>
    return;
 8004de4:	e014      	b.n	8004e10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00e      	beq.n	8004e10 <HAL_UART_IRQHandler+0x514>
 8004df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fab7 	bl	8005372 <UART_EndTransmit_IT>
    return;
 8004e04:	e004      	b.n	8004e10 <HAL_UART_IRQHandler+0x514>
    return;
 8004e06:	bf00      	nop
 8004e08:	e002      	b.n	8004e10 <HAL_UART_IRQHandler+0x514>
      return;
 8004e0a:	bf00      	nop
 8004e0c:	e000      	b.n	8004e10 <HAL_UART_IRQHandler+0x514>
      return;
 8004e0e:	bf00      	nop
  }
}
 8004e10:	37e8      	adds	r7, #232	; 0xe8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop

08004e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b09c      	sub	sp, #112	; 0x70
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d172      	bne.n	8004f6a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e86:	2200      	movs	r2, #0
 8004e88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eaa:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3314      	adds	r3, #20
 8004edc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ede:	647a      	str	r2, [r7, #68]	; 0x44
 8004ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	623b      	str	r3, [r7, #32]
   return(result);
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f08:	663b      	str	r3, [r7, #96]	; 0x60
 8004f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f12:	633a      	str	r2, [r7, #48]	; 0x30
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d119      	bne.n	8004f6a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f023 0310 	bic.w	r3, r3, #16
 8004f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f56:	61fa      	str	r2, [r7, #28]
 8004f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	69b9      	ldr	r1, [r7, #24]
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	617b      	str	r3, [r7, #20]
   return(result);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d106      	bne.n	8004f80 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f76:	4619      	mov	r1, r3
 8004f78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f7a:	f7fc f887 	bl	800108c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f7e:	e002      	b.n	8004f86 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f82:	f7ff ff53 	bl	8004e2c <HAL_UART_RxCpltCallback>
}
 8004f86:	bf00      	nop
 8004f88:	3770      	adds	r7, #112	; 0x70
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d108      	bne.n	8004fb6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7fc f86c 	bl	800108c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fb4:	e002      	b.n	8004fbc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff ff42 	bl	8004e40 <HAL_UART_RxHalfCpltCallback>
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe0:	2b80      	cmp	r3, #128	; 0x80
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b21      	cmp	r3, #33	; 0x21
 8004ff6:	d108      	bne.n	800500a <UART_DMAError+0x46>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005004:	68b8      	ldr	r0, [r7, #8]
 8005006:	f000 f8c5 	bl	8005194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b22      	cmp	r3, #34	; 0x22
 800502a:	d108      	bne.n	800503e <UART_DMAError+0x7a>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005038:	68b8      	ldr	r0, [r7, #8]
 800503a:	f000 f8d3 	bl	80051e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0210 	orr.w	r2, r3, #16
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800504a:	68b8      	ldr	r0, [r7, #8]
 800504c:	f7ff ff02 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b098      	sub	sp, #96	; 0x60
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2222      	movs	r2, #34	; 0x22
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	4a40      	ldr	r2, [pc, #256]	; (8005188 <UART_Start_Receive_DMA+0x130>)
 8005086:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	4a3f      	ldr	r2, [pc, #252]	; (800518c <UART_Start_Receive_DMA+0x134>)
 800508e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	4a3e      	ldr	r2, [pc, #248]	; (8005190 <UART_Start_Receive_DMA+0x138>)
 8005096:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	2200      	movs	r2, #0
 800509e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	f7fd f976 	bl	80023a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d019      	beq.n	8005116 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005102:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005104:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005108:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3314      	adds	r3, #20
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	657b      	str	r3, [r7, #84]	; 0x54
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005136:	63ba      	str	r2, [r7, #56]	; 0x38
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800513c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	617b      	str	r3, [r7, #20]
   return(result);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005160:	653b      	str	r3, [r7, #80]	; 0x50
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800516a:	627a      	str	r2, [r7, #36]	; 0x24
 800516c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6a39      	ldr	r1, [r7, #32]
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	61fb      	str	r3, [r7, #28]
   return(result);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3760      	adds	r7, #96	; 0x60
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	08004e69 	.word	0x08004e69
 800518c:	08004f8f 	.word	0x08004f8f
 8005190:	08004fc5 	.word	0x08004fc5

08005194 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	; 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	61ba      	str	r2, [r7, #24]
 80051be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6979      	ldr	r1, [r7, #20]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80051d8:	bf00      	nop
 80051da:	3724      	adds	r7, #36	; 0x24
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b095      	sub	sp, #84	; 0x54
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800520c:	643a      	str	r2, [r7, #64]	; 0x40
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e5      	bne.n	80051ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005240:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	2b01      	cmp	r3, #1
 800525a:	d119      	bne.n	8005290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	60bb      	str	r3, [r7, #8]
   return(result);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800527c:	61ba      	str	r2, [r7, #24]
 800527e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6979      	ldr	r1, [r7, #20]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	613b      	str	r3, [r7, #16]
   return(result);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800529e:	bf00      	nop
 80052a0:	3754      	adds	r7, #84	; 0x54
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fdc5 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b21      	cmp	r3, #33	; 0x21
 80052e4:	d13e      	bne.n	8005364 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	d114      	bne.n	800531a <UART_Transmit_IT+0x48>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d110      	bne.n	800531a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800530c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]
 8005318:	e008      	b.n	800532c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	1c59      	adds	r1, r3, #1
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6211      	str	r1, [r2, #32]
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4619      	mov	r1, r3
 800533a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10f      	bne.n	8005360 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800534e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800535e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e000      	b.n	8005366 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005364:	2302      	movs	r3, #2
  }
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fd40 	bl	8004e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b08c      	sub	sp, #48	; 0x30
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b22      	cmp	r3, #34	; 0x22
 80053b4:	f040 80ab 	bne.w	800550e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d117      	bne.n	80053f2 <UART_Receive_IT+0x50>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d113      	bne.n	80053f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28
 80053f0:	e026      	b.n	8005440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005404:	d007      	beq.n	8005416 <UART_Receive_IT+0x74>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <UART_Receive_IT+0x82>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e008      	b.n	8005436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005430:	b2da      	uxtb	r2, r3
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29b      	uxth	r3, r3
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4619      	mov	r1, r3
 800544e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005450:	2b00      	cmp	r3, #0
 8005452:	d15a      	bne.n	800550a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0220 	bic.w	r2, r2, #32
 8005462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	2b01      	cmp	r3, #1
 8005492:	d135      	bne.n	8005500 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	613b      	str	r3, [r7, #16]
   return(result);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f023 0310 	bic.w	r3, r3, #16
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	623a      	str	r2, [r7, #32]
 80054bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	69f9      	ldr	r1, [r7, #28]
 80054c0:	6a3a      	ldr	r2, [r7, #32]
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d10a      	bne.n	80054f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fb fdc7 	bl	800108c <HAL_UARTEx_RxEventCallback>
 80054fe:	e002      	b.n	8005506 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fc93 	bl	8004e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e002      	b.n	8005510 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3730      	adds	r7, #48	; 0x30
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800551c:	b0c0      	sub	sp, #256	; 0x100
 800551e:	af00      	add	r7, sp, #0
 8005520:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	68d9      	ldr	r1, [r3, #12]
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	ea40 0301 	orr.w	r3, r0, r1
 8005540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	431a      	orrs	r2, r3
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	431a      	orrs	r2, r3
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005570:	f021 010c 	bic.w	r1, r1, #12
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800557e:	430b      	orrs	r3, r1
 8005580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	6999      	ldr	r1, [r3, #24]
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	ea40 0301 	orr.w	r3, r0, r1
 800559e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b8f      	ldr	r3, [pc, #572]	; (80057e4 <UART_SetConfig+0x2cc>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d005      	beq.n	80055b8 <UART_SetConfig+0xa0>
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b8d      	ldr	r3, [pc, #564]	; (80057e8 <UART_SetConfig+0x2d0>)
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d104      	bne.n	80055c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055b8:	f7fe fc78 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 80055bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055c0:	e003      	b.n	80055ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055c2:	f7fe fc5f 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 80055c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d4:	f040 810c 	bne.w	80057f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	1891      	adds	r1, r2, r2
 80055f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80055f2:	415b      	adcs	r3, r3
 80055f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055fa:	4621      	mov	r1, r4
 80055fc:	eb12 0801 	adds.w	r8, r2, r1
 8005600:	4629      	mov	r1, r5
 8005602:	eb43 0901 	adc.w	r9, r3, r1
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561a:	4690      	mov	r8, r2
 800561c:	4699      	mov	r9, r3
 800561e:	4623      	mov	r3, r4
 8005620:	eb18 0303 	adds.w	r3, r8, r3
 8005624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005628:	462b      	mov	r3, r5
 800562a:	eb49 0303 	adc.w	r3, r9, r3
 800562e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800563e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005646:	460b      	mov	r3, r1
 8005648:	18db      	adds	r3, r3, r3
 800564a:	653b      	str	r3, [r7, #80]	; 0x50
 800564c:	4613      	mov	r3, r2
 800564e:	eb42 0303 	adc.w	r3, r2, r3
 8005652:	657b      	str	r3, [r7, #84]	; 0x54
 8005654:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005658:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800565c:	f7fb faac 	bl	8000bb8 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4b61      	ldr	r3, [pc, #388]	; (80057ec <UART_SetConfig+0x2d4>)
 8005666:	fba3 2302 	umull	r2, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	011c      	lsls	r4, r3, #4
 800566e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005672:	2200      	movs	r2, #0
 8005674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005678:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800567c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	1891      	adds	r1, r2, r2
 8005686:	64b9      	str	r1, [r7, #72]	; 0x48
 8005688:	415b      	adcs	r3, r3
 800568a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005690:	4641      	mov	r1, r8
 8005692:	eb12 0a01 	adds.w	sl, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb43 0b01 	adc.w	fp, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b0:	4692      	mov	sl, r2
 80056b2:	469b      	mov	fp, r3
 80056b4:	4643      	mov	r3, r8
 80056b6:	eb1a 0303 	adds.w	r3, sl, r3
 80056ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056be:	464b      	mov	r3, r9
 80056c0:	eb4b 0303 	adc.w	r3, fp, r3
 80056c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056dc:	460b      	mov	r3, r1
 80056de:	18db      	adds	r3, r3, r3
 80056e0:	643b      	str	r3, [r7, #64]	; 0x40
 80056e2:	4613      	mov	r3, r2
 80056e4:	eb42 0303 	adc.w	r3, r2, r3
 80056e8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056f2:	f7fb fa61 	bl	8000bb8 <__aeabi_uldivmod>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	4b3b      	ldr	r3, [pc, #236]	; (80057ec <UART_SetConfig+0x2d4>)
 80056fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2264      	movs	r2, #100	; 0x64
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	1acb      	subs	r3, r1, r3
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005712:	4b36      	ldr	r3, [pc, #216]	; (80057ec <UART_SetConfig+0x2d4>)
 8005714:	fba3 2302 	umull	r2, r3, r3, r2
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005720:	441c      	add	r4, r3
 8005722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005726:	2200      	movs	r2, #0
 8005728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800572c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005730:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005734:	4642      	mov	r2, r8
 8005736:	464b      	mov	r3, r9
 8005738:	1891      	adds	r1, r2, r2
 800573a:	63b9      	str	r1, [r7, #56]	; 0x38
 800573c:	415b      	adcs	r3, r3
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005744:	4641      	mov	r1, r8
 8005746:	1851      	adds	r1, r2, r1
 8005748:	6339      	str	r1, [r7, #48]	; 0x30
 800574a:	4649      	mov	r1, r9
 800574c:	414b      	adcs	r3, r1
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800575c:	4659      	mov	r1, fp
 800575e:	00cb      	lsls	r3, r1, #3
 8005760:	4651      	mov	r1, sl
 8005762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005766:	4651      	mov	r1, sl
 8005768:	00ca      	lsls	r2, r1, #3
 800576a:	4610      	mov	r0, r2
 800576c:	4619      	mov	r1, r3
 800576e:	4603      	mov	r3, r0
 8005770:	4642      	mov	r2, r8
 8005772:	189b      	adds	r3, r3, r2
 8005774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005778:	464b      	mov	r3, r9
 800577a:	460a      	mov	r2, r1
 800577c:	eb42 0303 	adc.w	r3, r2, r3
 8005780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005790:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005794:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005798:	460b      	mov	r3, r1
 800579a:	18db      	adds	r3, r3, r3
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
 800579e:	4613      	mov	r3, r2
 80057a0:	eb42 0303 	adc.w	r3, r2, r3
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057ae:	f7fb fa03 	bl	8000bb8 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <UART_SetConfig+0x2d4>)
 80057b8:	fba3 1302 	umull	r1, r3, r3, r2
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	2164      	movs	r1, #100	; 0x64
 80057c0:	fb01 f303 	mul.w	r3, r1, r3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	3332      	adds	r3, #50	; 0x32
 80057ca:	4a08      	ldr	r2, [pc, #32]	; (80057ec <UART_SetConfig+0x2d4>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f003 0207 	and.w	r2, r3, #7
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4422      	add	r2, r4
 80057de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057e0:	e105      	b.n	80059ee <UART_SetConfig+0x4d6>
 80057e2:	bf00      	nop
 80057e4:	40011000 	.word	0x40011000
 80057e8:	40011400 	.word	0x40011400
 80057ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005802:	4642      	mov	r2, r8
 8005804:	464b      	mov	r3, r9
 8005806:	1891      	adds	r1, r2, r2
 8005808:	6239      	str	r1, [r7, #32]
 800580a:	415b      	adcs	r3, r3
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
 800580e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005812:	4641      	mov	r1, r8
 8005814:	1854      	adds	r4, r2, r1
 8005816:	4649      	mov	r1, r9
 8005818:	eb43 0501 	adc.w	r5, r3, r1
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	00eb      	lsls	r3, r5, #3
 8005826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582a:	00e2      	lsls	r2, r4, #3
 800582c:	4614      	mov	r4, r2
 800582e:	461d      	mov	r5, r3
 8005830:	4643      	mov	r3, r8
 8005832:	18e3      	adds	r3, r4, r3
 8005834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005838:	464b      	mov	r3, r9
 800583a:	eb45 0303 	adc.w	r3, r5, r3
 800583e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800584e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800585e:	4629      	mov	r1, r5
 8005860:	008b      	lsls	r3, r1, #2
 8005862:	4621      	mov	r1, r4
 8005864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005868:	4621      	mov	r1, r4
 800586a:	008a      	lsls	r2, r1, #2
 800586c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005870:	f7fb f9a2 	bl	8000bb8 <__aeabi_uldivmod>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4b60      	ldr	r3, [pc, #384]	; (80059fc <UART_SetConfig+0x4e4>)
 800587a:	fba3 2302 	umull	r2, r3, r3, r2
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	011c      	lsls	r4, r3, #4
 8005882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800588c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005890:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	1891      	adds	r1, r2, r2
 800589a:	61b9      	str	r1, [r7, #24]
 800589c:	415b      	adcs	r3, r3
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a4:	4641      	mov	r1, r8
 80058a6:	1851      	adds	r1, r2, r1
 80058a8:	6139      	str	r1, [r7, #16]
 80058aa:	4649      	mov	r1, r9
 80058ac:	414b      	adcs	r3, r1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058bc:	4659      	mov	r1, fp
 80058be:	00cb      	lsls	r3, r1, #3
 80058c0:	4651      	mov	r1, sl
 80058c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c6:	4651      	mov	r1, sl
 80058c8:	00ca      	lsls	r2, r1, #3
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	4642      	mov	r2, r8
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058d8:	464b      	mov	r3, r9
 80058da:	460a      	mov	r2, r1
 80058dc:	eb42 0303 	adc.w	r3, r2, r3
 80058e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058fc:	4649      	mov	r1, r9
 80058fe:	008b      	lsls	r3, r1, #2
 8005900:	4641      	mov	r1, r8
 8005902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005906:	4641      	mov	r1, r8
 8005908:	008a      	lsls	r2, r1, #2
 800590a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800590e:	f7fb f953 	bl	8000bb8 <__aeabi_uldivmod>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <UART_SetConfig+0x4e4>)
 8005918:	fba3 1302 	umull	r1, r3, r3, r2
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	2164      	movs	r1, #100	; 0x64
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	3332      	adds	r3, #50	; 0x32
 800592a:	4a34      	ldr	r2, [pc, #208]	; (80059fc <UART_SetConfig+0x4e4>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005936:	441c      	add	r4, r3
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	673b      	str	r3, [r7, #112]	; 0x70
 8005940:	677a      	str	r2, [r7, #116]	; 0x74
 8005942:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005946:	4642      	mov	r2, r8
 8005948:	464b      	mov	r3, r9
 800594a:	1891      	adds	r1, r2, r2
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	415b      	adcs	r3, r3
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005956:	4641      	mov	r1, r8
 8005958:	1851      	adds	r1, r2, r1
 800595a:	6039      	str	r1, [r7, #0]
 800595c:	4649      	mov	r1, r9
 800595e:	414b      	adcs	r3, r1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800596e:	4659      	mov	r1, fp
 8005970:	00cb      	lsls	r3, r1, #3
 8005972:	4651      	mov	r1, sl
 8005974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005978:	4651      	mov	r1, sl
 800597a:	00ca      	lsls	r2, r1, #3
 800597c:	4610      	mov	r0, r2
 800597e:	4619      	mov	r1, r3
 8005980:	4603      	mov	r3, r0
 8005982:	4642      	mov	r2, r8
 8005984:	189b      	adds	r3, r3, r2
 8005986:	66bb      	str	r3, [r7, #104]	; 0x68
 8005988:	464b      	mov	r3, r9
 800598a:	460a      	mov	r2, r1
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	663b      	str	r3, [r7, #96]	; 0x60
 800599c:	667a      	str	r2, [r7, #100]	; 0x64
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059aa:	4649      	mov	r1, r9
 80059ac:	008b      	lsls	r3, r1, #2
 80059ae:	4641      	mov	r1, r8
 80059b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b4:	4641      	mov	r1, r8
 80059b6:	008a      	lsls	r2, r1, #2
 80059b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059bc:	f7fb f8fc 	bl	8000bb8 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <UART_SetConfig+0x4e4>)
 80059c6:	fba3 1302 	umull	r1, r3, r3, r2
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	2164      	movs	r1, #100	; 0x64
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	3332      	adds	r3, #50	; 0x32
 80059d8:	4a08      	ldr	r2, [pc, #32]	; (80059fc <UART_SetConfig+0x4e4>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4422      	add	r2, r4
 80059ec:	609a      	str	r2, [r3, #8]
}
 80059ee:	bf00      	nop
 80059f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059f4:	46bd      	mov	sp, r7
 80059f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059fa:	bf00      	nop
 80059fc:	51eb851f 	.word	0x51eb851f

08005a00 <__errno>:
 8005a00:	4b01      	ldr	r3, [pc, #4]	; (8005a08 <__errno+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	2000000c 	.word	0x2000000c

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	4d0d      	ldr	r5, [pc, #52]	; (8005a44 <__libc_init_array+0x38>)
 8005a10:	4c0d      	ldr	r4, [pc, #52]	; (8005a48 <__libc_init_array+0x3c>)
 8005a12:	1b64      	subs	r4, r4, r5
 8005a14:	10a4      	asrs	r4, r4, #2
 8005a16:	2600      	movs	r6, #0
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	4d0b      	ldr	r5, [pc, #44]	; (8005a4c <__libc_init_array+0x40>)
 8005a1e:	4c0c      	ldr	r4, [pc, #48]	; (8005a50 <__libc_init_array+0x44>)
 8005a20:	f002 ff02 	bl	8008828 <_init>
 8005a24:	1b64      	subs	r4, r4, r5
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	2600      	movs	r6, #0
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08008c94 	.word	0x08008c94
 8005a48:	08008c94 	.word	0x08008c94
 8005a4c:	08008c94 	.word	0x08008c94
 8005a50:	08008c98 	.word	0x08008c98

08005a54 <memset>:
 8005a54:	4402      	add	r2, r0
 8005a56:	4603      	mov	r3, r0
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d100      	bne.n	8005a5e <memset+0xa>
 8005a5c:	4770      	bx	lr
 8005a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a62:	e7f9      	b.n	8005a58 <memset+0x4>

08005a64 <__cvt>:
 8005a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	ec55 4b10 	vmov	r4, r5, d0
 8005a6c:	2d00      	cmp	r5, #0
 8005a6e:	460e      	mov	r6, r1
 8005a70:	4619      	mov	r1, r3
 8005a72:	462b      	mov	r3, r5
 8005a74:	bfbb      	ittet	lt
 8005a76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a7a:	461d      	movlt	r5, r3
 8005a7c:	2300      	movge	r3, #0
 8005a7e:	232d      	movlt	r3, #45	; 0x2d
 8005a80:	700b      	strb	r3, [r1, #0]
 8005a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a88:	4691      	mov	r9, r2
 8005a8a:	f023 0820 	bic.w	r8, r3, #32
 8005a8e:	bfbc      	itt	lt
 8005a90:	4622      	movlt	r2, r4
 8005a92:	4614      	movlt	r4, r2
 8005a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a98:	d005      	beq.n	8005aa6 <__cvt+0x42>
 8005a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a9e:	d100      	bne.n	8005aa2 <__cvt+0x3e>
 8005aa0:	3601      	adds	r6, #1
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	e000      	b.n	8005aa8 <__cvt+0x44>
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	ab03      	add	r3, sp, #12
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	ab02      	add	r3, sp, #8
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	ec45 4b10 	vmov	d0, r4, r5
 8005ab4:	4653      	mov	r3, sl
 8005ab6:	4632      	mov	r2, r6
 8005ab8:	f000 fcea 	bl	8006490 <_dtoa_r>
 8005abc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	d102      	bne.n	8005aca <__cvt+0x66>
 8005ac4:	f019 0f01 	tst.w	r9, #1
 8005ac8:	d022      	beq.n	8005b10 <__cvt+0xac>
 8005aca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ace:	eb07 0906 	add.w	r9, r7, r6
 8005ad2:	d110      	bne.n	8005af6 <__cvt+0x92>
 8005ad4:	783b      	ldrb	r3, [r7, #0]
 8005ad6:	2b30      	cmp	r3, #48	; 0x30
 8005ad8:	d10a      	bne.n	8005af0 <__cvt+0x8c>
 8005ada:	2200      	movs	r2, #0
 8005adc:	2300      	movs	r3, #0
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ae6:	b918      	cbnz	r0, 8005af0 <__cvt+0x8c>
 8005ae8:	f1c6 0601 	rsb	r6, r6, #1
 8005aec:	f8ca 6000 	str.w	r6, [sl]
 8005af0:	f8da 3000 	ldr.w	r3, [sl]
 8005af4:	4499      	add	r9, r3
 8005af6:	2200      	movs	r2, #0
 8005af8:	2300      	movs	r3, #0
 8005afa:	4620      	mov	r0, r4
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7fa ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b02:	b108      	cbz	r0, 8005b08 <__cvt+0xa4>
 8005b04:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b08:	2230      	movs	r2, #48	; 0x30
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	454b      	cmp	r3, r9
 8005b0e:	d307      	bcc.n	8005b20 <__cvt+0xbc>
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b14:	1bdb      	subs	r3, r3, r7
 8005b16:	4638      	mov	r0, r7
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	b004      	add	sp, #16
 8005b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	9103      	str	r1, [sp, #12]
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	e7f0      	b.n	8005b0a <__cvt+0xa6>

08005b28 <__exponent>:
 8005b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	bfb8      	it	lt
 8005b30:	4249      	neglt	r1, r1
 8005b32:	f803 2b02 	strb.w	r2, [r3], #2
 8005b36:	bfb4      	ite	lt
 8005b38:	222d      	movlt	r2, #45	; 0x2d
 8005b3a:	222b      	movge	r2, #43	; 0x2b
 8005b3c:	2909      	cmp	r1, #9
 8005b3e:	7042      	strb	r2, [r0, #1]
 8005b40:	dd2a      	ble.n	8005b98 <__exponent+0x70>
 8005b42:	f10d 0407 	add.w	r4, sp, #7
 8005b46:	46a4      	mov	ip, r4
 8005b48:	270a      	movs	r7, #10
 8005b4a:	46a6      	mov	lr, r4
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b52:	fb07 1516 	mls	r5, r7, r6, r1
 8005b56:	3530      	adds	r5, #48	; 0x30
 8005b58:	2a63      	cmp	r2, #99	; 0x63
 8005b5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b62:	4631      	mov	r1, r6
 8005b64:	dcf1      	bgt.n	8005b4a <__exponent+0x22>
 8005b66:	3130      	adds	r1, #48	; 0x30
 8005b68:	f1ae 0502 	sub.w	r5, lr, #2
 8005b6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b70:	1c44      	adds	r4, r0, #1
 8005b72:	4629      	mov	r1, r5
 8005b74:	4561      	cmp	r1, ip
 8005b76:	d30a      	bcc.n	8005b8e <__exponent+0x66>
 8005b78:	f10d 0209 	add.w	r2, sp, #9
 8005b7c:	eba2 020e 	sub.w	r2, r2, lr
 8005b80:	4565      	cmp	r5, ip
 8005b82:	bf88      	it	hi
 8005b84:	2200      	movhi	r2, #0
 8005b86:	4413      	add	r3, r2
 8005b88:	1a18      	subs	r0, r3, r0
 8005b8a:	b003      	add	sp, #12
 8005b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b96:	e7ed      	b.n	8005b74 <__exponent+0x4c>
 8005b98:	2330      	movs	r3, #48	; 0x30
 8005b9a:	3130      	adds	r1, #48	; 0x30
 8005b9c:	7083      	strb	r3, [r0, #2]
 8005b9e:	70c1      	strb	r1, [r0, #3]
 8005ba0:	1d03      	adds	r3, r0, #4
 8005ba2:	e7f1      	b.n	8005b88 <__exponent+0x60>

08005ba4 <_printf_float>:
 8005ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba8:	ed2d 8b02 	vpush	{d8}
 8005bac:	b08d      	sub	sp, #52	; 0x34
 8005bae:	460c      	mov	r4, r1
 8005bb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bb4:	4616      	mov	r6, r2
 8005bb6:	461f      	mov	r7, r3
 8005bb8:	4605      	mov	r5, r0
 8005bba:	f001 fa57 	bl	800706c <_localeconv_r>
 8005bbe:	f8d0 a000 	ldr.w	sl, [r0]
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	f7fa fb0c 	bl	80001e0 <strlen>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	930a      	str	r3, [sp, #40]	; 0x28
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	9305      	str	r3, [sp, #20]
 8005bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8005bd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bd8:	3307      	adds	r3, #7
 8005bda:	f023 0307 	bic.w	r3, r3, #7
 8005bde:	f103 0208 	add.w	r2, r3, #8
 8005be2:	f8c8 2000 	str.w	r2, [r8]
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bf6:	9307      	str	r3, [sp, #28]
 8005bf8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bfc:	ee08 0a10 	vmov	s16, r0
 8005c00:	4b9f      	ldr	r3, [pc, #636]	; (8005e80 <_printf_float+0x2dc>)
 8005c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0a:	f7fa ff97 	bl	8000b3c <__aeabi_dcmpun>
 8005c0e:	bb88      	cbnz	r0, 8005c74 <_printf_float+0xd0>
 8005c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c14:	4b9a      	ldr	r3, [pc, #616]	; (8005e80 <_printf_float+0x2dc>)
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	f7fa ff71 	bl	8000b00 <__aeabi_dcmple>
 8005c1e:	bb48      	cbnz	r0, 8005c74 <_printf_float+0xd0>
 8005c20:	2200      	movs	r2, #0
 8005c22:	2300      	movs	r3, #0
 8005c24:	4640      	mov	r0, r8
 8005c26:	4649      	mov	r1, r9
 8005c28:	f7fa ff60 	bl	8000aec <__aeabi_dcmplt>
 8005c2c:	b110      	cbz	r0, 8005c34 <_printf_float+0x90>
 8005c2e:	232d      	movs	r3, #45	; 0x2d
 8005c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c34:	4b93      	ldr	r3, [pc, #588]	; (8005e84 <_printf_float+0x2e0>)
 8005c36:	4894      	ldr	r0, [pc, #592]	; (8005e88 <_printf_float+0x2e4>)
 8005c38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c3c:	bf94      	ite	ls
 8005c3e:	4698      	movls	r8, r3
 8005c40:	4680      	movhi	r8, r0
 8005c42:	2303      	movs	r3, #3
 8005c44:	6123      	str	r3, [r4, #16]
 8005c46:	9b05      	ldr	r3, [sp, #20]
 8005c48:	f023 0204 	bic.w	r2, r3, #4
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	f04f 0900 	mov.w	r9, #0
 8005c52:	9700      	str	r7, [sp, #0]
 8005c54:	4633      	mov	r3, r6
 8005c56:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 f9d8 	bl	8006010 <_printf_common>
 8005c60:	3001      	adds	r0, #1
 8005c62:	f040 8090 	bne.w	8005d86 <_printf_float+0x1e2>
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	b00d      	add	sp, #52	; 0x34
 8005c6c:	ecbd 8b02 	vpop	{d8}
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	4640      	mov	r0, r8
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	f7fa ff5e 	bl	8000b3c <__aeabi_dcmpun>
 8005c80:	b140      	cbz	r0, 8005c94 <_printf_float+0xf0>
 8005c82:	464b      	mov	r3, r9
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bfbc      	itt	lt
 8005c88:	232d      	movlt	r3, #45	; 0x2d
 8005c8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c8e:	487f      	ldr	r0, [pc, #508]	; (8005e8c <_printf_float+0x2e8>)
 8005c90:	4b7f      	ldr	r3, [pc, #508]	; (8005e90 <_printf_float+0x2ec>)
 8005c92:	e7d1      	b.n	8005c38 <_printf_float+0x94>
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c9a:	9206      	str	r2, [sp, #24]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	d13f      	bne.n	8005d20 <_printf_float+0x17c>
 8005ca0:	2306      	movs	r3, #6
 8005ca2:	6063      	str	r3, [r4, #4]
 8005ca4:	9b05      	ldr	r3, [sp, #20]
 8005ca6:	6861      	ldr	r1, [r4, #4]
 8005ca8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cac:	2300      	movs	r3, #0
 8005cae:	9303      	str	r3, [sp, #12]
 8005cb0:	ab0a      	add	r3, sp, #40	; 0x28
 8005cb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cb6:	ab09      	add	r3, sp, #36	; 0x24
 8005cb8:	ec49 8b10 	vmov	d0, r8, r9
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	6022      	str	r2, [r4, #0]
 8005cc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f7ff fecd 	bl	8005a64 <__cvt>
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cce:	2b47      	cmp	r3, #71	; 0x47
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	d108      	bne.n	8005ce6 <_printf_float+0x142>
 8005cd4:	1cc8      	adds	r0, r1, #3
 8005cd6:	db02      	blt.n	8005cde <_printf_float+0x13a>
 8005cd8:	6863      	ldr	r3, [r4, #4]
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	dd41      	ble.n	8005d62 <_printf_float+0x1be>
 8005cde:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ce2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ce6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cea:	d820      	bhi.n	8005d2e <_printf_float+0x18a>
 8005cec:	3901      	subs	r1, #1
 8005cee:	465a      	mov	r2, fp
 8005cf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cf4:	9109      	str	r1, [sp, #36]	; 0x24
 8005cf6:	f7ff ff17 	bl	8005b28 <__exponent>
 8005cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cfc:	1813      	adds	r3, r2, r0
 8005cfe:	2a01      	cmp	r2, #1
 8005d00:	4681      	mov	r9, r0
 8005d02:	6123      	str	r3, [r4, #16]
 8005d04:	dc02      	bgt.n	8005d0c <_printf_float+0x168>
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	07d2      	lsls	r2, r2, #31
 8005d0a:	d501      	bpl.n	8005d10 <_printf_float+0x16c>
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d09c      	beq.n	8005c52 <_printf_float+0xae>
 8005d18:	232d      	movs	r3, #45	; 0x2d
 8005d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d1e:	e798      	b.n	8005c52 <_printf_float+0xae>
 8005d20:	9a06      	ldr	r2, [sp, #24]
 8005d22:	2a47      	cmp	r2, #71	; 0x47
 8005d24:	d1be      	bne.n	8005ca4 <_printf_float+0x100>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1bc      	bne.n	8005ca4 <_printf_float+0x100>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e7b9      	b.n	8005ca2 <_printf_float+0xfe>
 8005d2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d32:	d118      	bne.n	8005d66 <_printf_float+0x1c2>
 8005d34:	2900      	cmp	r1, #0
 8005d36:	6863      	ldr	r3, [r4, #4]
 8005d38:	dd0b      	ble.n	8005d52 <_printf_float+0x1ae>
 8005d3a:	6121      	str	r1, [r4, #16]
 8005d3c:	b913      	cbnz	r3, 8005d44 <_printf_float+0x1a0>
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	07d0      	lsls	r0, r2, #31
 8005d42:	d502      	bpl.n	8005d4a <_printf_float+0x1a6>
 8005d44:	3301      	adds	r3, #1
 8005d46:	440b      	add	r3, r1
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d4c:	f04f 0900 	mov.w	r9, #0
 8005d50:	e7de      	b.n	8005d10 <_printf_float+0x16c>
 8005d52:	b913      	cbnz	r3, 8005d5a <_printf_float+0x1b6>
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	07d2      	lsls	r2, r2, #31
 8005d58:	d501      	bpl.n	8005d5e <_printf_float+0x1ba>
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	e7f4      	b.n	8005d48 <_printf_float+0x1a4>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e7f2      	b.n	8005d48 <_printf_float+0x1a4>
 8005d62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	db05      	blt.n	8005d78 <_printf_float+0x1d4>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	6121      	str	r1, [r4, #16]
 8005d70:	07d8      	lsls	r0, r3, #31
 8005d72:	d5ea      	bpl.n	8005d4a <_printf_float+0x1a6>
 8005d74:	1c4b      	adds	r3, r1, #1
 8005d76:	e7e7      	b.n	8005d48 <_printf_float+0x1a4>
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	bfd4      	ite	le
 8005d7c:	f1c1 0202 	rsble	r2, r1, #2
 8005d80:	2201      	movgt	r2, #1
 8005d82:	4413      	add	r3, r2
 8005d84:	e7e0      	b.n	8005d48 <_printf_float+0x1a4>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	055a      	lsls	r2, r3, #21
 8005d8a:	d407      	bmi.n	8005d9c <_printf_float+0x1f8>
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	4642      	mov	r2, r8
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	d12c      	bne.n	8005df4 <_printf_float+0x250>
 8005d9a:	e764      	b.n	8005c66 <_printf_float+0xc2>
 8005d9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005da0:	f240 80e0 	bls.w	8005f64 <_printf_float+0x3c0>
 8005da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005da8:	2200      	movs	r2, #0
 8005daa:	2300      	movs	r3, #0
 8005dac:	f7fa fe94 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d034      	beq.n	8005e1e <_printf_float+0x27a>
 8005db4:	4a37      	ldr	r2, [pc, #220]	; (8005e94 <_printf_float+0x2f0>)
 8005db6:	2301      	movs	r3, #1
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f43f af51 	beq.w	8005c66 <_printf_float+0xc2>
 8005dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	db02      	blt.n	8005dd2 <_printf_float+0x22e>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	07d8      	lsls	r0, r3, #31
 8005dd0:	d510      	bpl.n	8005df4 <_printf_float+0x250>
 8005dd2:	ee18 3a10 	vmov	r3, s16
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	f43f af41 	beq.w	8005c66 <_printf_float+0xc2>
 8005de4:	f04f 0800 	mov.w	r8, #0
 8005de8:	f104 091a 	add.w	r9, r4, #26
 8005dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dee:	3b01      	subs	r3, #1
 8005df0:	4543      	cmp	r3, r8
 8005df2:	dc09      	bgt.n	8005e08 <_printf_float+0x264>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	079b      	lsls	r3, r3, #30
 8005df8:	f100 8105 	bmi.w	8006006 <_printf_float+0x462>
 8005dfc:	68e0      	ldr	r0, [r4, #12]
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e00:	4298      	cmp	r0, r3
 8005e02:	bfb8      	it	lt
 8005e04:	4618      	movlt	r0, r3
 8005e06:	e730      	b.n	8005c6a <_printf_float+0xc6>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	464a      	mov	r2, r9
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	f43f af27 	beq.w	8005c66 <_printf_float+0xc2>
 8005e18:	f108 0801 	add.w	r8, r8, #1
 8005e1c:	e7e6      	b.n	8005dec <_printf_float+0x248>
 8005e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dc39      	bgt.n	8005e98 <_printf_float+0x2f4>
 8005e24:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <_printf_float+0x2f0>)
 8005e26:	2301      	movs	r3, #1
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f43f af19 	beq.w	8005c66 <_printf_float+0xc2>
 8005e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	d102      	bne.n	8005e42 <_printf_float+0x29e>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	07d9      	lsls	r1, r3, #31
 8005e40:	d5d8      	bpl.n	8005df4 <_printf_float+0x250>
 8005e42:	ee18 3a10 	vmov	r3, s16
 8005e46:	4652      	mov	r2, sl
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f43f af09 	beq.w	8005c66 <_printf_float+0xc2>
 8005e54:	f04f 0900 	mov.w	r9, #0
 8005e58:	f104 0a1a 	add.w	sl, r4, #26
 8005e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5e:	425b      	negs	r3, r3
 8005e60:	454b      	cmp	r3, r9
 8005e62:	dc01      	bgt.n	8005e68 <_printf_float+0x2c4>
 8005e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e66:	e792      	b.n	8005d8e <_printf_float+0x1ea>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4652      	mov	r2, sl
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4628      	mov	r0, r5
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	f43f aef7 	beq.w	8005c66 <_printf_float+0xc2>
 8005e78:	f109 0901 	add.w	r9, r9, #1
 8005e7c:	e7ee      	b.n	8005e5c <_printf_float+0x2b8>
 8005e7e:	bf00      	nop
 8005e80:	7fefffff 	.word	0x7fefffff
 8005e84:	080088b4 	.word	0x080088b4
 8005e88:	080088b8 	.word	0x080088b8
 8005e8c:	080088c0 	.word	0x080088c0
 8005e90:	080088bc 	.word	0x080088bc
 8005e94:	080088c4 	.word	0x080088c4
 8005e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	bfa8      	it	ge
 8005ea0:	461a      	movge	r2, r3
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	4691      	mov	r9, r2
 8005ea6:	dc37      	bgt.n	8005f18 <_printf_float+0x374>
 8005ea8:	f04f 0b00 	mov.w	fp, #0
 8005eac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eb0:	f104 021a 	add.w	r2, r4, #26
 8005eb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eb6:	9305      	str	r3, [sp, #20]
 8005eb8:	eba3 0309 	sub.w	r3, r3, r9
 8005ebc:	455b      	cmp	r3, fp
 8005ebe:	dc33      	bgt.n	8005f28 <_printf_float+0x384>
 8005ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	db3b      	blt.n	8005f40 <_printf_float+0x39c>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07da      	lsls	r2, r3, #31
 8005ecc:	d438      	bmi.n	8005f40 <_printf_float+0x39c>
 8005ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed0:	9a05      	ldr	r2, [sp, #20]
 8005ed2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed4:	1a9a      	subs	r2, r3, r2
 8005ed6:	eba3 0901 	sub.w	r9, r3, r1
 8005eda:	4591      	cmp	r9, r2
 8005edc:	bfa8      	it	ge
 8005ede:	4691      	movge	r9, r2
 8005ee0:	f1b9 0f00 	cmp.w	r9, #0
 8005ee4:	dc35      	bgt.n	8005f52 <_printf_float+0x3ae>
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eee:	f104 0a1a 	add.w	sl, r4, #26
 8005ef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	eba3 0309 	sub.w	r3, r3, r9
 8005efc:	4543      	cmp	r3, r8
 8005efe:	f77f af79 	ble.w	8005df4 <_printf_float+0x250>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4652      	mov	r2, sl
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	f43f aeaa 	beq.w	8005c66 <_printf_float+0xc2>
 8005f12:	f108 0801 	add.w	r8, r8, #1
 8005f16:	e7ec      	b.n	8005ef2 <_printf_float+0x34e>
 8005f18:	4613      	mov	r3, r2
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	d1c0      	bne.n	8005ea8 <_printf_float+0x304>
 8005f26:	e69e      	b.n	8005c66 <_printf_float+0xc2>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	9205      	str	r2, [sp, #20]
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	f43f ae97 	beq.w	8005c66 <_printf_float+0xc2>
 8005f38:	9a05      	ldr	r2, [sp, #20]
 8005f3a:	f10b 0b01 	add.w	fp, fp, #1
 8005f3e:	e7b9      	b.n	8005eb4 <_printf_float+0x310>
 8005f40:	ee18 3a10 	vmov	r3, s16
 8005f44:	4652      	mov	r2, sl
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d1be      	bne.n	8005ece <_printf_float+0x32a>
 8005f50:	e689      	b.n	8005c66 <_printf_float+0xc2>
 8005f52:	9a05      	ldr	r2, [sp, #20]
 8005f54:	464b      	mov	r3, r9
 8005f56:	4442      	add	r2, r8
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d1c1      	bne.n	8005ee6 <_printf_float+0x342>
 8005f62:	e680      	b.n	8005c66 <_printf_float+0xc2>
 8005f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f66:	2a01      	cmp	r2, #1
 8005f68:	dc01      	bgt.n	8005f6e <_printf_float+0x3ca>
 8005f6a:	07db      	lsls	r3, r3, #31
 8005f6c:	d538      	bpl.n	8005fe0 <_printf_float+0x43c>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4642      	mov	r2, r8
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f ae74 	beq.w	8005c66 <_printf_float+0xc2>
 8005f7e:	ee18 3a10 	vmov	r3, s16
 8005f82:	4652      	mov	r2, sl
 8005f84:	4631      	mov	r1, r6
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f43f ae6b 	beq.w	8005c66 <_printf_float+0xc2>
 8005f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f94:	2200      	movs	r2, #0
 8005f96:	2300      	movs	r3, #0
 8005f98:	f7fa fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f9c:	b9d8      	cbnz	r0, 8005fd6 <_printf_float+0x432>
 8005f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa0:	f108 0201 	add.w	r2, r8, #1
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	d10e      	bne.n	8005fce <_printf_float+0x42a>
 8005fb0:	e659      	b.n	8005c66 <_printf_float+0xc2>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f ae52 	beq.w	8005c66 <_printf_float+0xc2>
 8005fc2:	f108 0801 	add.w	r8, r8, #1
 8005fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	4543      	cmp	r3, r8
 8005fcc:	dcf1      	bgt.n	8005fb2 <_printf_float+0x40e>
 8005fce:	464b      	mov	r3, r9
 8005fd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fd4:	e6dc      	b.n	8005d90 <_printf_float+0x1ec>
 8005fd6:	f04f 0800 	mov.w	r8, #0
 8005fda:	f104 0a1a 	add.w	sl, r4, #26
 8005fde:	e7f2      	b.n	8005fc6 <_printf_float+0x422>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4642      	mov	r2, r8
 8005fe4:	e7df      	b.n	8005fa6 <_printf_float+0x402>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	464a      	mov	r2, r9
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f ae38 	beq.w	8005c66 <_printf_float+0xc2>
 8005ff6:	f108 0801 	add.w	r8, r8, #1
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ffe:	1a5b      	subs	r3, r3, r1
 8006000:	4543      	cmp	r3, r8
 8006002:	dcf0      	bgt.n	8005fe6 <_printf_float+0x442>
 8006004:	e6fa      	b.n	8005dfc <_printf_float+0x258>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	f104 0919 	add.w	r9, r4, #25
 800600e:	e7f4      	b.n	8005ffa <_printf_float+0x456>

08006010 <_printf_common>:
 8006010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	4616      	mov	r6, r2
 8006016:	4699      	mov	r9, r3
 8006018:	688a      	ldr	r2, [r1, #8]
 800601a:	690b      	ldr	r3, [r1, #16]
 800601c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006020:	4293      	cmp	r3, r2
 8006022:	bfb8      	it	lt
 8006024:	4613      	movlt	r3, r2
 8006026:	6033      	str	r3, [r6, #0]
 8006028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800602c:	4607      	mov	r7, r0
 800602e:	460c      	mov	r4, r1
 8006030:	b10a      	cbz	r2, 8006036 <_printf_common+0x26>
 8006032:	3301      	adds	r3, #1
 8006034:	6033      	str	r3, [r6, #0]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	0699      	lsls	r1, r3, #26
 800603a:	bf42      	ittt	mi
 800603c:	6833      	ldrmi	r3, [r6, #0]
 800603e:	3302      	addmi	r3, #2
 8006040:	6033      	strmi	r3, [r6, #0]
 8006042:	6825      	ldr	r5, [r4, #0]
 8006044:	f015 0506 	ands.w	r5, r5, #6
 8006048:	d106      	bne.n	8006058 <_printf_common+0x48>
 800604a:	f104 0a19 	add.w	sl, r4, #25
 800604e:	68e3      	ldr	r3, [r4, #12]
 8006050:	6832      	ldr	r2, [r6, #0]
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	42ab      	cmp	r3, r5
 8006056:	dc26      	bgt.n	80060a6 <_printf_common+0x96>
 8006058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800605c:	1e13      	subs	r3, r2, #0
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	bf18      	it	ne
 8006062:	2301      	movne	r3, #1
 8006064:	0692      	lsls	r2, r2, #26
 8006066:	d42b      	bmi.n	80060c0 <_printf_common+0xb0>
 8006068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800606c:	4649      	mov	r1, r9
 800606e:	4638      	mov	r0, r7
 8006070:	47c0      	blx	r8
 8006072:	3001      	adds	r0, #1
 8006074:	d01e      	beq.n	80060b4 <_printf_common+0xa4>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	68e5      	ldr	r5, [r4, #12]
 800607a:	6832      	ldr	r2, [r6, #0]
 800607c:	f003 0306 	and.w	r3, r3, #6
 8006080:	2b04      	cmp	r3, #4
 8006082:	bf08      	it	eq
 8006084:	1aad      	subeq	r5, r5, r2
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	bf0c      	ite	eq
 800608c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006090:	2500      	movne	r5, #0
 8006092:	4293      	cmp	r3, r2
 8006094:	bfc4      	itt	gt
 8006096:	1a9b      	subgt	r3, r3, r2
 8006098:	18ed      	addgt	r5, r5, r3
 800609a:	2600      	movs	r6, #0
 800609c:	341a      	adds	r4, #26
 800609e:	42b5      	cmp	r5, r6
 80060a0:	d11a      	bne.n	80060d8 <_printf_common+0xc8>
 80060a2:	2000      	movs	r0, #0
 80060a4:	e008      	b.n	80060b8 <_printf_common+0xa8>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4652      	mov	r2, sl
 80060aa:	4649      	mov	r1, r9
 80060ac:	4638      	mov	r0, r7
 80060ae:	47c0      	blx	r8
 80060b0:	3001      	adds	r0, #1
 80060b2:	d103      	bne.n	80060bc <_printf_common+0xac>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060bc:	3501      	adds	r5, #1
 80060be:	e7c6      	b.n	800604e <_printf_common+0x3e>
 80060c0:	18e1      	adds	r1, r4, r3
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	2030      	movs	r0, #48	; 0x30
 80060c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ca:	4422      	add	r2, r4
 80060cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060d4:	3302      	adds	r3, #2
 80060d6:	e7c7      	b.n	8006068 <_printf_common+0x58>
 80060d8:	2301      	movs	r3, #1
 80060da:	4622      	mov	r2, r4
 80060dc:	4649      	mov	r1, r9
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d0e6      	beq.n	80060b4 <_printf_common+0xa4>
 80060e6:	3601      	adds	r6, #1
 80060e8:	e7d9      	b.n	800609e <_printf_common+0x8e>
	...

080060ec <_printf_i>:
 80060ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f0:	7e0f      	ldrb	r7, [r1, #24]
 80060f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060f4:	2f78      	cmp	r7, #120	; 0x78
 80060f6:	4691      	mov	r9, r2
 80060f8:	4680      	mov	r8, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	469a      	mov	sl, r3
 80060fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006102:	d807      	bhi.n	8006114 <_printf_i+0x28>
 8006104:	2f62      	cmp	r7, #98	; 0x62
 8006106:	d80a      	bhi.n	800611e <_printf_i+0x32>
 8006108:	2f00      	cmp	r7, #0
 800610a:	f000 80d8 	beq.w	80062be <_printf_i+0x1d2>
 800610e:	2f58      	cmp	r7, #88	; 0x58
 8006110:	f000 80a3 	beq.w	800625a <_printf_i+0x16e>
 8006114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800611c:	e03a      	b.n	8006194 <_printf_i+0xa8>
 800611e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006122:	2b15      	cmp	r3, #21
 8006124:	d8f6      	bhi.n	8006114 <_printf_i+0x28>
 8006126:	a101      	add	r1, pc, #4	; (adr r1, 800612c <_printf_i+0x40>)
 8006128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800612c:	08006185 	.word	0x08006185
 8006130:	08006199 	.word	0x08006199
 8006134:	08006115 	.word	0x08006115
 8006138:	08006115 	.word	0x08006115
 800613c:	08006115 	.word	0x08006115
 8006140:	08006115 	.word	0x08006115
 8006144:	08006199 	.word	0x08006199
 8006148:	08006115 	.word	0x08006115
 800614c:	08006115 	.word	0x08006115
 8006150:	08006115 	.word	0x08006115
 8006154:	08006115 	.word	0x08006115
 8006158:	080062a5 	.word	0x080062a5
 800615c:	080061c9 	.word	0x080061c9
 8006160:	08006287 	.word	0x08006287
 8006164:	08006115 	.word	0x08006115
 8006168:	08006115 	.word	0x08006115
 800616c:	080062c7 	.word	0x080062c7
 8006170:	08006115 	.word	0x08006115
 8006174:	080061c9 	.word	0x080061c9
 8006178:	08006115 	.word	0x08006115
 800617c:	08006115 	.word	0x08006115
 8006180:	0800628f 	.word	0x0800628f
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	1d1a      	adds	r2, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	602a      	str	r2, [r5, #0]
 800618c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006194:	2301      	movs	r3, #1
 8006196:	e0a3      	b.n	80062e0 <_printf_i+0x1f4>
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	6829      	ldr	r1, [r5, #0]
 800619c:	0606      	lsls	r6, r0, #24
 800619e:	f101 0304 	add.w	r3, r1, #4
 80061a2:	d50a      	bpl.n	80061ba <_printf_i+0xce>
 80061a4:	680e      	ldr	r6, [r1, #0]
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	da03      	bge.n	80061b4 <_printf_i+0xc8>
 80061ac:	232d      	movs	r3, #45	; 0x2d
 80061ae:	4276      	negs	r6, r6
 80061b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b4:	485e      	ldr	r0, [pc, #376]	; (8006330 <_printf_i+0x244>)
 80061b6:	230a      	movs	r3, #10
 80061b8:	e019      	b.n	80061ee <_printf_i+0x102>
 80061ba:	680e      	ldr	r6, [r1, #0]
 80061bc:	602b      	str	r3, [r5, #0]
 80061be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061c2:	bf18      	it	ne
 80061c4:	b236      	sxthne	r6, r6
 80061c6:	e7ef      	b.n	80061a8 <_printf_i+0xbc>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	1d19      	adds	r1, r3, #4
 80061ce:	6029      	str	r1, [r5, #0]
 80061d0:	0601      	lsls	r1, r0, #24
 80061d2:	d501      	bpl.n	80061d8 <_printf_i+0xec>
 80061d4:	681e      	ldr	r6, [r3, #0]
 80061d6:	e002      	b.n	80061de <_printf_i+0xf2>
 80061d8:	0646      	lsls	r6, r0, #25
 80061da:	d5fb      	bpl.n	80061d4 <_printf_i+0xe8>
 80061dc:	881e      	ldrh	r6, [r3, #0]
 80061de:	4854      	ldr	r0, [pc, #336]	; (8006330 <_printf_i+0x244>)
 80061e0:	2f6f      	cmp	r7, #111	; 0x6f
 80061e2:	bf0c      	ite	eq
 80061e4:	2308      	moveq	r3, #8
 80061e6:	230a      	movne	r3, #10
 80061e8:	2100      	movs	r1, #0
 80061ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ee:	6865      	ldr	r5, [r4, #4]
 80061f0:	60a5      	str	r5, [r4, #8]
 80061f2:	2d00      	cmp	r5, #0
 80061f4:	bfa2      	ittt	ge
 80061f6:	6821      	ldrge	r1, [r4, #0]
 80061f8:	f021 0104 	bicge.w	r1, r1, #4
 80061fc:	6021      	strge	r1, [r4, #0]
 80061fe:	b90e      	cbnz	r6, 8006204 <_printf_i+0x118>
 8006200:	2d00      	cmp	r5, #0
 8006202:	d04d      	beq.n	80062a0 <_printf_i+0x1b4>
 8006204:	4615      	mov	r5, r2
 8006206:	fbb6 f1f3 	udiv	r1, r6, r3
 800620a:	fb03 6711 	mls	r7, r3, r1, r6
 800620e:	5dc7      	ldrb	r7, [r0, r7]
 8006210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006214:	4637      	mov	r7, r6
 8006216:	42bb      	cmp	r3, r7
 8006218:	460e      	mov	r6, r1
 800621a:	d9f4      	bls.n	8006206 <_printf_i+0x11a>
 800621c:	2b08      	cmp	r3, #8
 800621e:	d10b      	bne.n	8006238 <_printf_i+0x14c>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	07de      	lsls	r6, r3, #31
 8006224:	d508      	bpl.n	8006238 <_printf_i+0x14c>
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	6861      	ldr	r1, [r4, #4]
 800622a:	4299      	cmp	r1, r3
 800622c:	bfde      	ittt	le
 800622e:	2330      	movle	r3, #48	; 0x30
 8006230:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006234:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006238:	1b52      	subs	r2, r2, r5
 800623a:	6122      	str	r2, [r4, #16]
 800623c:	f8cd a000 	str.w	sl, [sp]
 8006240:	464b      	mov	r3, r9
 8006242:	aa03      	add	r2, sp, #12
 8006244:	4621      	mov	r1, r4
 8006246:	4640      	mov	r0, r8
 8006248:	f7ff fee2 	bl	8006010 <_printf_common>
 800624c:	3001      	adds	r0, #1
 800624e:	d14c      	bne.n	80062ea <_printf_i+0x1fe>
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	b004      	add	sp, #16
 8006256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625a:	4835      	ldr	r0, [pc, #212]	; (8006330 <_printf_i+0x244>)
 800625c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006260:	6829      	ldr	r1, [r5, #0]
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	f851 6b04 	ldr.w	r6, [r1], #4
 8006268:	6029      	str	r1, [r5, #0]
 800626a:	061d      	lsls	r5, r3, #24
 800626c:	d514      	bpl.n	8006298 <_printf_i+0x1ac>
 800626e:	07df      	lsls	r7, r3, #31
 8006270:	bf44      	itt	mi
 8006272:	f043 0320 	orrmi.w	r3, r3, #32
 8006276:	6023      	strmi	r3, [r4, #0]
 8006278:	b91e      	cbnz	r6, 8006282 <_printf_i+0x196>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f023 0320 	bic.w	r3, r3, #32
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	2310      	movs	r3, #16
 8006284:	e7b0      	b.n	80061e8 <_printf_i+0xfc>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f043 0320 	orr.w	r3, r3, #32
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	2378      	movs	r3, #120	; 0x78
 8006290:	4828      	ldr	r0, [pc, #160]	; (8006334 <_printf_i+0x248>)
 8006292:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006296:	e7e3      	b.n	8006260 <_printf_i+0x174>
 8006298:	0659      	lsls	r1, r3, #25
 800629a:	bf48      	it	mi
 800629c:	b2b6      	uxthmi	r6, r6
 800629e:	e7e6      	b.n	800626e <_printf_i+0x182>
 80062a0:	4615      	mov	r5, r2
 80062a2:	e7bb      	b.n	800621c <_printf_i+0x130>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	6826      	ldr	r6, [r4, #0]
 80062a8:	6961      	ldr	r1, [r4, #20]
 80062aa:	1d18      	adds	r0, r3, #4
 80062ac:	6028      	str	r0, [r5, #0]
 80062ae:	0635      	lsls	r5, r6, #24
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	d501      	bpl.n	80062b8 <_printf_i+0x1cc>
 80062b4:	6019      	str	r1, [r3, #0]
 80062b6:	e002      	b.n	80062be <_printf_i+0x1d2>
 80062b8:	0670      	lsls	r0, r6, #25
 80062ba:	d5fb      	bpl.n	80062b4 <_printf_i+0x1c8>
 80062bc:	8019      	strh	r1, [r3, #0]
 80062be:	2300      	movs	r3, #0
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	4615      	mov	r5, r2
 80062c4:	e7ba      	b.n	800623c <_printf_i+0x150>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	1d1a      	adds	r2, r3, #4
 80062ca:	602a      	str	r2, [r5, #0]
 80062cc:	681d      	ldr	r5, [r3, #0]
 80062ce:	6862      	ldr	r2, [r4, #4]
 80062d0:	2100      	movs	r1, #0
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7f9 ff8c 	bl	80001f0 <memchr>
 80062d8:	b108      	cbz	r0, 80062de <_printf_i+0x1f2>
 80062da:	1b40      	subs	r0, r0, r5
 80062dc:	6060      	str	r0, [r4, #4]
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	2300      	movs	r3, #0
 80062e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e8:	e7a8      	b.n	800623c <_printf_i+0x150>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	462a      	mov	r2, r5
 80062ee:	4649      	mov	r1, r9
 80062f0:	4640      	mov	r0, r8
 80062f2:	47d0      	blx	sl
 80062f4:	3001      	adds	r0, #1
 80062f6:	d0ab      	beq.n	8006250 <_printf_i+0x164>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	079b      	lsls	r3, r3, #30
 80062fc:	d413      	bmi.n	8006326 <_printf_i+0x23a>
 80062fe:	68e0      	ldr	r0, [r4, #12]
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	4298      	cmp	r0, r3
 8006304:	bfb8      	it	lt
 8006306:	4618      	movlt	r0, r3
 8006308:	e7a4      	b.n	8006254 <_printf_i+0x168>
 800630a:	2301      	movs	r3, #1
 800630c:	4632      	mov	r2, r6
 800630e:	4649      	mov	r1, r9
 8006310:	4640      	mov	r0, r8
 8006312:	47d0      	blx	sl
 8006314:	3001      	adds	r0, #1
 8006316:	d09b      	beq.n	8006250 <_printf_i+0x164>
 8006318:	3501      	adds	r5, #1
 800631a:	68e3      	ldr	r3, [r4, #12]
 800631c:	9903      	ldr	r1, [sp, #12]
 800631e:	1a5b      	subs	r3, r3, r1
 8006320:	42ab      	cmp	r3, r5
 8006322:	dcf2      	bgt.n	800630a <_printf_i+0x21e>
 8006324:	e7eb      	b.n	80062fe <_printf_i+0x212>
 8006326:	2500      	movs	r5, #0
 8006328:	f104 0619 	add.w	r6, r4, #25
 800632c:	e7f5      	b.n	800631a <_printf_i+0x22e>
 800632e:	bf00      	nop
 8006330:	080088c6 	.word	0x080088c6
 8006334:	080088d7 	.word	0x080088d7

08006338 <siprintf>:
 8006338:	b40e      	push	{r1, r2, r3}
 800633a:	b500      	push	{lr}
 800633c:	b09c      	sub	sp, #112	; 0x70
 800633e:	ab1d      	add	r3, sp, #116	; 0x74
 8006340:	9002      	str	r0, [sp, #8]
 8006342:	9006      	str	r0, [sp, #24]
 8006344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <siprintf+0x38>)
 800634a:	9107      	str	r1, [sp, #28]
 800634c:	9104      	str	r1, [sp, #16]
 800634e:	4909      	ldr	r1, [pc, #36]	; (8006374 <siprintf+0x3c>)
 8006350:	f853 2b04 	ldr.w	r2, [r3], #4
 8006354:	9105      	str	r1, [sp, #20]
 8006356:	6800      	ldr	r0, [r0, #0]
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	a902      	add	r1, sp, #8
 800635c:	f001 fb76 	bl	8007a4c <_svfiprintf_r>
 8006360:	9b02      	ldr	r3, [sp, #8]
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	b01c      	add	sp, #112	; 0x70
 8006368:	f85d eb04 	ldr.w	lr, [sp], #4
 800636c:	b003      	add	sp, #12
 800636e:	4770      	bx	lr
 8006370:	2000000c 	.word	0x2000000c
 8006374:	ffff0208 	.word	0xffff0208

08006378 <quorem>:
 8006378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	6903      	ldr	r3, [r0, #16]
 800637e:	690c      	ldr	r4, [r1, #16]
 8006380:	42a3      	cmp	r3, r4
 8006382:	4607      	mov	r7, r0
 8006384:	f2c0 8081 	blt.w	800648a <quorem+0x112>
 8006388:	3c01      	subs	r4, #1
 800638a:	f101 0814 	add.w	r8, r1, #20
 800638e:	f100 0514 	add.w	r5, r0, #20
 8006392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800639c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063a0:	3301      	adds	r3, #1
 80063a2:	429a      	cmp	r2, r3
 80063a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80063b0:	d331      	bcc.n	8006416 <quorem+0x9e>
 80063b2:	f04f 0e00 	mov.w	lr, #0
 80063b6:	4640      	mov	r0, r8
 80063b8:	46ac      	mov	ip, r5
 80063ba:	46f2      	mov	sl, lr
 80063bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80063c0:	b293      	uxth	r3, r2
 80063c2:	fb06 e303 	mla	r3, r6, r3, lr
 80063c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	ebaa 0303 	sub.w	r3, sl, r3
 80063d0:	f8dc a000 	ldr.w	sl, [ip]
 80063d4:	0c12      	lsrs	r2, r2, #16
 80063d6:	fa13 f38a 	uxtah	r3, r3, sl
 80063da:	fb06 e202 	mla	r2, r6, r2, lr
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063e6:	b292      	uxth	r2, r2
 80063e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80063f4:	4581      	cmp	r9, r0
 80063f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fa:	f84c 3b04 	str.w	r3, [ip], #4
 80063fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006402:	d2db      	bcs.n	80063bc <quorem+0x44>
 8006404:	f855 300b 	ldr.w	r3, [r5, fp]
 8006408:	b92b      	cbnz	r3, 8006416 <quorem+0x9e>
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	3b04      	subs	r3, #4
 800640e:	429d      	cmp	r5, r3
 8006410:	461a      	mov	r2, r3
 8006412:	d32e      	bcc.n	8006472 <quorem+0xfa>
 8006414:	613c      	str	r4, [r7, #16]
 8006416:	4638      	mov	r0, r7
 8006418:	f001 f8c4 	bl	80075a4 <__mcmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	db24      	blt.n	800646a <quorem+0xf2>
 8006420:	3601      	adds	r6, #1
 8006422:	4628      	mov	r0, r5
 8006424:	f04f 0c00 	mov.w	ip, #0
 8006428:	f858 2b04 	ldr.w	r2, [r8], #4
 800642c:	f8d0 e000 	ldr.w	lr, [r0]
 8006430:	b293      	uxth	r3, r2
 8006432:	ebac 0303 	sub.w	r3, ip, r3
 8006436:	0c12      	lsrs	r2, r2, #16
 8006438:	fa13 f38e 	uxtah	r3, r3, lr
 800643c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006444:	b29b      	uxth	r3, r3
 8006446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800644a:	45c1      	cmp	r9, r8
 800644c:	f840 3b04 	str.w	r3, [r0], #4
 8006450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006454:	d2e8      	bcs.n	8006428 <quorem+0xb0>
 8006456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800645a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800645e:	b922      	cbnz	r2, 800646a <quorem+0xf2>
 8006460:	3b04      	subs	r3, #4
 8006462:	429d      	cmp	r5, r3
 8006464:	461a      	mov	r2, r3
 8006466:	d30a      	bcc.n	800647e <quorem+0x106>
 8006468:	613c      	str	r4, [r7, #16]
 800646a:	4630      	mov	r0, r6
 800646c:	b003      	add	sp, #12
 800646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	3b04      	subs	r3, #4
 8006476:	2a00      	cmp	r2, #0
 8006478:	d1cc      	bne.n	8006414 <quorem+0x9c>
 800647a:	3c01      	subs	r4, #1
 800647c:	e7c7      	b.n	800640e <quorem+0x96>
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	3b04      	subs	r3, #4
 8006482:	2a00      	cmp	r2, #0
 8006484:	d1f0      	bne.n	8006468 <quorem+0xf0>
 8006486:	3c01      	subs	r4, #1
 8006488:	e7eb      	b.n	8006462 <quorem+0xea>
 800648a:	2000      	movs	r0, #0
 800648c:	e7ee      	b.n	800646c <quorem+0xf4>
	...

08006490 <_dtoa_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	ed2d 8b04 	vpush	{d8-d9}
 8006498:	ec57 6b10 	vmov	r6, r7, d0
 800649c:	b093      	sub	sp, #76	; 0x4c
 800649e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064a4:	9106      	str	r1, [sp, #24]
 80064a6:	ee10 aa10 	vmov	sl, s0
 80064aa:	4604      	mov	r4, r0
 80064ac:	9209      	str	r2, [sp, #36]	; 0x24
 80064ae:	930c      	str	r3, [sp, #48]	; 0x30
 80064b0:	46bb      	mov	fp, r7
 80064b2:	b975      	cbnz	r5, 80064d2 <_dtoa_r+0x42>
 80064b4:	2010      	movs	r0, #16
 80064b6:	f000 fddd 	bl	8007074 <malloc>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6260      	str	r0, [r4, #36]	; 0x24
 80064be:	b920      	cbnz	r0, 80064ca <_dtoa_r+0x3a>
 80064c0:	4ba7      	ldr	r3, [pc, #668]	; (8006760 <_dtoa_r+0x2d0>)
 80064c2:	21ea      	movs	r1, #234	; 0xea
 80064c4:	48a7      	ldr	r0, [pc, #668]	; (8006764 <_dtoa_r+0x2d4>)
 80064c6:	f001 fbd1 	bl	8007c6c <__assert_func>
 80064ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ce:	6005      	str	r5, [r0, #0]
 80064d0:	60c5      	str	r5, [r0, #12]
 80064d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	b151      	cbz	r1, 80064ee <_dtoa_r+0x5e>
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	604a      	str	r2, [r1, #4]
 80064dc:	2301      	movs	r3, #1
 80064de:	4093      	lsls	r3, r2
 80064e0:	608b      	str	r3, [r1, #8]
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fe1c 	bl	8007120 <_Bfree>
 80064e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	1e3b      	subs	r3, r7, #0
 80064f0:	bfaa      	itet	ge
 80064f2:	2300      	movge	r3, #0
 80064f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064f8:	f8c8 3000 	strge.w	r3, [r8]
 80064fc:	4b9a      	ldr	r3, [pc, #616]	; (8006768 <_dtoa_r+0x2d8>)
 80064fe:	bfbc      	itt	lt
 8006500:	2201      	movlt	r2, #1
 8006502:	f8c8 2000 	strlt.w	r2, [r8]
 8006506:	ea33 030b 	bics.w	r3, r3, fp
 800650a:	d11b      	bne.n	8006544 <_dtoa_r+0xb4>
 800650c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800650e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006518:	4333      	orrs	r3, r6
 800651a:	f000 8592 	beq.w	8007042 <_dtoa_r+0xbb2>
 800651e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006520:	b963      	cbnz	r3, 800653c <_dtoa_r+0xac>
 8006522:	4b92      	ldr	r3, [pc, #584]	; (800676c <_dtoa_r+0x2dc>)
 8006524:	e022      	b.n	800656c <_dtoa_r+0xdc>
 8006526:	4b92      	ldr	r3, [pc, #584]	; (8006770 <_dtoa_r+0x2e0>)
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	3308      	adds	r3, #8
 800652c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	9801      	ldr	r0, [sp, #4]
 8006532:	b013      	add	sp, #76	; 0x4c
 8006534:	ecbd 8b04 	vpop	{d8-d9}
 8006538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653c:	4b8b      	ldr	r3, [pc, #556]	; (800676c <_dtoa_r+0x2dc>)
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	3303      	adds	r3, #3
 8006542:	e7f3      	b.n	800652c <_dtoa_r+0x9c>
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4650      	mov	r0, sl
 800654a:	4659      	mov	r1, fp
 800654c:	f7fa fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006550:	ec4b ab19 	vmov	d9, sl, fp
 8006554:	4680      	mov	r8, r0
 8006556:	b158      	cbz	r0, 8006570 <_dtoa_r+0xe0>
 8006558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800655a:	2301      	movs	r3, #1
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 856b 	beq.w	800703c <_dtoa_r+0xbac>
 8006566:	4883      	ldr	r0, [pc, #524]	; (8006774 <_dtoa_r+0x2e4>)
 8006568:	6018      	str	r0, [r3, #0]
 800656a:	1e43      	subs	r3, r0, #1
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	e7df      	b.n	8006530 <_dtoa_r+0xa0>
 8006570:	ec4b ab10 	vmov	d0, sl, fp
 8006574:	aa10      	add	r2, sp, #64	; 0x40
 8006576:	a911      	add	r1, sp, #68	; 0x44
 8006578:	4620      	mov	r0, r4
 800657a:	f001 f8b9 	bl	80076f0 <__d2b>
 800657e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006582:	ee08 0a10 	vmov	s16, r0
 8006586:	2d00      	cmp	r5, #0
 8006588:	f000 8084 	beq.w	8006694 <_dtoa_r+0x204>
 800658c:	ee19 3a90 	vmov	r3, s19
 8006590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006594:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006598:	4656      	mov	r6, sl
 800659a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800659e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065a6:	4b74      	ldr	r3, [pc, #464]	; (8006778 <_dtoa_r+0x2e8>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	4630      	mov	r0, r6
 80065ac:	4639      	mov	r1, r7
 80065ae:	f7f9 fe73 	bl	8000298 <__aeabi_dsub>
 80065b2:	a365      	add	r3, pc, #404	; (adr r3, 8006748 <_dtoa_r+0x2b8>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7fa f826 	bl	8000608 <__aeabi_dmul>
 80065bc:	a364      	add	r3, pc, #400	; (adr r3, 8006750 <_dtoa_r+0x2c0>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7f9 fe6b 	bl	800029c <__adddf3>
 80065c6:	4606      	mov	r6, r0
 80065c8:	4628      	mov	r0, r5
 80065ca:	460f      	mov	r7, r1
 80065cc:	f7f9 ffb2 	bl	8000534 <__aeabi_i2d>
 80065d0:	a361      	add	r3, pc, #388	; (adr r3, 8006758 <_dtoa_r+0x2c8>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f7fa f817 	bl	8000608 <__aeabi_dmul>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7f9 fe5b 	bl	800029c <__adddf3>
 80065e6:	4606      	mov	r6, r0
 80065e8:	460f      	mov	r7, r1
 80065ea:	f7fa fabd 	bl	8000b68 <__aeabi_d2iz>
 80065ee:	2200      	movs	r2, #0
 80065f0:	9000      	str	r0, [sp, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7fa fa78 	bl	8000aec <__aeabi_dcmplt>
 80065fc:	b150      	cbz	r0, 8006614 <_dtoa_r+0x184>
 80065fe:	9800      	ldr	r0, [sp, #0]
 8006600:	f7f9 ff98 	bl	8000534 <__aeabi_i2d>
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	f7fa fa66 	bl	8000ad8 <__aeabi_dcmpeq>
 800660c:	b910      	cbnz	r0, 8006614 <_dtoa_r+0x184>
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	9b00      	ldr	r3, [sp, #0]
 8006616:	2b16      	cmp	r3, #22
 8006618:	d85a      	bhi.n	80066d0 <_dtoa_r+0x240>
 800661a:	9a00      	ldr	r2, [sp, #0]
 800661c:	4b57      	ldr	r3, [pc, #348]	; (800677c <_dtoa_r+0x2ec>)
 800661e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	ec51 0b19 	vmov	r0, r1, d9
 800662a:	f7fa fa5f 	bl	8000aec <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d050      	beq.n	80066d4 <_dtoa_r+0x244>
 8006632:	9b00      	ldr	r3, [sp, #0]
 8006634:	3b01      	subs	r3, #1
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	930b      	str	r3, [sp, #44]	; 0x2c
 800663c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800663e:	1b5d      	subs	r5, r3, r5
 8006640:	1e6b      	subs	r3, r5, #1
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	bf45      	ittet	mi
 8006646:	f1c5 0301 	rsbmi	r3, r5, #1
 800664a:	9304      	strmi	r3, [sp, #16]
 800664c:	2300      	movpl	r3, #0
 800664e:	2300      	movmi	r3, #0
 8006650:	bf4c      	ite	mi
 8006652:	9305      	strmi	r3, [sp, #20]
 8006654:	9304      	strpl	r3, [sp, #16]
 8006656:	9b00      	ldr	r3, [sp, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	db3d      	blt.n	80066d8 <_dtoa_r+0x248>
 800665c:	9b05      	ldr	r3, [sp, #20]
 800665e:	9a00      	ldr	r2, [sp, #0]
 8006660:	920a      	str	r2, [sp, #40]	; 0x28
 8006662:	4413      	add	r3, r2
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	2300      	movs	r3, #0
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	2b09      	cmp	r3, #9
 800666e:	f200 8089 	bhi.w	8006784 <_dtoa_r+0x2f4>
 8006672:	2b05      	cmp	r3, #5
 8006674:	bfc4      	itt	gt
 8006676:	3b04      	subgt	r3, #4
 8006678:	9306      	strgt	r3, [sp, #24]
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	f1a3 0302 	sub.w	r3, r3, #2
 8006680:	bfcc      	ite	gt
 8006682:	2500      	movgt	r5, #0
 8006684:	2501      	movle	r5, #1
 8006686:	2b03      	cmp	r3, #3
 8006688:	f200 8087 	bhi.w	800679a <_dtoa_r+0x30a>
 800668c:	e8df f003 	tbb	[pc, r3]
 8006690:	59383a2d 	.word	0x59383a2d
 8006694:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006698:	441d      	add	r5, r3
 800669a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800669e:	2b20      	cmp	r3, #32
 80066a0:	bfc1      	itttt	gt
 80066a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80066ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066b2:	bfda      	itte	le
 80066b4:	f1c3 0320 	rsble	r3, r3, #32
 80066b8:	fa06 f003 	lslle.w	r0, r6, r3
 80066bc:	4318      	orrgt	r0, r3
 80066be:	f7f9 ff29 	bl	8000514 <__aeabi_ui2d>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4606      	mov	r6, r0
 80066c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066ca:	3d01      	subs	r5, #1
 80066cc:	930e      	str	r3, [sp, #56]	; 0x38
 80066ce:	e76a      	b.n	80065a6 <_dtoa_r+0x116>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e7b2      	b.n	800663a <_dtoa_r+0x1aa>
 80066d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80066d6:	e7b1      	b.n	800663c <_dtoa_r+0x1ac>
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	9a00      	ldr	r2, [sp, #0]
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	4253      	negs	r3, r2
 80066e2:	9307      	str	r3, [sp, #28]
 80066e4:	2300      	movs	r3, #0
 80066e6:	930a      	str	r3, [sp, #40]	; 0x28
 80066e8:	e7bf      	b.n	800666a <_dtoa_r+0x1da>
 80066ea:	2300      	movs	r3, #0
 80066ec:	9308      	str	r3, [sp, #32]
 80066ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dc55      	bgt.n	80067a0 <_dtoa_r+0x310>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066fa:	461a      	mov	r2, r3
 80066fc:	9209      	str	r2, [sp, #36]	; 0x24
 80066fe:	e00c      	b.n	800671a <_dtoa_r+0x28a>
 8006700:	2301      	movs	r3, #1
 8006702:	e7f3      	b.n	80066ec <_dtoa_r+0x25c>
 8006704:	2300      	movs	r3, #0
 8006706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006708:	9308      	str	r3, [sp, #32]
 800670a:	9b00      	ldr	r3, [sp, #0]
 800670c:	4413      	add	r3, r2
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	3301      	adds	r3, #1
 8006712:	2b01      	cmp	r3, #1
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	bfb8      	it	lt
 8006718:	2301      	movlt	r3, #1
 800671a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800671c:	2200      	movs	r2, #0
 800671e:	6042      	str	r2, [r0, #4]
 8006720:	2204      	movs	r2, #4
 8006722:	f102 0614 	add.w	r6, r2, #20
 8006726:	429e      	cmp	r6, r3
 8006728:	6841      	ldr	r1, [r0, #4]
 800672a:	d93d      	bls.n	80067a8 <_dtoa_r+0x318>
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fcb7 	bl	80070a0 <_Balloc>
 8006732:	9001      	str	r0, [sp, #4]
 8006734:	2800      	cmp	r0, #0
 8006736:	d13b      	bne.n	80067b0 <_dtoa_r+0x320>
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <_dtoa_r+0x2f0>)
 800673a:	4602      	mov	r2, r0
 800673c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006740:	e6c0      	b.n	80064c4 <_dtoa_r+0x34>
 8006742:	2301      	movs	r3, #1
 8006744:	e7df      	b.n	8006706 <_dtoa_r+0x276>
 8006746:	bf00      	nop
 8006748:	636f4361 	.word	0x636f4361
 800674c:	3fd287a7 	.word	0x3fd287a7
 8006750:	8b60c8b3 	.word	0x8b60c8b3
 8006754:	3fc68a28 	.word	0x3fc68a28
 8006758:	509f79fb 	.word	0x509f79fb
 800675c:	3fd34413 	.word	0x3fd34413
 8006760:	080088f5 	.word	0x080088f5
 8006764:	0800890c 	.word	0x0800890c
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	080088f1 	.word	0x080088f1
 8006770:	080088e8 	.word	0x080088e8
 8006774:	080088c5 	.word	0x080088c5
 8006778:	3ff80000 	.word	0x3ff80000
 800677c:	08008a00 	.word	0x08008a00
 8006780:	08008967 	.word	0x08008967
 8006784:	2501      	movs	r5, #1
 8006786:	2300      	movs	r3, #0
 8006788:	9306      	str	r3, [sp, #24]
 800678a:	9508      	str	r5, [sp, #32]
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006794:	2200      	movs	r2, #0
 8006796:	2312      	movs	r3, #18
 8006798:	e7b0      	b.n	80066fc <_dtoa_r+0x26c>
 800679a:	2301      	movs	r3, #1
 800679c:	9308      	str	r3, [sp, #32]
 800679e:	e7f5      	b.n	800678c <_dtoa_r+0x2fc>
 80067a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067a6:	e7b8      	b.n	800671a <_dtoa_r+0x28a>
 80067a8:	3101      	adds	r1, #1
 80067aa:	6041      	str	r1, [r0, #4]
 80067ac:	0052      	lsls	r2, r2, #1
 80067ae:	e7b8      	b.n	8006722 <_dtoa_r+0x292>
 80067b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	2b0e      	cmp	r3, #14
 80067ba:	f200 809d 	bhi.w	80068f8 <_dtoa_r+0x468>
 80067be:	2d00      	cmp	r5, #0
 80067c0:	f000 809a 	beq.w	80068f8 <_dtoa_r+0x468>
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	dd32      	ble.n	8006830 <_dtoa_r+0x3a0>
 80067ca:	4ab7      	ldr	r2, [pc, #732]	; (8006aa8 <_dtoa_r+0x618>)
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067d8:	9b00      	ldr	r3, [sp, #0]
 80067da:	05d8      	lsls	r0, r3, #23
 80067dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067e0:	d516      	bpl.n	8006810 <_dtoa_r+0x380>
 80067e2:	4bb2      	ldr	r3, [pc, #712]	; (8006aac <_dtoa_r+0x61c>)
 80067e4:	ec51 0b19 	vmov	r0, r1, d9
 80067e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067ec:	f7fa f836 	bl	800085c <__aeabi_ddiv>
 80067f0:	f007 070f 	and.w	r7, r7, #15
 80067f4:	4682      	mov	sl, r0
 80067f6:	468b      	mov	fp, r1
 80067f8:	2503      	movs	r5, #3
 80067fa:	4eac      	ldr	r6, [pc, #688]	; (8006aac <_dtoa_r+0x61c>)
 80067fc:	b957      	cbnz	r7, 8006814 <_dtoa_r+0x384>
 80067fe:	4642      	mov	r2, r8
 8006800:	464b      	mov	r3, r9
 8006802:	4650      	mov	r0, sl
 8006804:	4659      	mov	r1, fp
 8006806:	f7fa f829 	bl	800085c <__aeabi_ddiv>
 800680a:	4682      	mov	sl, r0
 800680c:	468b      	mov	fp, r1
 800680e:	e028      	b.n	8006862 <_dtoa_r+0x3d2>
 8006810:	2502      	movs	r5, #2
 8006812:	e7f2      	b.n	80067fa <_dtoa_r+0x36a>
 8006814:	07f9      	lsls	r1, r7, #31
 8006816:	d508      	bpl.n	800682a <_dtoa_r+0x39a>
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006820:	f7f9 fef2 	bl	8000608 <__aeabi_dmul>
 8006824:	3501      	adds	r5, #1
 8006826:	4680      	mov	r8, r0
 8006828:	4689      	mov	r9, r1
 800682a:	107f      	asrs	r7, r7, #1
 800682c:	3608      	adds	r6, #8
 800682e:	e7e5      	b.n	80067fc <_dtoa_r+0x36c>
 8006830:	f000 809b 	beq.w	800696a <_dtoa_r+0x4da>
 8006834:	9b00      	ldr	r3, [sp, #0]
 8006836:	4f9d      	ldr	r7, [pc, #628]	; (8006aac <_dtoa_r+0x61c>)
 8006838:	425e      	negs	r6, r3
 800683a:	4b9b      	ldr	r3, [pc, #620]	; (8006aa8 <_dtoa_r+0x618>)
 800683c:	f006 020f 	and.w	r2, r6, #15
 8006840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	ec51 0b19 	vmov	r0, r1, d9
 800684c:	f7f9 fedc 	bl	8000608 <__aeabi_dmul>
 8006850:	1136      	asrs	r6, r6, #4
 8006852:	4682      	mov	sl, r0
 8006854:	468b      	mov	fp, r1
 8006856:	2300      	movs	r3, #0
 8006858:	2502      	movs	r5, #2
 800685a:	2e00      	cmp	r6, #0
 800685c:	d17a      	bne.n	8006954 <_dtoa_r+0x4c4>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1d3      	bne.n	800680a <_dtoa_r+0x37a>
 8006862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8082 	beq.w	800696e <_dtoa_r+0x4de>
 800686a:	4b91      	ldr	r3, [pc, #580]	; (8006ab0 <_dtoa_r+0x620>)
 800686c:	2200      	movs	r2, #0
 800686e:	4650      	mov	r0, sl
 8006870:	4659      	mov	r1, fp
 8006872:	f7fa f93b 	bl	8000aec <__aeabi_dcmplt>
 8006876:	2800      	cmp	r0, #0
 8006878:	d079      	beq.n	800696e <_dtoa_r+0x4de>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d076      	beq.n	800696e <_dtoa_r+0x4de>
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dd36      	ble.n	80068f4 <_dtoa_r+0x464>
 8006886:	9b00      	ldr	r3, [sp, #0]
 8006888:	4650      	mov	r0, sl
 800688a:	4659      	mov	r1, fp
 800688c:	1e5f      	subs	r7, r3, #1
 800688e:	2200      	movs	r2, #0
 8006890:	4b88      	ldr	r3, [pc, #544]	; (8006ab4 <_dtoa_r+0x624>)
 8006892:	f7f9 feb9 	bl	8000608 <__aeabi_dmul>
 8006896:	9e02      	ldr	r6, [sp, #8]
 8006898:	4682      	mov	sl, r0
 800689a:	468b      	mov	fp, r1
 800689c:	3501      	adds	r5, #1
 800689e:	4628      	mov	r0, r5
 80068a0:	f7f9 fe48 	bl	8000534 <__aeabi_i2d>
 80068a4:	4652      	mov	r2, sl
 80068a6:	465b      	mov	r3, fp
 80068a8:	f7f9 feae 	bl	8000608 <__aeabi_dmul>
 80068ac:	4b82      	ldr	r3, [pc, #520]	; (8006ab8 <_dtoa_r+0x628>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	f7f9 fcf4 	bl	800029c <__adddf3>
 80068b4:	46d0      	mov	r8, sl
 80068b6:	46d9      	mov	r9, fp
 80068b8:	4682      	mov	sl, r0
 80068ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d158      	bne.n	8006974 <_dtoa_r+0x4e4>
 80068c2:	4b7e      	ldr	r3, [pc, #504]	; (8006abc <_dtoa_r+0x62c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7f9 fce5 	bl	8000298 <__aeabi_dsub>
 80068ce:	4652      	mov	r2, sl
 80068d0:	465b      	mov	r3, fp
 80068d2:	4680      	mov	r8, r0
 80068d4:	4689      	mov	r9, r1
 80068d6:	f7fa f927 	bl	8000b28 <__aeabi_dcmpgt>
 80068da:	2800      	cmp	r0, #0
 80068dc:	f040 8295 	bne.w	8006e0a <_dtoa_r+0x97a>
 80068e0:	4652      	mov	r2, sl
 80068e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7fa f8ff 	bl	8000aec <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f040 8289 	bne.w	8006e06 <_dtoa_r+0x976>
 80068f4:	ec5b ab19 	vmov	sl, fp, d9
 80068f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f2c0 8148 	blt.w	8006b90 <_dtoa_r+0x700>
 8006900:	9a00      	ldr	r2, [sp, #0]
 8006902:	2a0e      	cmp	r2, #14
 8006904:	f300 8144 	bgt.w	8006b90 <_dtoa_r+0x700>
 8006908:	4b67      	ldr	r3, [pc, #412]	; (8006aa8 <_dtoa_r+0x618>)
 800690a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800690e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	f280 80d5 	bge.w	8006ac4 <_dtoa_r+0x634>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f300 80d1 	bgt.w	8006ac4 <_dtoa_r+0x634>
 8006922:	f040 826f 	bne.w	8006e04 <_dtoa_r+0x974>
 8006926:	4b65      	ldr	r3, [pc, #404]	; (8006abc <_dtoa_r+0x62c>)
 8006928:	2200      	movs	r2, #0
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7f9 fe6b 	bl	8000608 <__aeabi_dmul>
 8006932:	4652      	mov	r2, sl
 8006934:	465b      	mov	r3, fp
 8006936:	f7fa f8ed 	bl	8000b14 <__aeabi_dcmpge>
 800693a:	9e03      	ldr	r6, [sp, #12]
 800693c:	4637      	mov	r7, r6
 800693e:	2800      	cmp	r0, #0
 8006940:	f040 8245 	bne.w	8006dce <_dtoa_r+0x93e>
 8006944:	9d01      	ldr	r5, [sp, #4]
 8006946:	2331      	movs	r3, #49	; 0x31
 8006948:	f805 3b01 	strb.w	r3, [r5], #1
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	e240      	b.n	8006dd6 <_dtoa_r+0x946>
 8006954:	07f2      	lsls	r2, r6, #31
 8006956:	d505      	bpl.n	8006964 <_dtoa_r+0x4d4>
 8006958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695c:	f7f9 fe54 	bl	8000608 <__aeabi_dmul>
 8006960:	3501      	adds	r5, #1
 8006962:	2301      	movs	r3, #1
 8006964:	1076      	asrs	r6, r6, #1
 8006966:	3708      	adds	r7, #8
 8006968:	e777      	b.n	800685a <_dtoa_r+0x3ca>
 800696a:	2502      	movs	r5, #2
 800696c:	e779      	b.n	8006862 <_dtoa_r+0x3d2>
 800696e:	9f00      	ldr	r7, [sp, #0]
 8006970:	9e03      	ldr	r6, [sp, #12]
 8006972:	e794      	b.n	800689e <_dtoa_r+0x40e>
 8006974:	9901      	ldr	r1, [sp, #4]
 8006976:	4b4c      	ldr	r3, [pc, #304]	; (8006aa8 <_dtoa_r+0x618>)
 8006978:	4431      	add	r1, r6
 800697a:	910d      	str	r1, [sp, #52]	; 0x34
 800697c:	9908      	ldr	r1, [sp, #32]
 800697e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006986:	2900      	cmp	r1, #0
 8006988:	d043      	beq.n	8006a12 <_dtoa_r+0x582>
 800698a:	494d      	ldr	r1, [pc, #308]	; (8006ac0 <_dtoa_r+0x630>)
 800698c:	2000      	movs	r0, #0
 800698e:	f7f9 ff65 	bl	800085c <__aeabi_ddiv>
 8006992:	4652      	mov	r2, sl
 8006994:	465b      	mov	r3, fp
 8006996:	f7f9 fc7f 	bl	8000298 <__aeabi_dsub>
 800699a:	9d01      	ldr	r5, [sp, #4]
 800699c:	4682      	mov	sl, r0
 800699e:	468b      	mov	fp, r1
 80069a0:	4649      	mov	r1, r9
 80069a2:	4640      	mov	r0, r8
 80069a4:	f7fa f8e0 	bl	8000b68 <__aeabi_d2iz>
 80069a8:	4606      	mov	r6, r0
 80069aa:	f7f9 fdc3 	bl	8000534 <__aeabi_i2d>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7f9 fc6f 	bl	8000298 <__aeabi_dsub>
 80069ba:	3630      	adds	r6, #48	; 0x30
 80069bc:	f805 6b01 	strb.w	r6, [r5], #1
 80069c0:	4652      	mov	r2, sl
 80069c2:	465b      	mov	r3, fp
 80069c4:	4680      	mov	r8, r0
 80069c6:	4689      	mov	r9, r1
 80069c8:	f7fa f890 	bl	8000aec <__aeabi_dcmplt>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d163      	bne.n	8006a98 <_dtoa_r+0x608>
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	4936      	ldr	r1, [pc, #216]	; (8006ab0 <_dtoa_r+0x620>)
 80069d6:	2000      	movs	r0, #0
 80069d8:	f7f9 fc5e 	bl	8000298 <__aeabi_dsub>
 80069dc:	4652      	mov	r2, sl
 80069de:	465b      	mov	r3, fp
 80069e0:	f7fa f884 	bl	8000aec <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 80b5 	bne.w	8006b54 <_dtoa_r+0x6c4>
 80069ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ec:	429d      	cmp	r5, r3
 80069ee:	d081      	beq.n	80068f4 <_dtoa_r+0x464>
 80069f0:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <_dtoa_r+0x624>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	4650      	mov	r0, sl
 80069f6:	4659      	mov	r1, fp
 80069f8:	f7f9 fe06 	bl	8000608 <__aeabi_dmul>
 80069fc:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <_dtoa_r+0x624>)
 80069fe:	4682      	mov	sl, r0
 8006a00:	468b      	mov	fp, r1
 8006a02:	4640      	mov	r0, r8
 8006a04:	4649      	mov	r1, r9
 8006a06:	2200      	movs	r2, #0
 8006a08:	f7f9 fdfe 	bl	8000608 <__aeabi_dmul>
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4689      	mov	r9, r1
 8006a10:	e7c6      	b.n	80069a0 <_dtoa_r+0x510>
 8006a12:	4650      	mov	r0, sl
 8006a14:	4659      	mov	r1, fp
 8006a16:	f7f9 fdf7 	bl	8000608 <__aeabi_dmul>
 8006a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a1c:	9d01      	ldr	r5, [sp, #4]
 8006a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a20:	4682      	mov	sl, r0
 8006a22:	468b      	mov	fp, r1
 8006a24:	4649      	mov	r1, r9
 8006a26:	4640      	mov	r0, r8
 8006a28:	f7fa f89e 	bl	8000b68 <__aeabi_d2iz>
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	f7f9 fd81 	bl	8000534 <__aeabi_i2d>
 8006a32:	3630      	adds	r6, #48	; 0x30
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4640      	mov	r0, r8
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	f7f9 fc2c 	bl	8000298 <__aeabi_dsub>
 8006a40:	f805 6b01 	strb.w	r6, [r5], #1
 8006a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a46:	429d      	cmp	r5, r3
 8006a48:	4680      	mov	r8, r0
 8006a4a:	4689      	mov	r9, r1
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	d124      	bne.n	8006a9c <_dtoa_r+0x60c>
 8006a52:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <_dtoa_r+0x630>)
 8006a54:	4650      	mov	r0, sl
 8006a56:	4659      	mov	r1, fp
 8006a58:	f7f9 fc20 	bl	800029c <__adddf3>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7fa f860 	bl	8000b28 <__aeabi_dcmpgt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d173      	bne.n	8006b54 <_dtoa_r+0x6c4>
 8006a6c:	4652      	mov	r2, sl
 8006a6e:	465b      	mov	r3, fp
 8006a70:	4913      	ldr	r1, [pc, #76]	; (8006ac0 <_dtoa_r+0x630>)
 8006a72:	2000      	movs	r0, #0
 8006a74:	f7f9 fc10 	bl	8000298 <__aeabi_dsub>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4649      	mov	r1, r9
 8006a80:	f7fa f834 	bl	8000aec <__aeabi_dcmplt>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	f43f af35 	beq.w	80068f4 <_dtoa_r+0x464>
 8006a8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a8c:	1e6b      	subs	r3, r5, #1
 8006a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a94:	2b30      	cmp	r3, #48	; 0x30
 8006a96:	d0f8      	beq.n	8006a8a <_dtoa_r+0x5fa>
 8006a98:	9700      	str	r7, [sp, #0]
 8006a9a:	e049      	b.n	8006b30 <_dtoa_r+0x6a0>
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <_dtoa_r+0x624>)
 8006a9e:	f7f9 fdb3 	bl	8000608 <__aeabi_dmul>
 8006aa2:	4680      	mov	r8, r0
 8006aa4:	4689      	mov	r9, r1
 8006aa6:	e7bd      	b.n	8006a24 <_dtoa_r+0x594>
 8006aa8:	08008a00 	.word	0x08008a00
 8006aac:	080089d8 	.word	0x080089d8
 8006ab0:	3ff00000 	.word	0x3ff00000
 8006ab4:	40240000 	.word	0x40240000
 8006ab8:	401c0000 	.word	0x401c0000
 8006abc:	40140000 	.word	0x40140000
 8006ac0:	3fe00000 	.word	0x3fe00000
 8006ac4:	9d01      	ldr	r5, [sp, #4]
 8006ac6:	4656      	mov	r6, sl
 8006ac8:	465f      	mov	r7, fp
 8006aca:	4642      	mov	r2, r8
 8006acc:	464b      	mov	r3, r9
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fec3 	bl	800085c <__aeabi_ddiv>
 8006ad6:	f7fa f847 	bl	8000b68 <__aeabi_d2iz>
 8006ada:	4682      	mov	sl, r0
 8006adc:	f7f9 fd2a 	bl	8000534 <__aeabi_i2d>
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	f7f9 fd90 	bl	8000608 <__aeabi_dmul>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006af4:	f7f9 fbd0 	bl	8000298 <__aeabi_dsub>
 8006af8:	f805 6b01 	strb.w	r6, [r5], #1
 8006afc:	9e01      	ldr	r6, [sp, #4]
 8006afe:	9f03      	ldr	r7, [sp, #12]
 8006b00:	1bae      	subs	r6, r5, r6
 8006b02:	42b7      	cmp	r7, r6
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	d135      	bne.n	8006b76 <_dtoa_r+0x6e6>
 8006b0a:	f7f9 fbc7 	bl	800029c <__adddf3>
 8006b0e:	4642      	mov	r2, r8
 8006b10:	464b      	mov	r3, r9
 8006b12:	4606      	mov	r6, r0
 8006b14:	460f      	mov	r7, r1
 8006b16:	f7fa f807 	bl	8000b28 <__aeabi_dcmpgt>
 8006b1a:	b9d0      	cbnz	r0, 8006b52 <_dtoa_r+0x6c2>
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b28:	b110      	cbz	r0, 8006b30 <_dtoa_r+0x6a0>
 8006b2a:	f01a 0f01 	tst.w	sl, #1
 8006b2e:	d110      	bne.n	8006b52 <_dtoa_r+0x6c2>
 8006b30:	4620      	mov	r0, r4
 8006b32:	ee18 1a10 	vmov	r1, s16
 8006b36:	f000 faf3 	bl	8007120 <_Bfree>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9800      	ldr	r0, [sp, #0]
 8006b3e:	702b      	strb	r3, [r5, #0]
 8006b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b42:	3001      	adds	r0, #1
 8006b44:	6018      	str	r0, [r3, #0]
 8006b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f43f acf1 	beq.w	8006530 <_dtoa_r+0xa0>
 8006b4e:	601d      	str	r5, [r3, #0]
 8006b50:	e4ee      	b.n	8006530 <_dtoa_r+0xa0>
 8006b52:	9f00      	ldr	r7, [sp, #0]
 8006b54:	462b      	mov	r3, r5
 8006b56:	461d      	mov	r5, r3
 8006b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5c:	2a39      	cmp	r2, #57	; 0x39
 8006b5e:	d106      	bne.n	8006b6e <_dtoa_r+0x6de>
 8006b60:	9a01      	ldr	r2, [sp, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d1f7      	bne.n	8006b56 <_dtoa_r+0x6c6>
 8006b66:	9901      	ldr	r1, [sp, #4]
 8006b68:	2230      	movs	r2, #48	; 0x30
 8006b6a:	3701      	adds	r7, #1
 8006b6c:	700a      	strb	r2, [r1, #0]
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	3201      	adds	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	e790      	b.n	8006a98 <_dtoa_r+0x608>
 8006b76:	4ba6      	ldr	r3, [pc, #664]	; (8006e10 <_dtoa_r+0x980>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fd45 	bl	8000608 <__aeabi_dmul>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2300      	movs	r3, #0
 8006b82:	4606      	mov	r6, r0
 8006b84:	460f      	mov	r7, r1
 8006b86:	f7f9 ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d09d      	beq.n	8006aca <_dtoa_r+0x63a>
 8006b8e:	e7cf      	b.n	8006b30 <_dtoa_r+0x6a0>
 8006b90:	9a08      	ldr	r2, [sp, #32]
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	f000 80d7 	beq.w	8006d46 <_dtoa_r+0x8b6>
 8006b98:	9a06      	ldr	r2, [sp, #24]
 8006b9a:	2a01      	cmp	r2, #1
 8006b9c:	f300 80ba 	bgt.w	8006d14 <_dtoa_r+0x884>
 8006ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ba2:	2a00      	cmp	r2, #0
 8006ba4:	f000 80b2 	beq.w	8006d0c <_dtoa_r+0x87c>
 8006ba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bac:	9e07      	ldr	r6, [sp, #28]
 8006bae:	9d04      	ldr	r5, [sp, #16]
 8006bb0:	9a04      	ldr	r2, [sp, #16]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	9204      	str	r2, [sp, #16]
 8006bb6:	9a05      	ldr	r2, [sp, #20]
 8006bb8:	2101      	movs	r1, #1
 8006bba:	441a      	add	r2, r3
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	9205      	str	r2, [sp, #20]
 8006bc0:	f000 fb66 	bl	8007290 <__i2b>
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	dd0c      	ble.n	8006be4 <_dtoa_r+0x754>
 8006bca:	9b05      	ldr	r3, [sp, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dd09      	ble.n	8006be4 <_dtoa_r+0x754>
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	9a04      	ldr	r2, [sp, #16]
 8006bd4:	bfa8      	it	ge
 8006bd6:	462b      	movge	r3, r5
 8006bd8:	1ad2      	subs	r2, r2, r3
 8006bda:	9204      	str	r2, [sp, #16]
 8006bdc:	9a05      	ldr	r2, [sp, #20]
 8006bde:	1aed      	subs	r5, r5, r3
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	b31b      	cbz	r3, 8006c30 <_dtoa_r+0x7a0>
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80af 	beq.w	8006d4e <_dtoa_r+0x8be>
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	dd13      	ble.n	8006c1c <_dtoa_r+0x78c>
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fc09 	bl	8007410 <__pow5mult>
 8006bfe:	ee18 2a10 	vmov	r2, s16
 8006c02:	4601      	mov	r1, r0
 8006c04:	4607      	mov	r7, r0
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fb58 	bl	80072bc <__multiply>
 8006c0c:	ee18 1a10 	vmov	r1, s16
 8006c10:	4680      	mov	r8, r0
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fa84 	bl	8007120 <_Bfree>
 8006c18:	ee08 8a10 	vmov	s16, r8
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	1b9a      	subs	r2, r3, r6
 8006c20:	d006      	beq.n	8006c30 <_dtoa_r+0x7a0>
 8006c22:	ee18 1a10 	vmov	r1, s16
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fbf2 	bl	8007410 <__pow5mult>
 8006c2c:	ee08 0a10 	vmov	s16, r0
 8006c30:	2101      	movs	r1, #1
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fb2c 	bl	8007290 <__i2b>
 8006c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	f340 8088 	ble.w	8006d52 <_dtoa_r+0x8c2>
 8006c42:	461a      	mov	r2, r3
 8006c44:	4601      	mov	r1, r0
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 fbe2 	bl	8007410 <__pow5mult>
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	4606      	mov	r6, r0
 8006c52:	f340 8081 	ble.w	8006d58 <_dtoa_r+0x8c8>
 8006c56:	f04f 0800 	mov.w	r8, #0
 8006c5a:	6933      	ldr	r3, [r6, #16]
 8006c5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c60:	6918      	ldr	r0, [r3, #16]
 8006c62:	f000 fac5 	bl	80071f0 <__hi0bits>
 8006c66:	f1c0 0020 	rsb	r0, r0, #32
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	4418      	add	r0, r3
 8006c6e:	f010 001f 	ands.w	r0, r0, #31
 8006c72:	f000 8092 	beq.w	8006d9a <_dtoa_r+0x90a>
 8006c76:	f1c0 0320 	rsb	r3, r0, #32
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	f340 808a 	ble.w	8006d94 <_dtoa_r+0x904>
 8006c80:	f1c0 001c 	rsb	r0, r0, #28
 8006c84:	9b04      	ldr	r3, [sp, #16]
 8006c86:	4403      	add	r3, r0
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	4403      	add	r3, r0
 8006c8e:	4405      	add	r5, r0
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dd07      	ble.n	8006ca8 <_dtoa_r+0x818>
 8006c98:	ee18 1a10 	vmov	r1, s16
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 fc10 	bl	80074c4 <__lshift>
 8006ca4:	ee08 0a10 	vmov	s16, r0
 8006ca8:	9b05      	ldr	r3, [sp, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dd05      	ble.n	8006cba <_dtoa_r+0x82a>
 8006cae:	4631      	mov	r1, r6
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fc06 	bl	80074c4 <__lshift>
 8006cb8:	4606      	mov	r6, r0
 8006cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d06e      	beq.n	8006d9e <_dtoa_r+0x90e>
 8006cc0:	ee18 0a10 	vmov	r0, s16
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	f000 fc6d 	bl	80075a4 <__mcmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	da67      	bge.n	8006d9e <_dtoa_r+0x90e>
 8006cce:	9b00      	ldr	r3, [sp, #0]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	ee18 1a10 	vmov	r1, s16
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	220a      	movs	r2, #10
 8006cda:	2300      	movs	r3, #0
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 fa41 	bl	8007164 <__multadd>
 8006ce2:	9b08      	ldr	r3, [sp, #32]
 8006ce4:	ee08 0a10 	vmov	s16, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 81b1 	beq.w	8007050 <_dtoa_r+0xbc0>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fa35 	bl	8007164 <__multadd>
 8006cfa:	9b02      	ldr	r3, [sp, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	4607      	mov	r7, r0
 8006d00:	f300 808e 	bgt.w	8006e20 <_dtoa_r+0x990>
 8006d04:	9b06      	ldr	r3, [sp, #24]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	dc51      	bgt.n	8006dae <_dtoa_r+0x91e>
 8006d0a:	e089      	b.n	8006e20 <_dtoa_r+0x990>
 8006d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d12:	e74b      	b.n	8006bac <_dtoa_r+0x71c>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	1e5e      	subs	r6, r3, #1
 8006d18:	9b07      	ldr	r3, [sp, #28]
 8006d1a:	42b3      	cmp	r3, r6
 8006d1c:	bfbf      	itttt	lt
 8006d1e:	9b07      	ldrlt	r3, [sp, #28]
 8006d20:	9607      	strlt	r6, [sp, #28]
 8006d22:	1af2      	sublt	r2, r6, r3
 8006d24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d26:	bfb6      	itet	lt
 8006d28:	189b      	addlt	r3, r3, r2
 8006d2a:	1b9e      	subge	r6, r3, r6
 8006d2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	bfb8      	it	lt
 8006d32:	2600      	movlt	r6, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfb7      	itett	lt
 8006d38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d40:	1a9d      	sublt	r5, r3, r2
 8006d42:	2300      	movlt	r3, #0
 8006d44:	e734      	b.n	8006bb0 <_dtoa_r+0x720>
 8006d46:	9e07      	ldr	r6, [sp, #28]
 8006d48:	9d04      	ldr	r5, [sp, #16]
 8006d4a:	9f08      	ldr	r7, [sp, #32]
 8006d4c:	e73b      	b.n	8006bc6 <_dtoa_r+0x736>
 8006d4e:	9a07      	ldr	r2, [sp, #28]
 8006d50:	e767      	b.n	8006c22 <_dtoa_r+0x792>
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	dc18      	bgt.n	8006d8a <_dtoa_r+0x8fa>
 8006d58:	f1ba 0f00 	cmp.w	sl, #0
 8006d5c:	d115      	bne.n	8006d8a <_dtoa_r+0x8fa>
 8006d5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d62:	b993      	cbnz	r3, 8006d8a <_dtoa_r+0x8fa>
 8006d64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d68:	0d1b      	lsrs	r3, r3, #20
 8006d6a:	051b      	lsls	r3, r3, #20
 8006d6c:	b183      	cbz	r3, 8006d90 <_dtoa_r+0x900>
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	3301      	adds	r3, #1
 8006d72:	9304      	str	r3, [sp, #16]
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	3301      	adds	r3, #1
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	f04f 0801 	mov.w	r8, #1
 8006d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f47f af6a 	bne.w	8006c5a <_dtoa_r+0x7ca>
 8006d86:	2001      	movs	r0, #1
 8006d88:	e76f      	b.n	8006c6a <_dtoa_r+0x7da>
 8006d8a:	f04f 0800 	mov.w	r8, #0
 8006d8e:	e7f6      	b.n	8006d7e <_dtoa_r+0x8ee>
 8006d90:	4698      	mov	r8, r3
 8006d92:	e7f4      	b.n	8006d7e <_dtoa_r+0x8ee>
 8006d94:	f43f af7d 	beq.w	8006c92 <_dtoa_r+0x802>
 8006d98:	4618      	mov	r0, r3
 8006d9a:	301c      	adds	r0, #28
 8006d9c:	e772      	b.n	8006c84 <_dtoa_r+0x7f4>
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc37      	bgt.n	8006e14 <_dtoa_r+0x984>
 8006da4:	9b06      	ldr	r3, [sp, #24]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dd34      	ble.n	8006e14 <_dtoa_r+0x984>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	9302      	str	r3, [sp, #8]
 8006dae:	9b02      	ldr	r3, [sp, #8]
 8006db0:	b96b      	cbnz	r3, 8006dce <_dtoa_r+0x93e>
 8006db2:	4631      	mov	r1, r6
 8006db4:	2205      	movs	r2, #5
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 f9d4 	bl	8007164 <__multadd>
 8006dbc:	4601      	mov	r1, r0
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	ee18 0a10 	vmov	r0, s16
 8006dc4:	f000 fbee 	bl	80075a4 <__mcmp>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f73f adbb 	bgt.w	8006944 <_dtoa_r+0x4b4>
 8006dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd0:	9d01      	ldr	r5, [sp, #4]
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 f99f 	bl	8007120 <_Bfree>
 8006de2:	2f00      	cmp	r7, #0
 8006de4:	f43f aea4 	beq.w	8006b30 <_dtoa_r+0x6a0>
 8006de8:	f1b8 0f00 	cmp.w	r8, #0
 8006dec:	d005      	beq.n	8006dfa <_dtoa_r+0x96a>
 8006dee:	45b8      	cmp	r8, r7
 8006df0:	d003      	beq.n	8006dfa <_dtoa_r+0x96a>
 8006df2:	4641      	mov	r1, r8
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f993 	bl	8007120 <_Bfree>
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 f98f 	bl	8007120 <_Bfree>
 8006e02:	e695      	b.n	8006b30 <_dtoa_r+0x6a0>
 8006e04:	2600      	movs	r6, #0
 8006e06:	4637      	mov	r7, r6
 8006e08:	e7e1      	b.n	8006dce <_dtoa_r+0x93e>
 8006e0a:	9700      	str	r7, [sp, #0]
 8006e0c:	4637      	mov	r7, r6
 8006e0e:	e599      	b.n	8006944 <_dtoa_r+0x4b4>
 8006e10:	40240000 	.word	0x40240000
 8006e14:	9b08      	ldr	r3, [sp, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80ca 	beq.w	8006fb0 <_dtoa_r+0xb20>
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	9302      	str	r3, [sp, #8]
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	dd05      	ble.n	8006e30 <_dtoa_r+0x9a0>
 8006e24:	4639      	mov	r1, r7
 8006e26:	462a      	mov	r2, r5
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fb4b 	bl	80074c4 <__lshift>
 8006e2e:	4607      	mov	r7, r0
 8006e30:	f1b8 0f00 	cmp.w	r8, #0
 8006e34:	d05b      	beq.n	8006eee <_dtoa_r+0xa5e>
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f931 	bl	80070a0 <_Balloc>
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b928      	cbnz	r0, 8006e4e <_dtoa_r+0x9be>
 8006e42:	4b87      	ldr	r3, [pc, #540]	; (8007060 <_dtoa_r+0xbd0>)
 8006e44:	4602      	mov	r2, r0
 8006e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e4a:	f7ff bb3b 	b.w	80064c4 <_dtoa_r+0x34>
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	3202      	adds	r2, #2
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	f107 010c 	add.w	r1, r7, #12
 8006e58:	300c      	adds	r0, #12
 8006e5a:	f000 f913 	bl	8007084 <memcpy>
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4629      	mov	r1, r5
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fb2e 	bl	80074c4 <__lshift>
 8006e68:	9b01      	ldr	r3, [sp, #4]
 8006e6a:	f103 0901 	add.w	r9, r3, #1
 8006e6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	9305      	str	r3, [sp, #20]
 8006e76:	f00a 0301 	and.w	r3, sl, #1
 8006e7a:	46b8      	mov	r8, r7
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	4607      	mov	r7, r0
 8006e80:	4631      	mov	r1, r6
 8006e82:	ee18 0a10 	vmov	r0, s16
 8006e86:	f7ff fa77 	bl	8006378 <quorem>
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	9002      	str	r0, [sp, #8]
 8006e8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e92:	ee18 0a10 	vmov	r0, s16
 8006e96:	f000 fb85 	bl	80075a4 <__mcmp>
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	9003      	str	r0, [sp, #12]
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fb9b 	bl	80075dc <__mdiff>
 8006ea6:	68c2      	ldr	r2, [r0, #12]
 8006ea8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006eac:	4605      	mov	r5, r0
 8006eae:	bb02      	cbnz	r2, 8006ef2 <_dtoa_r+0xa62>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	ee18 0a10 	vmov	r0, s16
 8006eb6:	f000 fb75 	bl	80075a4 <__mcmp>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	9207      	str	r2, [sp, #28]
 8006ec2:	f000 f92d 	bl	8007120 <_Bfree>
 8006ec6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006eca:	ea43 0102 	orr.w	r1, r3, r2
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	464d      	mov	r5, r9
 8006ed4:	d10f      	bne.n	8006ef6 <_dtoa_r+0xa66>
 8006ed6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eda:	d02a      	beq.n	8006f32 <_dtoa_r+0xaa2>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd02      	ble.n	8006ee8 <_dtoa_r+0xa58>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ee8:	f88b a000 	strb.w	sl, [fp]
 8006eec:	e775      	b.n	8006dda <_dtoa_r+0x94a>
 8006eee:	4638      	mov	r0, r7
 8006ef0:	e7ba      	b.n	8006e68 <_dtoa_r+0x9d8>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	e7e2      	b.n	8006ebc <_dtoa_r+0xa2c>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	db04      	blt.n	8006f06 <_dtoa_r+0xa76>
 8006efc:	9906      	ldr	r1, [sp, #24]
 8006efe:	430b      	orrs	r3, r1
 8006f00:	9904      	ldr	r1, [sp, #16]
 8006f02:	430b      	orrs	r3, r1
 8006f04:	d122      	bne.n	8006f4c <_dtoa_r+0xabc>
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	ddee      	ble.n	8006ee8 <_dtoa_r+0xa58>
 8006f0a:	ee18 1a10 	vmov	r1, s16
 8006f0e:	2201      	movs	r2, #1
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fad7 	bl	80074c4 <__lshift>
 8006f16:	4631      	mov	r1, r6
 8006f18:	ee08 0a10 	vmov	s16, r0
 8006f1c:	f000 fb42 	bl	80075a4 <__mcmp>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	dc03      	bgt.n	8006f2c <_dtoa_r+0xa9c>
 8006f24:	d1e0      	bne.n	8006ee8 <_dtoa_r+0xa58>
 8006f26:	f01a 0f01 	tst.w	sl, #1
 8006f2a:	d0dd      	beq.n	8006ee8 <_dtoa_r+0xa58>
 8006f2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f30:	d1d7      	bne.n	8006ee2 <_dtoa_r+0xa52>
 8006f32:	2339      	movs	r3, #57	; 0x39
 8006f34:	f88b 3000 	strb.w	r3, [fp]
 8006f38:	462b      	mov	r3, r5
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f42:	2a39      	cmp	r2, #57	; 0x39
 8006f44:	d071      	beq.n	800702a <_dtoa_r+0xb9a>
 8006f46:	3201      	adds	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	e746      	b.n	8006dda <_dtoa_r+0x94a>
 8006f4c:	2a00      	cmp	r2, #0
 8006f4e:	dd07      	ble.n	8006f60 <_dtoa_r+0xad0>
 8006f50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f54:	d0ed      	beq.n	8006f32 <_dtoa_r+0xaa2>
 8006f56:	f10a 0301 	add.w	r3, sl, #1
 8006f5a:	f88b 3000 	strb.w	r3, [fp]
 8006f5e:	e73c      	b.n	8006dda <_dtoa_r+0x94a>
 8006f60:	9b05      	ldr	r3, [sp, #20]
 8006f62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f66:	4599      	cmp	r9, r3
 8006f68:	d047      	beq.n	8006ffa <_dtoa_r+0xb6a>
 8006f6a:	ee18 1a10 	vmov	r1, s16
 8006f6e:	2300      	movs	r3, #0
 8006f70:	220a      	movs	r2, #10
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 f8f6 	bl	8007164 <__multadd>
 8006f78:	45b8      	cmp	r8, r7
 8006f7a:	ee08 0a10 	vmov	s16, r0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	f04f 020a 	mov.w	r2, #10
 8006f86:	4641      	mov	r1, r8
 8006f88:	4620      	mov	r0, r4
 8006f8a:	d106      	bne.n	8006f9a <_dtoa_r+0xb0a>
 8006f8c:	f000 f8ea 	bl	8007164 <__multadd>
 8006f90:	4680      	mov	r8, r0
 8006f92:	4607      	mov	r7, r0
 8006f94:	f109 0901 	add.w	r9, r9, #1
 8006f98:	e772      	b.n	8006e80 <_dtoa_r+0x9f0>
 8006f9a:	f000 f8e3 	bl	8007164 <__multadd>
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	220a      	movs	r2, #10
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f8dc 	bl	8007164 <__multadd>
 8006fac:	4607      	mov	r7, r0
 8006fae:	e7f1      	b.n	8006f94 <_dtoa_r+0xb04>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	9302      	str	r3, [sp, #8]
 8006fb4:	9d01      	ldr	r5, [sp, #4]
 8006fb6:	ee18 0a10 	vmov	r0, s16
 8006fba:	4631      	mov	r1, r6
 8006fbc:	f7ff f9dc 	bl	8006378 <quorem>
 8006fc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	f805 ab01 	strb.w	sl, [r5], #1
 8006fca:	1aea      	subs	r2, r5, r3
 8006fcc:	9b02      	ldr	r3, [sp, #8]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	dd09      	ble.n	8006fe6 <_dtoa_r+0xb56>
 8006fd2:	ee18 1a10 	vmov	r1, s16
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	220a      	movs	r2, #10
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 f8c2 	bl	8007164 <__multadd>
 8006fe0:	ee08 0a10 	vmov	s16, r0
 8006fe4:	e7e7      	b.n	8006fb6 <_dtoa_r+0xb26>
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bfc8      	it	gt
 8006fec:	461d      	movgt	r5, r3
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	bfd8      	it	le
 8006ff2:	2501      	movle	r5, #1
 8006ff4:	441d      	add	r5, r3
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	ee18 1a10 	vmov	r1, s16
 8006ffe:	2201      	movs	r2, #1
 8007000:	4620      	mov	r0, r4
 8007002:	f000 fa5f 	bl	80074c4 <__lshift>
 8007006:	4631      	mov	r1, r6
 8007008:	ee08 0a10 	vmov	s16, r0
 800700c:	f000 faca 	bl	80075a4 <__mcmp>
 8007010:	2800      	cmp	r0, #0
 8007012:	dc91      	bgt.n	8006f38 <_dtoa_r+0xaa8>
 8007014:	d102      	bne.n	800701c <_dtoa_r+0xb8c>
 8007016:	f01a 0f01 	tst.w	sl, #1
 800701a:	d18d      	bne.n	8006f38 <_dtoa_r+0xaa8>
 800701c:	462b      	mov	r3, r5
 800701e:	461d      	mov	r5, r3
 8007020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007024:	2a30      	cmp	r2, #48	; 0x30
 8007026:	d0fa      	beq.n	800701e <_dtoa_r+0xb8e>
 8007028:	e6d7      	b.n	8006dda <_dtoa_r+0x94a>
 800702a:	9a01      	ldr	r2, [sp, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d184      	bne.n	8006f3a <_dtoa_r+0xaaa>
 8007030:	9b00      	ldr	r3, [sp, #0]
 8007032:	3301      	adds	r3, #1
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2331      	movs	r3, #49	; 0x31
 8007038:	7013      	strb	r3, [r2, #0]
 800703a:	e6ce      	b.n	8006dda <_dtoa_r+0x94a>
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <_dtoa_r+0xbd4>)
 800703e:	f7ff ba95 	b.w	800656c <_dtoa_r+0xdc>
 8007042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007044:	2b00      	cmp	r3, #0
 8007046:	f47f aa6e 	bne.w	8006526 <_dtoa_r+0x96>
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <_dtoa_r+0xbd8>)
 800704c:	f7ff ba8e 	b.w	800656c <_dtoa_r+0xdc>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dcae      	bgt.n	8006fb4 <_dtoa_r+0xb24>
 8007056:	9b06      	ldr	r3, [sp, #24]
 8007058:	2b02      	cmp	r3, #2
 800705a:	f73f aea8 	bgt.w	8006dae <_dtoa_r+0x91e>
 800705e:	e7a9      	b.n	8006fb4 <_dtoa_r+0xb24>
 8007060:	08008967 	.word	0x08008967
 8007064:	080088c4 	.word	0x080088c4
 8007068:	080088e8 	.word	0x080088e8

0800706c <_localeconv_r>:
 800706c:	4800      	ldr	r0, [pc, #0]	; (8007070 <_localeconv_r+0x4>)
 800706e:	4770      	bx	lr
 8007070:	20000160 	.word	0x20000160

08007074 <malloc>:
 8007074:	4b02      	ldr	r3, [pc, #8]	; (8007080 <malloc+0xc>)
 8007076:	4601      	mov	r1, r0
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	f000 bc17 	b.w	80078ac <_malloc_r>
 800707e:	bf00      	nop
 8007080:	2000000c 	.word	0x2000000c

08007084 <memcpy>:
 8007084:	440a      	add	r2, r1
 8007086:	4291      	cmp	r1, r2
 8007088:	f100 33ff 	add.w	r3, r0, #4294967295
 800708c:	d100      	bne.n	8007090 <memcpy+0xc>
 800708e:	4770      	bx	lr
 8007090:	b510      	push	{r4, lr}
 8007092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800709a:	4291      	cmp	r1, r2
 800709c:	d1f9      	bne.n	8007092 <memcpy+0xe>
 800709e:	bd10      	pop	{r4, pc}

080070a0 <_Balloc>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070a4:	4604      	mov	r4, r0
 80070a6:	460d      	mov	r5, r1
 80070a8:	b976      	cbnz	r6, 80070c8 <_Balloc+0x28>
 80070aa:	2010      	movs	r0, #16
 80070ac:	f7ff ffe2 	bl	8007074 <malloc>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6260      	str	r0, [r4, #36]	; 0x24
 80070b4:	b920      	cbnz	r0, 80070c0 <_Balloc+0x20>
 80070b6:	4b18      	ldr	r3, [pc, #96]	; (8007118 <_Balloc+0x78>)
 80070b8:	4818      	ldr	r0, [pc, #96]	; (800711c <_Balloc+0x7c>)
 80070ba:	2166      	movs	r1, #102	; 0x66
 80070bc:	f000 fdd6 	bl	8007c6c <__assert_func>
 80070c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070c4:	6006      	str	r6, [r0, #0]
 80070c6:	60c6      	str	r6, [r0, #12]
 80070c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070ca:	68f3      	ldr	r3, [r6, #12]
 80070cc:	b183      	cbz	r3, 80070f0 <_Balloc+0x50>
 80070ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070d6:	b9b8      	cbnz	r0, 8007108 <_Balloc+0x68>
 80070d8:	2101      	movs	r1, #1
 80070da:	fa01 f605 	lsl.w	r6, r1, r5
 80070de:	1d72      	adds	r2, r6, #5
 80070e0:	0092      	lsls	r2, r2, #2
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 fb60 	bl	80077a8 <_calloc_r>
 80070e8:	b160      	cbz	r0, 8007104 <_Balloc+0x64>
 80070ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070ee:	e00e      	b.n	800710e <_Balloc+0x6e>
 80070f0:	2221      	movs	r2, #33	; 0x21
 80070f2:	2104      	movs	r1, #4
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 fb57 	bl	80077a8 <_calloc_r>
 80070fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fc:	60f0      	str	r0, [r6, #12]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e4      	bne.n	80070ce <_Balloc+0x2e>
 8007104:	2000      	movs	r0, #0
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	6802      	ldr	r2, [r0, #0]
 800710a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800710e:	2300      	movs	r3, #0
 8007110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007114:	e7f7      	b.n	8007106 <_Balloc+0x66>
 8007116:	bf00      	nop
 8007118:	080088f5 	.word	0x080088f5
 800711c:	08008978 	.word	0x08008978

08007120 <_Bfree>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b976      	cbnz	r6, 8007148 <_Bfree+0x28>
 800712a:	2010      	movs	r0, #16
 800712c:	f7ff ffa2 	bl	8007074 <malloc>
 8007130:	4602      	mov	r2, r0
 8007132:	6268      	str	r0, [r5, #36]	; 0x24
 8007134:	b920      	cbnz	r0, 8007140 <_Bfree+0x20>
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <_Bfree+0x3c>)
 8007138:	4809      	ldr	r0, [pc, #36]	; (8007160 <_Bfree+0x40>)
 800713a:	218a      	movs	r1, #138	; 0x8a
 800713c:	f000 fd96 	bl	8007c6c <__assert_func>
 8007140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007144:	6006      	str	r6, [r0, #0]
 8007146:	60c6      	str	r6, [r0, #12]
 8007148:	b13c      	cbz	r4, 800715a <_Bfree+0x3a>
 800714a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800714c:	6862      	ldr	r2, [r4, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007154:	6021      	str	r1, [r4, #0]
 8007156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	080088f5 	.word	0x080088f5
 8007160:	08008978 	.word	0x08008978

08007164 <__multadd>:
 8007164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007168:	690d      	ldr	r5, [r1, #16]
 800716a:	4607      	mov	r7, r0
 800716c:	460c      	mov	r4, r1
 800716e:	461e      	mov	r6, r3
 8007170:	f101 0c14 	add.w	ip, r1, #20
 8007174:	2000      	movs	r0, #0
 8007176:	f8dc 3000 	ldr.w	r3, [ip]
 800717a:	b299      	uxth	r1, r3
 800717c:	fb02 6101 	mla	r1, r2, r1, r6
 8007180:	0c1e      	lsrs	r6, r3, #16
 8007182:	0c0b      	lsrs	r3, r1, #16
 8007184:	fb02 3306 	mla	r3, r2, r6, r3
 8007188:	b289      	uxth	r1, r1
 800718a:	3001      	adds	r0, #1
 800718c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007190:	4285      	cmp	r5, r0
 8007192:	f84c 1b04 	str.w	r1, [ip], #4
 8007196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800719a:	dcec      	bgt.n	8007176 <__multadd+0x12>
 800719c:	b30e      	cbz	r6, 80071e2 <__multadd+0x7e>
 800719e:	68a3      	ldr	r3, [r4, #8]
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dc19      	bgt.n	80071d8 <__multadd+0x74>
 80071a4:	6861      	ldr	r1, [r4, #4]
 80071a6:	4638      	mov	r0, r7
 80071a8:	3101      	adds	r1, #1
 80071aa:	f7ff ff79 	bl	80070a0 <_Balloc>
 80071ae:	4680      	mov	r8, r0
 80071b0:	b928      	cbnz	r0, 80071be <__multadd+0x5a>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <__multadd+0x84>)
 80071b6:	480d      	ldr	r0, [pc, #52]	; (80071ec <__multadd+0x88>)
 80071b8:	21b5      	movs	r1, #181	; 0xb5
 80071ba:	f000 fd57 	bl	8007c6c <__assert_func>
 80071be:	6922      	ldr	r2, [r4, #16]
 80071c0:	3202      	adds	r2, #2
 80071c2:	f104 010c 	add.w	r1, r4, #12
 80071c6:	0092      	lsls	r2, r2, #2
 80071c8:	300c      	adds	r0, #12
 80071ca:	f7ff ff5b 	bl	8007084 <memcpy>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7ff ffa5 	bl	8007120 <_Bfree>
 80071d6:	4644      	mov	r4, r8
 80071d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071dc:	3501      	adds	r5, #1
 80071de:	615e      	str	r6, [r3, #20]
 80071e0:	6125      	str	r5, [r4, #16]
 80071e2:	4620      	mov	r0, r4
 80071e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e8:	08008967 	.word	0x08008967
 80071ec:	08008978 	.word	0x08008978

080071f0 <__hi0bits>:
 80071f0:	0c03      	lsrs	r3, r0, #16
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	b9d3      	cbnz	r3, 800722c <__hi0bits+0x3c>
 80071f6:	0400      	lsls	r0, r0, #16
 80071f8:	2310      	movs	r3, #16
 80071fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071fe:	bf04      	itt	eq
 8007200:	0200      	lsleq	r0, r0, #8
 8007202:	3308      	addeq	r3, #8
 8007204:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007208:	bf04      	itt	eq
 800720a:	0100      	lsleq	r0, r0, #4
 800720c:	3304      	addeq	r3, #4
 800720e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007212:	bf04      	itt	eq
 8007214:	0080      	lsleq	r0, r0, #2
 8007216:	3302      	addeq	r3, #2
 8007218:	2800      	cmp	r0, #0
 800721a:	db05      	blt.n	8007228 <__hi0bits+0x38>
 800721c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007220:	f103 0301 	add.w	r3, r3, #1
 8007224:	bf08      	it	eq
 8007226:	2320      	moveq	r3, #32
 8007228:	4618      	mov	r0, r3
 800722a:	4770      	bx	lr
 800722c:	2300      	movs	r3, #0
 800722e:	e7e4      	b.n	80071fa <__hi0bits+0xa>

08007230 <__lo0bits>:
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	f013 0207 	ands.w	r2, r3, #7
 8007236:	4601      	mov	r1, r0
 8007238:	d00b      	beq.n	8007252 <__lo0bits+0x22>
 800723a:	07da      	lsls	r2, r3, #31
 800723c:	d423      	bmi.n	8007286 <__lo0bits+0x56>
 800723e:	0798      	lsls	r0, r3, #30
 8007240:	bf49      	itett	mi
 8007242:	085b      	lsrmi	r3, r3, #1
 8007244:	089b      	lsrpl	r3, r3, #2
 8007246:	2001      	movmi	r0, #1
 8007248:	600b      	strmi	r3, [r1, #0]
 800724a:	bf5c      	itt	pl
 800724c:	600b      	strpl	r3, [r1, #0]
 800724e:	2002      	movpl	r0, #2
 8007250:	4770      	bx	lr
 8007252:	b298      	uxth	r0, r3
 8007254:	b9a8      	cbnz	r0, 8007282 <__lo0bits+0x52>
 8007256:	0c1b      	lsrs	r3, r3, #16
 8007258:	2010      	movs	r0, #16
 800725a:	b2da      	uxtb	r2, r3
 800725c:	b90a      	cbnz	r2, 8007262 <__lo0bits+0x32>
 800725e:	3008      	adds	r0, #8
 8007260:	0a1b      	lsrs	r3, r3, #8
 8007262:	071a      	lsls	r2, r3, #28
 8007264:	bf04      	itt	eq
 8007266:	091b      	lsreq	r3, r3, #4
 8007268:	3004      	addeq	r0, #4
 800726a:	079a      	lsls	r2, r3, #30
 800726c:	bf04      	itt	eq
 800726e:	089b      	lsreq	r3, r3, #2
 8007270:	3002      	addeq	r0, #2
 8007272:	07da      	lsls	r2, r3, #31
 8007274:	d403      	bmi.n	800727e <__lo0bits+0x4e>
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	f100 0001 	add.w	r0, r0, #1
 800727c:	d005      	beq.n	800728a <__lo0bits+0x5a>
 800727e:	600b      	str	r3, [r1, #0]
 8007280:	4770      	bx	lr
 8007282:	4610      	mov	r0, r2
 8007284:	e7e9      	b.n	800725a <__lo0bits+0x2a>
 8007286:	2000      	movs	r0, #0
 8007288:	4770      	bx	lr
 800728a:	2020      	movs	r0, #32
 800728c:	4770      	bx	lr
	...

08007290 <__i2b>:
 8007290:	b510      	push	{r4, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	2101      	movs	r1, #1
 8007296:	f7ff ff03 	bl	80070a0 <_Balloc>
 800729a:	4602      	mov	r2, r0
 800729c:	b928      	cbnz	r0, 80072aa <__i2b+0x1a>
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <__i2b+0x24>)
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <__i2b+0x28>)
 80072a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072a6:	f000 fce1 	bl	8007c6c <__assert_func>
 80072aa:	2301      	movs	r3, #1
 80072ac:	6144      	str	r4, [r0, #20]
 80072ae:	6103      	str	r3, [r0, #16]
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	08008967 	.word	0x08008967
 80072b8:	08008978 	.word	0x08008978

080072bc <__multiply>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	4691      	mov	r9, r2
 80072c2:	690a      	ldr	r2, [r1, #16]
 80072c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	bfb8      	it	lt
 80072cc:	460b      	movlt	r3, r1
 80072ce:	460c      	mov	r4, r1
 80072d0:	bfbc      	itt	lt
 80072d2:	464c      	movlt	r4, r9
 80072d4:	4699      	movlt	r9, r3
 80072d6:	6927      	ldr	r7, [r4, #16]
 80072d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072dc:	68a3      	ldr	r3, [r4, #8]
 80072de:	6861      	ldr	r1, [r4, #4]
 80072e0:	eb07 060a 	add.w	r6, r7, sl
 80072e4:	42b3      	cmp	r3, r6
 80072e6:	b085      	sub	sp, #20
 80072e8:	bfb8      	it	lt
 80072ea:	3101      	addlt	r1, #1
 80072ec:	f7ff fed8 	bl	80070a0 <_Balloc>
 80072f0:	b930      	cbnz	r0, 8007300 <__multiply+0x44>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b44      	ldr	r3, [pc, #272]	; (8007408 <__multiply+0x14c>)
 80072f6:	4845      	ldr	r0, [pc, #276]	; (800740c <__multiply+0x150>)
 80072f8:	f240 115d 	movw	r1, #349	; 0x15d
 80072fc:	f000 fcb6 	bl	8007c6c <__assert_func>
 8007300:	f100 0514 	add.w	r5, r0, #20
 8007304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007308:	462b      	mov	r3, r5
 800730a:	2200      	movs	r2, #0
 800730c:	4543      	cmp	r3, r8
 800730e:	d321      	bcc.n	8007354 <__multiply+0x98>
 8007310:	f104 0314 	add.w	r3, r4, #20
 8007314:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007318:	f109 0314 	add.w	r3, r9, #20
 800731c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007320:	9202      	str	r2, [sp, #8]
 8007322:	1b3a      	subs	r2, r7, r4
 8007324:	3a15      	subs	r2, #21
 8007326:	f022 0203 	bic.w	r2, r2, #3
 800732a:	3204      	adds	r2, #4
 800732c:	f104 0115 	add.w	r1, r4, #21
 8007330:	428f      	cmp	r7, r1
 8007332:	bf38      	it	cc
 8007334:	2204      	movcc	r2, #4
 8007336:	9201      	str	r2, [sp, #4]
 8007338:	9a02      	ldr	r2, [sp, #8]
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	429a      	cmp	r2, r3
 800733e:	d80c      	bhi.n	800735a <__multiply+0x9e>
 8007340:	2e00      	cmp	r6, #0
 8007342:	dd03      	ble.n	800734c <__multiply+0x90>
 8007344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007348:	2b00      	cmp	r3, #0
 800734a:	d05a      	beq.n	8007402 <__multiply+0x146>
 800734c:	6106      	str	r6, [r0, #16]
 800734e:	b005      	add	sp, #20
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	f843 2b04 	str.w	r2, [r3], #4
 8007358:	e7d8      	b.n	800730c <__multiply+0x50>
 800735a:	f8b3 a000 	ldrh.w	sl, [r3]
 800735e:	f1ba 0f00 	cmp.w	sl, #0
 8007362:	d024      	beq.n	80073ae <__multiply+0xf2>
 8007364:	f104 0e14 	add.w	lr, r4, #20
 8007368:	46a9      	mov	r9, r5
 800736a:	f04f 0c00 	mov.w	ip, #0
 800736e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007372:	f8d9 1000 	ldr.w	r1, [r9]
 8007376:	fa1f fb82 	uxth.w	fp, r2
 800737a:	b289      	uxth	r1, r1
 800737c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007380:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007384:	f8d9 2000 	ldr.w	r2, [r9]
 8007388:	4461      	add	r1, ip
 800738a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800738e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007392:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007396:	b289      	uxth	r1, r1
 8007398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800739c:	4577      	cmp	r7, lr
 800739e:	f849 1b04 	str.w	r1, [r9], #4
 80073a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073a6:	d8e2      	bhi.n	800736e <__multiply+0xb2>
 80073a8:	9a01      	ldr	r2, [sp, #4]
 80073aa:	f845 c002 	str.w	ip, [r5, r2]
 80073ae:	9a03      	ldr	r2, [sp, #12]
 80073b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073b4:	3304      	adds	r3, #4
 80073b6:	f1b9 0f00 	cmp.w	r9, #0
 80073ba:	d020      	beq.n	80073fe <__multiply+0x142>
 80073bc:	6829      	ldr	r1, [r5, #0]
 80073be:	f104 0c14 	add.w	ip, r4, #20
 80073c2:	46ae      	mov	lr, r5
 80073c4:	f04f 0a00 	mov.w	sl, #0
 80073c8:	f8bc b000 	ldrh.w	fp, [ip]
 80073cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073d0:	fb09 220b 	mla	r2, r9, fp, r2
 80073d4:	4492      	add	sl, r2
 80073d6:	b289      	uxth	r1, r1
 80073d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073dc:	f84e 1b04 	str.w	r1, [lr], #4
 80073e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073e4:	f8be 1000 	ldrh.w	r1, [lr]
 80073e8:	0c12      	lsrs	r2, r2, #16
 80073ea:	fb09 1102 	mla	r1, r9, r2, r1
 80073ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073f2:	4567      	cmp	r7, ip
 80073f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073f8:	d8e6      	bhi.n	80073c8 <__multiply+0x10c>
 80073fa:	9a01      	ldr	r2, [sp, #4]
 80073fc:	50a9      	str	r1, [r5, r2]
 80073fe:	3504      	adds	r5, #4
 8007400:	e79a      	b.n	8007338 <__multiply+0x7c>
 8007402:	3e01      	subs	r6, #1
 8007404:	e79c      	b.n	8007340 <__multiply+0x84>
 8007406:	bf00      	nop
 8007408:	08008967 	.word	0x08008967
 800740c:	08008978 	.word	0x08008978

08007410 <__pow5mult>:
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	4615      	mov	r5, r2
 8007416:	f012 0203 	ands.w	r2, r2, #3
 800741a:	4606      	mov	r6, r0
 800741c:	460f      	mov	r7, r1
 800741e:	d007      	beq.n	8007430 <__pow5mult+0x20>
 8007420:	4c25      	ldr	r4, [pc, #148]	; (80074b8 <__pow5mult+0xa8>)
 8007422:	3a01      	subs	r2, #1
 8007424:	2300      	movs	r3, #0
 8007426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800742a:	f7ff fe9b 	bl	8007164 <__multadd>
 800742e:	4607      	mov	r7, r0
 8007430:	10ad      	asrs	r5, r5, #2
 8007432:	d03d      	beq.n	80074b0 <__pow5mult+0xa0>
 8007434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007436:	b97c      	cbnz	r4, 8007458 <__pow5mult+0x48>
 8007438:	2010      	movs	r0, #16
 800743a:	f7ff fe1b 	bl	8007074 <malloc>
 800743e:	4602      	mov	r2, r0
 8007440:	6270      	str	r0, [r6, #36]	; 0x24
 8007442:	b928      	cbnz	r0, 8007450 <__pow5mult+0x40>
 8007444:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <__pow5mult+0xac>)
 8007446:	481e      	ldr	r0, [pc, #120]	; (80074c0 <__pow5mult+0xb0>)
 8007448:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800744c:	f000 fc0e 	bl	8007c6c <__assert_func>
 8007450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007454:	6004      	str	r4, [r0, #0]
 8007456:	60c4      	str	r4, [r0, #12]
 8007458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800745c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007460:	b94c      	cbnz	r4, 8007476 <__pow5mult+0x66>
 8007462:	f240 2171 	movw	r1, #625	; 0x271
 8007466:	4630      	mov	r0, r6
 8007468:	f7ff ff12 	bl	8007290 <__i2b>
 800746c:	2300      	movs	r3, #0
 800746e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007472:	4604      	mov	r4, r0
 8007474:	6003      	str	r3, [r0, #0]
 8007476:	f04f 0900 	mov.w	r9, #0
 800747a:	07eb      	lsls	r3, r5, #31
 800747c:	d50a      	bpl.n	8007494 <__pow5mult+0x84>
 800747e:	4639      	mov	r1, r7
 8007480:	4622      	mov	r2, r4
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ff1a 	bl	80072bc <__multiply>
 8007488:	4639      	mov	r1, r7
 800748a:	4680      	mov	r8, r0
 800748c:	4630      	mov	r0, r6
 800748e:	f7ff fe47 	bl	8007120 <_Bfree>
 8007492:	4647      	mov	r7, r8
 8007494:	106d      	asrs	r5, r5, #1
 8007496:	d00b      	beq.n	80074b0 <__pow5mult+0xa0>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	b938      	cbnz	r0, 80074ac <__pow5mult+0x9c>
 800749c:	4622      	mov	r2, r4
 800749e:	4621      	mov	r1, r4
 80074a0:	4630      	mov	r0, r6
 80074a2:	f7ff ff0b 	bl	80072bc <__multiply>
 80074a6:	6020      	str	r0, [r4, #0]
 80074a8:	f8c0 9000 	str.w	r9, [r0]
 80074ac:	4604      	mov	r4, r0
 80074ae:	e7e4      	b.n	800747a <__pow5mult+0x6a>
 80074b0:	4638      	mov	r0, r7
 80074b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b6:	bf00      	nop
 80074b8:	08008ac8 	.word	0x08008ac8
 80074bc:	080088f5 	.word	0x080088f5
 80074c0:	08008978 	.word	0x08008978

080074c4 <__lshift>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	6849      	ldr	r1, [r1, #4]
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074d2:	68a3      	ldr	r3, [r4, #8]
 80074d4:	4607      	mov	r7, r0
 80074d6:	4691      	mov	r9, r2
 80074d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074dc:	f108 0601 	add.w	r6, r8, #1
 80074e0:	42b3      	cmp	r3, r6
 80074e2:	db0b      	blt.n	80074fc <__lshift+0x38>
 80074e4:	4638      	mov	r0, r7
 80074e6:	f7ff fddb 	bl	80070a0 <_Balloc>
 80074ea:	4605      	mov	r5, r0
 80074ec:	b948      	cbnz	r0, 8007502 <__lshift+0x3e>
 80074ee:	4602      	mov	r2, r0
 80074f0:	4b2a      	ldr	r3, [pc, #168]	; (800759c <__lshift+0xd8>)
 80074f2:	482b      	ldr	r0, [pc, #172]	; (80075a0 <__lshift+0xdc>)
 80074f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074f8:	f000 fbb8 	bl	8007c6c <__assert_func>
 80074fc:	3101      	adds	r1, #1
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	e7ee      	b.n	80074e0 <__lshift+0x1c>
 8007502:	2300      	movs	r3, #0
 8007504:	f100 0114 	add.w	r1, r0, #20
 8007508:	f100 0210 	add.w	r2, r0, #16
 800750c:	4618      	mov	r0, r3
 800750e:	4553      	cmp	r3, sl
 8007510:	db37      	blt.n	8007582 <__lshift+0xbe>
 8007512:	6920      	ldr	r0, [r4, #16]
 8007514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007518:	f104 0314 	add.w	r3, r4, #20
 800751c:	f019 091f 	ands.w	r9, r9, #31
 8007520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007524:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007528:	d02f      	beq.n	800758a <__lshift+0xc6>
 800752a:	f1c9 0e20 	rsb	lr, r9, #32
 800752e:	468a      	mov	sl, r1
 8007530:	f04f 0c00 	mov.w	ip, #0
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	fa02 f209 	lsl.w	r2, r2, r9
 800753a:	ea42 020c 	orr.w	r2, r2, ip
 800753e:	f84a 2b04 	str.w	r2, [sl], #4
 8007542:	f853 2b04 	ldr.w	r2, [r3], #4
 8007546:	4298      	cmp	r0, r3
 8007548:	fa22 fc0e 	lsr.w	ip, r2, lr
 800754c:	d8f2      	bhi.n	8007534 <__lshift+0x70>
 800754e:	1b03      	subs	r3, r0, r4
 8007550:	3b15      	subs	r3, #21
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	3304      	adds	r3, #4
 8007558:	f104 0215 	add.w	r2, r4, #21
 800755c:	4290      	cmp	r0, r2
 800755e:	bf38      	it	cc
 8007560:	2304      	movcc	r3, #4
 8007562:	f841 c003 	str.w	ip, [r1, r3]
 8007566:	f1bc 0f00 	cmp.w	ip, #0
 800756a:	d001      	beq.n	8007570 <__lshift+0xac>
 800756c:	f108 0602 	add.w	r6, r8, #2
 8007570:	3e01      	subs	r6, #1
 8007572:	4638      	mov	r0, r7
 8007574:	612e      	str	r6, [r5, #16]
 8007576:	4621      	mov	r1, r4
 8007578:	f7ff fdd2 	bl	8007120 <_Bfree>
 800757c:	4628      	mov	r0, r5
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	f842 0f04 	str.w	r0, [r2, #4]!
 8007586:	3301      	adds	r3, #1
 8007588:	e7c1      	b.n	800750e <__lshift+0x4a>
 800758a:	3904      	subs	r1, #4
 800758c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007590:	f841 2f04 	str.w	r2, [r1, #4]!
 8007594:	4298      	cmp	r0, r3
 8007596:	d8f9      	bhi.n	800758c <__lshift+0xc8>
 8007598:	e7ea      	b.n	8007570 <__lshift+0xac>
 800759a:	bf00      	nop
 800759c:	08008967 	.word	0x08008967
 80075a0:	08008978 	.word	0x08008978

080075a4 <__mcmp>:
 80075a4:	b530      	push	{r4, r5, lr}
 80075a6:	6902      	ldr	r2, [r0, #16]
 80075a8:	690c      	ldr	r4, [r1, #16]
 80075aa:	1b12      	subs	r2, r2, r4
 80075ac:	d10e      	bne.n	80075cc <__mcmp+0x28>
 80075ae:	f100 0314 	add.w	r3, r0, #20
 80075b2:	3114      	adds	r1, #20
 80075b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075c4:	42a5      	cmp	r5, r4
 80075c6:	d003      	beq.n	80075d0 <__mcmp+0x2c>
 80075c8:	d305      	bcc.n	80075d6 <__mcmp+0x32>
 80075ca:	2201      	movs	r2, #1
 80075cc:	4610      	mov	r0, r2
 80075ce:	bd30      	pop	{r4, r5, pc}
 80075d0:	4283      	cmp	r3, r0
 80075d2:	d3f3      	bcc.n	80075bc <__mcmp+0x18>
 80075d4:	e7fa      	b.n	80075cc <__mcmp+0x28>
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	e7f7      	b.n	80075cc <__mcmp+0x28>

080075dc <__mdiff>:
 80075dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	460c      	mov	r4, r1
 80075e2:	4606      	mov	r6, r0
 80075e4:	4611      	mov	r1, r2
 80075e6:	4620      	mov	r0, r4
 80075e8:	4690      	mov	r8, r2
 80075ea:	f7ff ffdb 	bl	80075a4 <__mcmp>
 80075ee:	1e05      	subs	r5, r0, #0
 80075f0:	d110      	bne.n	8007614 <__mdiff+0x38>
 80075f2:	4629      	mov	r1, r5
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff fd53 	bl	80070a0 <_Balloc>
 80075fa:	b930      	cbnz	r0, 800760a <__mdiff+0x2e>
 80075fc:	4b3a      	ldr	r3, [pc, #232]	; (80076e8 <__mdiff+0x10c>)
 80075fe:	4602      	mov	r2, r0
 8007600:	f240 2132 	movw	r1, #562	; 0x232
 8007604:	4839      	ldr	r0, [pc, #228]	; (80076ec <__mdiff+0x110>)
 8007606:	f000 fb31 	bl	8007c6c <__assert_func>
 800760a:	2301      	movs	r3, #1
 800760c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	bfa4      	itt	ge
 8007616:	4643      	movge	r3, r8
 8007618:	46a0      	movge	r8, r4
 800761a:	4630      	mov	r0, r6
 800761c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007620:	bfa6      	itte	ge
 8007622:	461c      	movge	r4, r3
 8007624:	2500      	movge	r5, #0
 8007626:	2501      	movlt	r5, #1
 8007628:	f7ff fd3a 	bl	80070a0 <_Balloc>
 800762c:	b920      	cbnz	r0, 8007638 <__mdiff+0x5c>
 800762e:	4b2e      	ldr	r3, [pc, #184]	; (80076e8 <__mdiff+0x10c>)
 8007630:	4602      	mov	r2, r0
 8007632:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007636:	e7e5      	b.n	8007604 <__mdiff+0x28>
 8007638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800763c:	6926      	ldr	r6, [r4, #16]
 800763e:	60c5      	str	r5, [r0, #12]
 8007640:	f104 0914 	add.w	r9, r4, #20
 8007644:	f108 0514 	add.w	r5, r8, #20
 8007648:	f100 0e14 	add.w	lr, r0, #20
 800764c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007654:	f108 0210 	add.w	r2, r8, #16
 8007658:	46f2      	mov	sl, lr
 800765a:	2100      	movs	r1, #0
 800765c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007664:	fa1f f883 	uxth.w	r8, r3
 8007668:	fa11 f18b 	uxtah	r1, r1, fp
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	eba1 0808 	sub.w	r8, r1, r8
 8007672:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007676:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800767a:	fa1f f888 	uxth.w	r8, r8
 800767e:	1419      	asrs	r1, r3, #16
 8007680:	454e      	cmp	r6, r9
 8007682:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007686:	f84a 3b04 	str.w	r3, [sl], #4
 800768a:	d8e7      	bhi.n	800765c <__mdiff+0x80>
 800768c:	1b33      	subs	r3, r6, r4
 800768e:	3b15      	subs	r3, #21
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	3304      	adds	r3, #4
 8007696:	3415      	adds	r4, #21
 8007698:	42a6      	cmp	r6, r4
 800769a:	bf38      	it	cc
 800769c:	2304      	movcc	r3, #4
 800769e:	441d      	add	r5, r3
 80076a0:	4473      	add	r3, lr
 80076a2:	469e      	mov	lr, r3
 80076a4:	462e      	mov	r6, r5
 80076a6:	4566      	cmp	r6, ip
 80076a8:	d30e      	bcc.n	80076c8 <__mdiff+0xec>
 80076aa:	f10c 0203 	add.w	r2, ip, #3
 80076ae:	1b52      	subs	r2, r2, r5
 80076b0:	f022 0203 	bic.w	r2, r2, #3
 80076b4:	3d03      	subs	r5, #3
 80076b6:	45ac      	cmp	ip, r5
 80076b8:	bf38      	it	cc
 80076ba:	2200      	movcc	r2, #0
 80076bc:	441a      	add	r2, r3
 80076be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076c2:	b17b      	cbz	r3, 80076e4 <__mdiff+0x108>
 80076c4:	6107      	str	r7, [r0, #16]
 80076c6:	e7a3      	b.n	8007610 <__mdiff+0x34>
 80076c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80076cc:	fa11 f288 	uxtah	r2, r1, r8
 80076d0:	1414      	asrs	r4, r2, #16
 80076d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076d6:	b292      	uxth	r2, r2
 80076d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076dc:	f84e 2b04 	str.w	r2, [lr], #4
 80076e0:	1421      	asrs	r1, r4, #16
 80076e2:	e7e0      	b.n	80076a6 <__mdiff+0xca>
 80076e4:	3f01      	subs	r7, #1
 80076e6:	e7ea      	b.n	80076be <__mdiff+0xe2>
 80076e8:	08008967 	.word	0x08008967
 80076ec:	08008978 	.word	0x08008978

080076f0 <__d2b>:
 80076f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	4689      	mov	r9, r1
 80076f6:	2101      	movs	r1, #1
 80076f8:	ec57 6b10 	vmov	r6, r7, d0
 80076fc:	4690      	mov	r8, r2
 80076fe:	f7ff fccf 	bl	80070a0 <_Balloc>
 8007702:	4604      	mov	r4, r0
 8007704:	b930      	cbnz	r0, 8007714 <__d2b+0x24>
 8007706:	4602      	mov	r2, r0
 8007708:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <__d2b+0xb0>)
 800770a:	4826      	ldr	r0, [pc, #152]	; (80077a4 <__d2b+0xb4>)
 800770c:	f240 310a 	movw	r1, #778	; 0x30a
 8007710:	f000 faac 	bl	8007c6c <__assert_func>
 8007714:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800771c:	bb35      	cbnz	r5, 800776c <__d2b+0x7c>
 800771e:	2e00      	cmp	r6, #0
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	d028      	beq.n	8007776 <__d2b+0x86>
 8007724:	4668      	mov	r0, sp
 8007726:	9600      	str	r6, [sp, #0]
 8007728:	f7ff fd82 	bl	8007230 <__lo0bits>
 800772c:	9900      	ldr	r1, [sp, #0]
 800772e:	b300      	cbz	r0, 8007772 <__d2b+0x82>
 8007730:	9a01      	ldr	r2, [sp, #4]
 8007732:	f1c0 0320 	rsb	r3, r0, #32
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	430b      	orrs	r3, r1
 800773c:	40c2      	lsrs	r2, r0
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	9201      	str	r2, [sp, #4]
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	61a3      	str	r3, [r4, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	bf14      	ite	ne
 800774a:	2202      	movne	r2, #2
 800774c:	2201      	moveq	r2, #1
 800774e:	6122      	str	r2, [r4, #16]
 8007750:	b1d5      	cbz	r5, 8007788 <__d2b+0x98>
 8007752:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007756:	4405      	add	r5, r0
 8007758:	f8c9 5000 	str.w	r5, [r9]
 800775c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007760:	f8c8 0000 	str.w	r0, [r8]
 8007764:	4620      	mov	r0, r4
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800776c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007770:	e7d5      	b.n	800771e <__d2b+0x2e>
 8007772:	6161      	str	r1, [r4, #20]
 8007774:	e7e5      	b.n	8007742 <__d2b+0x52>
 8007776:	a801      	add	r0, sp, #4
 8007778:	f7ff fd5a 	bl	8007230 <__lo0bits>
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	6163      	str	r3, [r4, #20]
 8007780:	2201      	movs	r2, #1
 8007782:	6122      	str	r2, [r4, #16]
 8007784:	3020      	adds	r0, #32
 8007786:	e7e3      	b.n	8007750 <__d2b+0x60>
 8007788:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800778c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007790:	f8c9 0000 	str.w	r0, [r9]
 8007794:	6918      	ldr	r0, [r3, #16]
 8007796:	f7ff fd2b 	bl	80071f0 <__hi0bits>
 800779a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800779e:	e7df      	b.n	8007760 <__d2b+0x70>
 80077a0:	08008967 	.word	0x08008967
 80077a4:	08008978 	.word	0x08008978

080077a8 <_calloc_r>:
 80077a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077aa:	fba1 2402 	umull	r2, r4, r1, r2
 80077ae:	b94c      	cbnz	r4, 80077c4 <_calloc_r+0x1c>
 80077b0:	4611      	mov	r1, r2
 80077b2:	9201      	str	r2, [sp, #4]
 80077b4:	f000 f87a 	bl	80078ac <_malloc_r>
 80077b8:	9a01      	ldr	r2, [sp, #4]
 80077ba:	4605      	mov	r5, r0
 80077bc:	b930      	cbnz	r0, 80077cc <_calloc_r+0x24>
 80077be:	4628      	mov	r0, r5
 80077c0:	b003      	add	sp, #12
 80077c2:	bd30      	pop	{r4, r5, pc}
 80077c4:	220c      	movs	r2, #12
 80077c6:	6002      	str	r2, [r0, #0]
 80077c8:	2500      	movs	r5, #0
 80077ca:	e7f8      	b.n	80077be <_calloc_r+0x16>
 80077cc:	4621      	mov	r1, r4
 80077ce:	f7fe f941 	bl	8005a54 <memset>
 80077d2:	e7f4      	b.n	80077be <_calloc_r+0x16>

080077d4 <_free_r>:
 80077d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d044      	beq.n	8007864 <_free_r+0x90>
 80077da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077de:	9001      	str	r0, [sp, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f1a1 0404 	sub.w	r4, r1, #4
 80077e6:	bfb8      	it	lt
 80077e8:	18e4      	addlt	r4, r4, r3
 80077ea:	f000 fa9b 	bl	8007d24 <__malloc_lock>
 80077ee:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <_free_r+0x94>)
 80077f0:	9801      	ldr	r0, [sp, #4]
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	b933      	cbnz	r3, 8007804 <_free_r+0x30>
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	6014      	str	r4, [r2, #0]
 80077fa:	b003      	add	sp, #12
 80077fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007800:	f000 ba96 	b.w	8007d30 <__malloc_unlock>
 8007804:	42a3      	cmp	r3, r4
 8007806:	d908      	bls.n	800781a <_free_r+0x46>
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	1961      	adds	r1, r4, r5
 800780c:	428b      	cmp	r3, r1
 800780e:	bf01      	itttt	eq
 8007810:	6819      	ldreq	r1, [r3, #0]
 8007812:	685b      	ldreq	r3, [r3, #4]
 8007814:	1949      	addeq	r1, r1, r5
 8007816:	6021      	streq	r1, [r4, #0]
 8007818:	e7ed      	b.n	80077f6 <_free_r+0x22>
 800781a:	461a      	mov	r2, r3
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b10b      	cbz	r3, 8007824 <_free_r+0x50>
 8007820:	42a3      	cmp	r3, r4
 8007822:	d9fa      	bls.n	800781a <_free_r+0x46>
 8007824:	6811      	ldr	r1, [r2, #0]
 8007826:	1855      	adds	r5, r2, r1
 8007828:	42a5      	cmp	r5, r4
 800782a:	d10b      	bne.n	8007844 <_free_r+0x70>
 800782c:	6824      	ldr	r4, [r4, #0]
 800782e:	4421      	add	r1, r4
 8007830:	1854      	adds	r4, r2, r1
 8007832:	42a3      	cmp	r3, r4
 8007834:	6011      	str	r1, [r2, #0]
 8007836:	d1e0      	bne.n	80077fa <_free_r+0x26>
 8007838:	681c      	ldr	r4, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	6053      	str	r3, [r2, #4]
 800783e:	4421      	add	r1, r4
 8007840:	6011      	str	r1, [r2, #0]
 8007842:	e7da      	b.n	80077fa <_free_r+0x26>
 8007844:	d902      	bls.n	800784c <_free_r+0x78>
 8007846:	230c      	movs	r3, #12
 8007848:	6003      	str	r3, [r0, #0]
 800784a:	e7d6      	b.n	80077fa <_free_r+0x26>
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	1961      	adds	r1, r4, r5
 8007850:	428b      	cmp	r3, r1
 8007852:	bf04      	itt	eq
 8007854:	6819      	ldreq	r1, [r3, #0]
 8007856:	685b      	ldreq	r3, [r3, #4]
 8007858:	6063      	str	r3, [r4, #4]
 800785a:	bf04      	itt	eq
 800785c:	1949      	addeq	r1, r1, r5
 800785e:	6021      	streq	r1, [r4, #0]
 8007860:	6054      	str	r4, [r2, #4]
 8007862:	e7ca      	b.n	80077fa <_free_r+0x26>
 8007864:	b003      	add	sp, #12
 8007866:	bd30      	pop	{r4, r5, pc}
 8007868:	20000370 	.word	0x20000370

0800786c <sbrk_aligned>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4e0e      	ldr	r6, [pc, #56]	; (80078a8 <sbrk_aligned+0x3c>)
 8007870:	460c      	mov	r4, r1
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	4605      	mov	r5, r0
 8007876:	b911      	cbnz	r1, 800787e <sbrk_aligned+0x12>
 8007878:	f000 f9e8 	bl	8007c4c <_sbrk_r>
 800787c:	6030      	str	r0, [r6, #0]
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f000 f9e3 	bl	8007c4c <_sbrk_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	d00a      	beq.n	80078a0 <sbrk_aligned+0x34>
 800788a:	1cc4      	adds	r4, r0, #3
 800788c:	f024 0403 	bic.w	r4, r4, #3
 8007890:	42a0      	cmp	r0, r4
 8007892:	d007      	beq.n	80078a4 <sbrk_aligned+0x38>
 8007894:	1a21      	subs	r1, r4, r0
 8007896:	4628      	mov	r0, r5
 8007898:	f000 f9d8 	bl	8007c4c <_sbrk_r>
 800789c:	3001      	adds	r0, #1
 800789e:	d101      	bne.n	80078a4 <sbrk_aligned+0x38>
 80078a0:	f04f 34ff 	mov.w	r4, #4294967295
 80078a4:	4620      	mov	r0, r4
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	20000374 	.word	0x20000374

080078ac <_malloc_r>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	1ccd      	adds	r5, r1, #3
 80078b2:	f025 0503 	bic.w	r5, r5, #3
 80078b6:	3508      	adds	r5, #8
 80078b8:	2d0c      	cmp	r5, #12
 80078ba:	bf38      	it	cc
 80078bc:	250c      	movcc	r5, #12
 80078be:	2d00      	cmp	r5, #0
 80078c0:	4607      	mov	r7, r0
 80078c2:	db01      	blt.n	80078c8 <_malloc_r+0x1c>
 80078c4:	42a9      	cmp	r1, r5
 80078c6:	d905      	bls.n	80078d4 <_malloc_r+0x28>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	2600      	movs	r6, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d4:	4e2e      	ldr	r6, [pc, #184]	; (8007990 <_malloc_r+0xe4>)
 80078d6:	f000 fa25 	bl	8007d24 <__malloc_lock>
 80078da:	6833      	ldr	r3, [r6, #0]
 80078dc:	461c      	mov	r4, r3
 80078de:	bb34      	cbnz	r4, 800792e <_malloc_r+0x82>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff ffc2 	bl	800786c <sbrk_aligned>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	4604      	mov	r4, r0
 80078ec:	d14d      	bne.n	800798a <_malloc_r+0xde>
 80078ee:	6834      	ldr	r4, [r6, #0]
 80078f0:	4626      	mov	r6, r4
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	d140      	bne.n	8007978 <_malloc_r+0xcc>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	4631      	mov	r1, r6
 80078fa:	4638      	mov	r0, r7
 80078fc:	eb04 0803 	add.w	r8, r4, r3
 8007900:	f000 f9a4 	bl	8007c4c <_sbrk_r>
 8007904:	4580      	cmp	r8, r0
 8007906:	d13a      	bne.n	800797e <_malloc_r+0xd2>
 8007908:	6821      	ldr	r1, [r4, #0]
 800790a:	3503      	adds	r5, #3
 800790c:	1a6d      	subs	r5, r5, r1
 800790e:	f025 0503 	bic.w	r5, r5, #3
 8007912:	3508      	adds	r5, #8
 8007914:	2d0c      	cmp	r5, #12
 8007916:	bf38      	it	cc
 8007918:	250c      	movcc	r5, #12
 800791a:	4629      	mov	r1, r5
 800791c:	4638      	mov	r0, r7
 800791e:	f7ff ffa5 	bl	800786c <sbrk_aligned>
 8007922:	3001      	adds	r0, #1
 8007924:	d02b      	beq.n	800797e <_malloc_r+0xd2>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	442b      	add	r3, r5
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	e00e      	b.n	800794c <_malloc_r+0xa0>
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	1b52      	subs	r2, r2, r5
 8007932:	d41e      	bmi.n	8007972 <_malloc_r+0xc6>
 8007934:	2a0b      	cmp	r2, #11
 8007936:	d916      	bls.n	8007966 <_malloc_r+0xba>
 8007938:	1961      	adds	r1, r4, r5
 800793a:	42a3      	cmp	r3, r4
 800793c:	6025      	str	r5, [r4, #0]
 800793e:	bf18      	it	ne
 8007940:	6059      	strne	r1, [r3, #4]
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	bf08      	it	eq
 8007946:	6031      	streq	r1, [r6, #0]
 8007948:	5162      	str	r2, [r4, r5]
 800794a:	604b      	str	r3, [r1, #4]
 800794c:	4638      	mov	r0, r7
 800794e:	f104 060b 	add.w	r6, r4, #11
 8007952:	f000 f9ed 	bl	8007d30 <__malloc_unlock>
 8007956:	f026 0607 	bic.w	r6, r6, #7
 800795a:	1d23      	adds	r3, r4, #4
 800795c:	1af2      	subs	r2, r6, r3
 800795e:	d0b6      	beq.n	80078ce <_malloc_r+0x22>
 8007960:	1b9b      	subs	r3, r3, r6
 8007962:	50a3      	str	r3, [r4, r2]
 8007964:	e7b3      	b.n	80078ce <_malloc_r+0x22>
 8007966:	6862      	ldr	r2, [r4, #4]
 8007968:	42a3      	cmp	r3, r4
 800796a:	bf0c      	ite	eq
 800796c:	6032      	streq	r2, [r6, #0]
 800796e:	605a      	strne	r2, [r3, #4]
 8007970:	e7ec      	b.n	800794c <_malloc_r+0xa0>
 8007972:	4623      	mov	r3, r4
 8007974:	6864      	ldr	r4, [r4, #4]
 8007976:	e7b2      	b.n	80078de <_malloc_r+0x32>
 8007978:	4634      	mov	r4, r6
 800797a:	6876      	ldr	r6, [r6, #4]
 800797c:	e7b9      	b.n	80078f2 <_malloc_r+0x46>
 800797e:	230c      	movs	r3, #12
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	4638      	mov	r0, r7
 8007984:	f000 f9d4 	bl	8007d30 <__malloc_unlock>
 8007988:	e7a1      	b.n	80078ce <_malloc_r+0x22>
 800798a:	6025      	str	r5, [r4, #0]
 800798c:	e7de      	b.n	800794c <_malloc_r+0xa0>
 800798e:	bf00      	nop
 8007990:	20000370 	.word	0x20000370

08007994 <__ssputs_r>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	688e      	ldr	r6, [r1, #8]
 800799a:	429e      	cmp	r6, r3
 800799c:	4682      	mov	sl, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	4690      	mov	r8, r2
 80079a2:	461f      	mov	r7, r3
 80079a4:	d838      	bhi.n	8007a18 <__ssputs_r+0x84>
 80079a6:	898a      	ldrh	r2, [r1, #12]
 80079a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079ac:	d032      	beq.n	8007a14 <__ssputs_r+0x80>
 80079ae:	6825      	ldr	r5, [r4, #0]
 80079b0:	6909      	ldr	r1, [r1, #16]
 80079b2:	eba5 0901 	sub.w	r9, r5, r1
 80079b6:	6965      	ldr	r5, [r4, #20]
 80079b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079c0:	3301      	adds	r3, #1
 80079c2:	444b      	add	r3, r9
 80079c4:	106d      	asrs	r5, r5, #1
 80079c6:	429d      	cmp	r5, r3
 80079c8:	bf38      	it	cc
 80079ca:	461d      	movcc	r5, r3
 80079cc:	0553      	lsls	r3, r2, #21
 80079ce:	d531      	bpl.n	8007a34 <__ssputs_r+0xa0>
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7ff ff6b 	bl	80078ac <_malloc_r>
 80079d6:	4606      	mov	r6, r0
 80079d8:	b950      	cbnz	r0, 80079f0 <__ssputs_r+0x5c>
 80079da:	230c      	movs	r3, #12
 80079dc:	f8ca 3000 	str.w	r3, [sl]
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f0:	6921      	ldr	r1, [r4, #16]
 80079f2:	464a      	mov	r2, r9
 80079f4:	f7ff fb46 	bl	8007084 <memcpy>
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	6126      	str	r6, [r4, #16]
 8007a06:	6165      	str	r5, [r4, #20]
 8007a08:	444e      	add	r6, r9
 8007a0a:	eba5 0509 	sub.w	r5, r5, r9
 8007a0e:	6026      	str	r6, [r4, #0]
 8007a10:	60a5      	str	r5, [r4, #8]
 8007a12:	463e      	mov	r6, r7
 8007a14:	42be      	cmp	r6, r7
 8007a16:	d900      	bls.n	8007a1a <__ssputs_r+0x86>
 8007a18:	463e      	mov	r6, r7
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	4641      	mov	r1, r8
 8007a20:	f000 f966 	bl	8007cf0 <memmove>
 8007a24:	68a3      	ldr	r3, [r4, #8]
 8007a26:	1b9b      	subs	r3, r3, r6
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	4433      	add	r3, r6
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	2000      	movs	r0, #0
 8007a32:	e7db      	b.n	80079ec <__ssputs_r+0x58>
 8007a34:	462a      	mov	r2, r5
 8007a36:	f000 f981 	bl	8007d3c <_realloc_r>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d1e1      	bne.n	8007a04 <__ssputs_r+0x70>
 8007a40:	6921      	ldr	r1, [r4, #16]
 8007a42:	4650      	mov	r0, sl
 8007a44:	f7ff fec6 	bl	80077d4 <_free_r>
 8007a48:	e7c7      	b.n	80079da <__ssputs_r+0x46>
	...

08007a4c <_svfiprintf_r>:
 8007a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	4698      	mov	r8, r3
 8007a52:	898b      	ldrh	r3, [r1, #12]
 8007a54:	061b      	lsls	r3, r3, #24
 8007a56:	b09d      	sub	sp, #116	; 0x74
 8007a58:	4607      	mov	r7, r0
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	d50e      	bpl.n	8007a7e <_svfiprintf_r+0x32>
 8007a60:	690b      	ldr	r3, [r1, #16]
 8007a62:	b963      	cbnz	r3, 8007a7e <_svfiprintf_r+0x32>
 8007a64:	2140      	movs	r1, #64	; 0x40
 8007a66:	f7ff ff21 	bl	80078ac <_malloc_r>
 8007a6a:	6028      	str	r0, [r5, #0]
 8007a6c:	6128      	str	r0, [r5, #16]
 8007a6e:	b920      	cbnz	r0, 8007a7a <_svfiprintf_r+0x2e>
 8007a70:	230c      	movs	r3, #12
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295
 8007a78:	e0d1      	b.n	8007c1e <_svfiprintf_r+0x1d2>
 8007a7a:	2340      	movs	r3, #64	; 0x40
 8007a7c:	616b      	str	r3, [r5, #20]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9309      	str	r3, [sp, #36]	; 0x24
 8007a82:	2320      	movs	r3, #32
 8007a84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a8c:	2330      	movs	r3, #48	; 0x30
 8007a8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c38 <_svfiprintf_r+0x1ec>
 8007a92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a96:	f04f 0901 	mov.w	r9, #1
 8007a9a:	4623      	mov	r3, r4
 8007a9c:	469a      	mov	sl, r3
 8007a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa2:	b10a      	cbz	r2, 8007aa8 <_svfiprintf_r+0x5c>
 8007aa4:	2a25      	cmp	r2, #37	; 0x25
 8007aa6:	d1f9      	bne.n	8007a9c <_svfiprintf_r+0x50>
 8007aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8007aac:	d00b      	beq.n	8007ac6 <_svfiprintf_r+0x7a>
 8007aae:	465b      	mov	r3, fp
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff ff6d 	bl	8007994 <__ssputs_r>
 8007aba:	3001      	adds	r0, #1
 8007abc:	f000 80aa 	beq.w	8007c14 <_svfiprintf_r+0x1c8>
 8007ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ac2:	445a      	add	r2, fp
 8007ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 80a2 	beq.w	8007c14 <_svfiprintf_r+0x1c8>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ada:	f10a 0a01 	add.w	sl, sl, #1
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	9307      	str	r3, [sp, #28]
 8007ae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ae6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ae8:	4654      	mov	r4, sl
 8007aea:	2205      	movs	r2, #5
 8007aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af0:	4851      	ldr	r0, [pc, #324]	; (8007c38 <_svfiprintf_r+0x1ec>)
 8007af2:	f7f8 fb7d 	bl	80001f0 <memchr>
 8007af6:	9a04      	ldr	r2, [sp, #16]
 8007af8:	b9d8      	cbnz	r0, 8007b32 <_svfiprintf_r+0xe6>
 8007afa:	06d0      	lsls	r0, r2, #27
 8007afc:	bf44      	itt	mi
 8007afe:	2320      	movmi	r3, #32
 8007b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b04:	0711      	lsls	r1, r2, #28
 8007b06:	bf44      	itt	mi
 8007b08:	232b      	movmi	r3, #43	; 0x2b
 8007b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b12:	2b2a      	cmp	r3, #42	; 0x2a
 8007b14:	d015      	beq.n	8007b42 <_svfiprintf_r+0xf6>
 8007b16:	9a07      	ldr	r2, [sp, #28]
 8007b18:	4654      	mov	r4, sl
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	f04f 0c0a 	mov.w	ip, #10
 8007b20:	4621      	mov	r1, r4
 8007b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b26:	3b30      	subs	r3, #48	; 0x30
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d94e      	bls.n	8007bca <_svfiprintf_r+0x17e>
 8007b2c:	b1b0      	cbz	r0, 8007b5c <_svfiprintf_r+0x110>
 8007b2e:	9207      	str	r2, [sp, #28]
 8007b30:	e014      	b.n	8007b5c <_svfiprintf_r+0x110>
 8007b32:	eba0 0308 	sub.w	r3, r0, r8
 8007b36:	fa09 f303 	lsl.w	r3, r9, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	46a2      	mov	sl, r4
 8007b40:	e7d2      	b.n	8007ae8 <_svfiprintf_r+0x9c>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	1d19      	adds	r1, r3, #4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	9103      	str	r1, [sp, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bfbb      	ittet	lt
 8007b4e:	425b      	neglt	r3, r3
 8007b50:	f042 0202 	orrlt.w	r2, r2, #2
 8007b54:	9307      	strge	r3, [sp, #28]
 8007b56:	9307      	strlt	r3, [sp, #28]
 8007b58:	bfb8      	it	lt
 8007b5a:	9204      	strlt	r2, [sp, #16]
 8007b5c:	7823      	ldrb	r3, [r4, #0]
 8007b5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b60:	d10c      	bne.n	8007b7c <_svfiprintf_r+0x130>
 8007b62:	7863      	ldrb	r3, [r4, #1]
 8007b64:	2b2a      	cmp	r3, #42	; 0x2a
 8007b66:	d135      	bne.n	8007bd4 <_svfiprintf_r+0x188>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	1d1a      	adds	r2, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9203      	str	r2, [sp, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfb8      	it	lt
 8007b74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b78:	3402      	adds	r4, #2
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c48 <_svfiprintf_r+0x1fc>
 8007b80:	7821      	ldrb	r1, [r4, #0]
 8007b82:	2203      	movs	r2, #3
 8007b84:	4650      	mov	r0, sl
 8007b86:	f7f8 fb33 	bl	80001f0 <memchr>
 8007b8a:	b140      	cbz	r0, 8007b9e <_svfiprintf_r+0x152>
 8007b8c:	2340      	movs	r3, #64	; 0x40
 8007b8e:	eba0 000a 	sub.w	r0, r0, sl
 8007b92:	fa03 f000 	lsl.w	r0, r3, r0
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	4303      	orrs	r3, r0
 8007b9a:	3401      	adds	r4, #1
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba2:	4826      	ldr	r0, [pc, #152]	; (8007c3c <_svfiprintf_r+0x1f0>)
 8007ba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ba8:	2206      	movs	r2, #6
 8007baa:	f7f8 fb21 	bl	80001f0 <memchr>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d038      	beq.n	8007c24 <_svfiprintf_r+0x1d8>
 8007bb2:	4b23      	ldr	r3, [pc, #140]	; (8007c40 <_svfiprintf_r+0x1f4>)
 8007bb4:	bb1b      	cbnz	r3, 8007bfe <_svfiprintf_r+0x1b2>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	3307      	adds	r3, #7
 8007bba:	f023 0307 	bic.w	r3, r3, #7
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	9303      	str	r3, [sp, #12]
 8007bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc4:	4433      	add	r3, r6
 8007bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc8:	e767      	b.n	8007a9a <_svfiprintf_r+0x4e>
 8007bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bce:	460c      	mov	r4, r1
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	e7a5      	b.n	8007b20 <_svfiprintf_r+0xd4>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	3401      	adds	r4, #1
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f04f 0c0a 	mov.w	ip, #10
 8007be0:	4620      	mov	r0, r4
 8007be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be6:	3a30      	subs	r2, #48	; 0x30
 8007be8:	2a09      	cmp	r2, #9
 8007bea:	d903      	bls.n	8007bf4 <_svfiprintf_r+0x1a8>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0c5      	beq.n	8007b7c <_svfiprintf_r+0x130>
 8007bf0:	9105      	str	r1, [sp, #20]
 8007bf2:	e7c3      	b.n	8007b7c <_svfiprintf_r+0x130>
 8007bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e7f0      	b.n	8007be0 <_svfiprintf_r+0x194>
 8007bfe:	ab03      	add	r3, sp, #12
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	462a      	mov	r2, r5
 8007c04:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <_svfiprintf_r+0x1f8>)
 8007c06:	a904      	add	r1, sp, #16
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f7fd ffcb 	bl	8005ba4 <_printf_float>
 8007c0e:	1c42      	adds	r2, r0, #1
 8007c10:	4606      	mov	r6, r0
 8007c12:	d1d6      	bne.n	8007bc2 <_svfiprintf_r+0x176>
 8007c14:	89ab      	ldrh	r3, [r5, #12]
 8007c16:	065b      	lsls	r3, r3, #25
 8007c18:	f53f af2c 	bmi.w	8007a74 <_svfiprintf_r+0x28>
 8007c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c1e:	b01d      	add	sp, #116	; 0x74
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	ab03      	add	r3, sp, #12
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	462a      	mov	r2, r5
 8007c2a:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <_svfiprintf_r+0x1f8>)
 8007c2c:	a904      	add	r1, sp, #16
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f7fe fa5c 	bl	80060ec <_printf_i>
 8007c34:	e7eb      	b.n	8007c0e <_svfiprintf_r+0x1c2>
 8007c36:	bf00      	nop
 8007c38:	08008ad4 	.word	0x08008ad4
 8007c3c:	08008ade 	.word	0x08008ade
 8007c40:	08005ba5 	.word	0x08005ba5
 8007c44:	08007995 	.word	0x08007995
 8007c48:	08008ada 	.word	0x08008ada

08007c4c <_sbrk_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d06      	ldr	r5, [pc, #24]	; (8007c68 <_sbrk_r+0x1c>)
 8007c50:	2300      	movs	r3, #0
 8007c52:	4604      	mov	r4, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	602b      	str	r3, [r5, #0]
 8007c58:	f7fa f8de 	bl	8001e18 <_sbrk>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_sbrk_r+0x1a>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_sbrk_r+0x1a>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	20000378 	.word	0x20000378

08007c6c <__assert_func>:
 8007c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c6e:	4614      	mov	r4, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <__assert_func+0x2c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4605      	mov	r5, r0
 8007c78:	68d8      	ldr	r0, [r3, #12]
 8007c7a:	b14c      	cbz	r4, 8007c90 <__assert_func+0x24>
 8007c7c:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <__assert_func+0x30>)
 8007c7e:	9100      	str	r1, [sp, #0]
 8007c80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c84:	4906      	ldr	r1, [pc, #24]	; (8007ca0 <__assert_func+0x34>)
 8007c86:	462b      	mov	r3, r5
 8007c88:	f000 f80e 	bl	8007ca8 <fiprintf>
 8007c8c:	f000 faac 	bl	80081e8 <abort>
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <__assert_func+0x38>)
 8007c92:	461c      	mov	r4, r3
 8007c94:	e7f3      	b.n	8007c7e <__assert_func+0x12>
 8007c96:	bf00      	nop
 8007c98:	2000000c 	.word	0x2000000c
 8007c9c:	08008ae5 	.word	0x08008ae5
 8007ca0:	08008af2 	.word	0x08008af2
 8007ca4:	08008b20 	.word	0x08008b20

08007ca8 <fiprintf>:
 8007ca8:	b40e      	push	{r1, r2, r3}
 8007caa:	b503      	push	{r0, r1, lr}
 8007cac:	4601      	mov	r1, r0
 8007cae:	ab03      	add	r3, sp, #12
 8007cb0:	4805      	ldr	r0, [pc, #20]	; (8007cc8 <fiprintf+0x20>)
 8007cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb6:	6800      	ldr	r0, [r0, #0]
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f000 f897 	bl	8007dec <_vfiprintf_r>
 8007cbe:	b002      	add	sp, #8
 8007cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc4:	b003      	add	sp, #12
 8007cc6:	4770      	bx	lr
 8007cc8:	2000000c 	.word	0x2000000c

08007ccc <__ascii_mbtowc>:
 8007ccc:	b082      	sub	sp, #8
 8007cce:	b901      	cbnz	r1, 8007cd2 <__ascii_mbtowc+0x6>
 8007cd0:	a901      	add	r1, sp, #4
 8007cd2:	b142      	cbz	r2, 8007ce6 <__ascii_mbtowc+0x1a>
 8007cd4:	b14b      	cbz	r3, 8007cea <__ascii_mbtowc+0x1e>
 8007cd6:	7813      	ldrb	r3, [r2, #0]
 8007cd8:	600b      	str	r3, [r1, #0]
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	1e10      	subs	r0, r2, #0
 8007cde:	bf18      	it	ne
 8007ce0:	2001      	movne	r0, #1
 8007ce2:	b002      	add	sp, #8
 8007ce4:	4770      	bx	lr
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	e7fb      	b.n	8007ce2 <__ascii_mbtowc+0x16>
 8007cea:	f06f 0001 	mvn.w	r0, #1
 8007cee:	e7f8      	b.n	8007ce2 <__ascii_mbtowc+0x16>

08007cf0 <memmove>:
 8007cf0:	4288      	cmp	r0, r1
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	eb01 0402 	add.w	r4, r1, r2
 8007cf8:	d902      	bls.n	8007d00 <memmove+0x10>
 8007cfa:	4284      	cmp	r4, r0
 8007cfc:	4623      	mov	r3, r4
 8007cfe:	d807      	bhi.n	8007d10 <memmove+0x20>
 8007d00:	1e43      	subs	r3, r0, #1
 8007d02:	42a1      	cmp	r1, r4
 8007d04:	d008      	beq.n	8007d18 <memmove+0x28>
 8007d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d0e:	e7f8      	b.n	8007d02 <memmove+0x12>
 8007d10:	4402      	add	r2, r0
 8007d12:	4601      	mov	r1, r0
 8007d14:	428a      	cmp	r2, r1
 8007d16:	d100      	bne.n	8007d1a <memmove+0x2a>
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d22:	e7f7      	b.n	8007d14 <memmove+0x24>

08007d24 <__malloc_lock>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__malloc_lock+0x8>)
 8007d26:	f000 bc1f 	b.w	8008568 <__retarget_lock_acquire_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	2000037c 	.word	0x2000037c

08007d30 <__malloc_unlock>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__malloc_unlock+0x8>)
 8007d32:	f000 bc1a 	b.w	800856a <__retarget_lock_release_recursive>
 8007d36:	bf00      	nop
 8007d38:	2000037c 	.word	0x2000037c

08007d3c <_realloc_r>:
 8007d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d40:	4680      	mov	r8, r0
 8007d42:	4614      	mov	r4, r2
 8007d44:	460e      	mov	r6, r1
 8007d46:	b921      	cbnz	r1, 8007d52 <_realloc_r+0x16>
 8007d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	f7ff bdad 	b.w	80078ac <_malloc_r>
 8007d52:	b92a      	cbnz	r2, 8007d60 <_realloc_r+0x24>
 8007d54:	f7ff fd3e 	bl	80077d4 <_free_r>
 8007d58:	4625      	mov	r5, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d60:	f000 fc6a 	bl	8008638 <_malloc_usable_size_r>
 8007d64:	4284      	cmp	r4, r0
 8007d66:	4607      	mov	r7, r0
 8007d68:	d802      	bhi.n	8007d70 <_realloc_r+0x34>
 8007d6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d6e:	d812      	bhi.n	8007d96 <_realloc_r+0x5a>
 8007d70:	4621      	mov	r1, r4
 8007d72:	4640      	mov	r0, r8
 8007d74:	f7ff fd9a 	bl	80078ac <_malloc_r>
 8007d78:	4605      	mov	r5, r0
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d0ed      	beq.n	8007d5a <_realloc_r+0x1e>
 8007d7e:	42bc      	cmp	r4, r7
 8007d80:	4622      	mov	r2, r4
 8007d82:	4631      	mov	r1, r6
 8007d84:	bf28      	it	cs
 8007d86:	463a      	movcs	r2, r7
 8007d88:	f7ff f97c 	bl	8007084 <memcpy>
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f7ff fd20 	bl	80077d4 <_free_r>
 8007d94:	e7e1      	b.n	8007d5a <_realloc_r+0x1e>
 8007d96:	4635      	mov	r5, r6
 8007d98:	e7df      	b.n	8007d5a <_realloc_r+0x1e>

08007d9a <__sfputc_r>:
 8007d9a:	6893      	ldr	r3, [r2, #8]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	b410      	push	{r4}
 8007da2:	6093      	str	r3, [r2, #8]
 8007da4:	da08      	bge.n	8007db8 <__sfputc_r+0x1e>
 8007da6:	6994      	ldr	r4, [r2, #24]
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	db01      	blt.n	8007db0 <__sfputc_r+0x16>
 8007dac:	290a      	cmp	r1, #10
 8007dae:	d103      	bne.n	8007db8 <__sfputc_r+0x1e>
 8007db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db4:	f000 b94a 	b.w	800804c <__swbuf_r>
 8007db8:	6813      	ldr	r3, [r2, #0]
 8007dba:	1c58      	adds	r0, r3, #1
 8007dbc:	6010      	str	r0, [r2, #0]
 8007dbe:	7019      	strb	r1, [r3, #0]
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <__sfputs_r>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460f      	mov	r7, r1
 8007dce:	4614      	mov	r4, r2
 8007dd0:	18d5      	adds	r5, r2, r3
 8007dd2:	42ac      	cmp	r4, r5
 8007dd4:	d101      	bne.n	8007dda <__sfputs_r+0x12>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e007      	b.n	8007dea <__sfputs_r+0x22>
 8007dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dde:	463a      	mov	r2, r7
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff ffda 	bl	8007d9a <__sfputc_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	d1f3      	bne.n	8007dd2 <__sfputs_r+0xa>
 8007dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007dec <_vfiprintf_r>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	460d      	mov	r5, r1
 8007df2:	b09d      	sub	sp, #116	; 0x74
 8007df4:	4614      	mov	r4, r2
 8007df6:	4698      	mov	r8, r3
 8007df8:	4606      	mov	r6, r0
 8007dfa:	b118      	cbz	r0, 8007e04 <_vfiprintf_r+0x18>
 8007dfc:	6983      	ldr	r3, [r0, #24]
 8007dfe:	b90b      	cbnz	r3, 8007e04 <_vfiprintf_r+0x18>
 8007e00:	f000 fb14 	bl	800842c <__sinit>
 8007e04:	4b89      	ldr	r3, [pc, #548]	; (800802c <_vfiprintf_r+0x240>)
 8007e06:	429d      	cmp	r5, r3
 8007e08:	d11b      	bne.n	8007e42 <_vfiprintf_r+0x56>
 8007e0a:	6875      	ldr	r5, [r6, #4]
 8007e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0e:	07d9      	lsls	r1, r3, #31
 8007e10:	d405      	bmi.n	8007e1e <_vfiprintf_r+0x32>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	059a      	lsls	r2, r3, #22
 8007e16:	d402      	bmi.n	8007e1e <_vfiprintf_r+0x32>
 8007e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e1a:	f000 fba5 	bl	8008568 <__retarget_lock_acquire_recursive>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	071b      	lsls	r3, r3, #28
 8007e22:	d501      	bpl.n	8007e28 <_vfiprintf_r+0x3c>
 8007e24:	692b      	ldr	r3, [r5, #16]
 8007e26:	b9eb      	cbnz	r3, 8007e64 <_vfiprintf_r+0x78>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f000 f96e 	bl	800810c <__swsetup_r>
 8007e30:	b1c0      	cbz	r0, 8007e64 <_vfiprintf_r+0x78>
 8007e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e34:	07dc      	lsls	r4, r3, #31
 8007e36:	d50e      	bpl.n	8007e56 <_vfiprintf_r+0x6a>
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	b01d      	add	sp, #116	; 0x74
 8007e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e42:	4b7b      	ldr	r3, [pc, #492]	; (8008030 <_vfiprintf_r+0x244>)
 8007e44:	429d      	cmp	r5, r3
 8007e46:	d101      	bne.n	8007e4c <_vfiprintf_r+0x60>
 8007e48:	68b5      	ldr	r5, [r6, #8]
 8007e4a:	e7df      	b.n	8007e0c <_vfiprintf_r+0x20>
 8007e4c:	4b79      	ldr	r3, [pc, #484]	; (8008034 <_vfiprintf_r+0x248>)
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	bf08      	it	eq
 8007e52:	68f5      	ldreq	r5, [r6, #12]
 8007e54:	e7da      	b.n	8007e0c <_vfiprintf_r+0x20>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	0598      	lsls	r0, r3, #22
 8007e5a:	d4ed      	bmi.n	8007e38 <_vfiprintf_r+0x4c>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e5e:	f000 fb84 	bl	800856a <__retarget_lock_release_recursive>
 8007e62:	e7e9      	b.n	8007e38 <_vfiprintf_r+0x4c>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9309      	str	r3, [sp, #36]	; 0x24
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e72:	2330      	movs	r3, #48	; 0x30
 8007e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008038 <_vfiprintf_r+0x24c>
 8007e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e7c:	f04f 0901 	mov.w	r9, #1
 8007e80:	4623      	mov	r3, r4
 8007e82:	469a      	mov	sl, r3
 8007e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e88:	b10a      	cbz	r2, 8007e8e <_vfiprintf_r+0xa2>
 8007e8a:	2a25      	cmp	r2, #37	; 0x25
 8007e8c:	d1f9      	bne.n	8007e82 <_vfiprintf_r+0x96>
 8007e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e92:	d00b      	beq.n	8007eac <_vfiprintf_r+0xc0>
 8007e94:	465b      	mov	r3, fp
 8007e96:	4622      	mov	r2, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff ff94 	bl	8007dc8 <__sfputs_r>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f000 80aa 	beq.w	8007ffa <_vfiprintf_r+0x20e>
 8007ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea8:	445a      	add	r2, fp
 8007eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8007eac:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80a2 	beq.w	8007ffa <_vfiprintf_r+0x20e>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec0:	f10a 0a01 	add.w	sl, sl, #1
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	9307      	str	r3, [sp, #28]
 8007ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ece:	4654      	mov	r4, sl
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed6:	4858      	ldr	r0, [pc, #352]	; (8008038 <_vfiprintf_r+0x24c>)
 8007ed8:	f7f8 f98a 	bl	80001f0 <memchr>
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	b9d8      	cbnz	r0, 8007f18 <_vfiprintf_r+0x12c>
 8007ee0:	06d1      	lsls	r1, r2, #27
 8007ee2:	bf44      	itt	mi
 8007ee4:	2320      	movmi	r3, #32
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eea:	0713      	lsls	r3, r2, #28
 8007eec:	bf44      	itt	mi
 8007eee:	232b      	movmi	r3, #43	; 0x2b
 8007ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8007efa:	d015      	beq.n	8007f28 <_vfiprintf_r+0x13c>
 8007efc:	9a07      	ldr	r2, [sp, #28]
 8007efe:	4654      	mov	r4, sl
 8007f00:	2000      	movs	r0, #0
 8007f02:	f04f 0c0a 	mov.w	ip, #10
 8007f06:	4621      	mov	r1, r4
 8007f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f0c:	3b30      	subs	r3, #48	; 0x30
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d94e      	bls.n	8007fb0 <_vfiprintf_r+0x1c4>
 8007f12:	b1b0      	cbz	r0, 8007f42 <_vfiprintf_r+0x156>
 8007f14:	9207      	str	r2, [sp, #28]
 8007f16:	e014      	b.n	8007f42 <_vfiprintf_r+0x156>
 8007f18:	eba0 0308 	sub.w	r3, r0, r8
 8007f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f20:	4313      	orrs	r3, r2
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	46a2      	mov	sl, r4
 8007f26:	e7d2      	b.n	8007ece <_vfiprintf_r+0xe2>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1d19      	adds	r1, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9103      	str	r1, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfbb      	ittet	lt
 8007f34:	425b      	neglt	r3, r3
 8007f36:	f042 0202 	orrlt.w	r2, r2, #2
 8007f3a:	9307      	strge	r3, [sp, #28]
 8007f3c:	9307      	strlt	r3, [sp, #28]
 8007f3e:	bfb8      	it	lt
 8007f40:	9204      	strlt	r2, [sp, #16]
 8007f42:	7823      	ldrb	r3, [r4, #0]
 8007f44:	2b2e      	cmp	r3, #46	; 0x2e
 8007f46:	d10c      	bne.n	8007f62 <_vfiprintf_r+0x176>
 8007f48:	7863      	ldrb	r3, [r4, #1]
 8007f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4c:	d135      	bne.n	8007fba <_vfiprintf_r+0x1ce>
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	9203      	str	r2, [sp, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfb8      	it	lt
 8007f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f5e:	3402      	adds	r4, #2
 8007f60:	9305      	str	r3, [sp, #20]
 8007f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008048 <_vfiprintf_r+0x25c>
 8007f66:	7821      	ldrb	r1, [r4, #0]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	f7f8 f940 	bl	80001f0 <memchr>
 8007f70:	b140      	cbz	r0, 8007f84 <_vfiprintf_r+0x198>
 8007f72:	2340      	movs	r3, #64	; 0x40
 8007f74:	eba0 000a 	sub.w	r0, r0, sl
 8007f78:	fa03 f000 	lsl.w	r0, r3, r0
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	4303      	orrs	r3, r0
 8007f80:	3401      	adds	r4, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	482c      	ldr	r0, [pc, #176]	; (800803c <_vfiprintf_r+0x250>)
 8007f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f8e:	2206      	movs	r2, #6
 8007f90:	f7f8 f92e 	bl	80001f0 <memchr>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d03f      	beq.n	8008018 <_vfiprintf_r+0x22c>
 8007f98:	4b29      	ldr	r3, [pc, #164]	; (8008040 <_vfiprintf_r+0x254>)
 8007f9a:	bb1b      	cbnz	r3, 8007fe4 <_vfiprintf_r+0x1f8>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	3307      	adds	r3, #7
 8007fa0:	f023 0307 	bic.w	r3, r3, #7
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	443b      	add	r3, r7
 8007fac:	9309      	str	r3, [sp, #36]	; 0x24
 8007fae:	e767      	b.n	8007e80 <_vfiprintf_r+0x94>
 8007fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7a5      	b.n	8007f06 <_vfiprintf_r+0x11a>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0c0a 	mov.w	ip, #10
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fcc:	3a30      	subs	r2, #48	; 0x30
 8007fce:	2a09      	cmp	r2, #9
 8007fd0:	d903      	bls.n	8007fda <_vfiprintf_r+0x1ee>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c5      	beq.n	8007f62 <_vfiprintf_r+0x176>
 8007fd6:	9105      	str	r1, [sp, #20]
 8007fd8:	e7c3      	b.n	8007f62 <_vfiprintf_r+0x176>
 8007fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fde:	4604      	mov	r4, r0
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f0      	b.n	8007fc6 <_vfiprintf_r+0x1da>
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b16      	ldr	r3, [pc, #88]	; (8008044 <_vfiprintf_r+0x258>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7fd fdd8 	bl	8005ba4 <_printf_float>
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	1c78      	adds	r0, r7, #1
 8007ff8:	d1d6      	bne.n	8007fa8 <_vfiprintf_r+0x1bc>
 8007ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ffc:	07d9      	lsls	r1, r3, #31
 8007ffe:	d405      	bmi.n	800800c <_vfiprintf_r+0x220>
 8008000:	89ab      	ldrh	r3, [r5, #12]
 8008002:	059a      	lsls	r2, r3, #22
 8008004:	d402      	bmi.n	800800c <_vfiprintf_r+0x220>
 8008006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008008:	f000 faaf 	bl	800856a <__retarget_lock_release_recursive>
 800800c:	89ab      	ldrh	r3, [r5, #12]
 800800e:	065b      	lsls	r3, r3, #25
 8008010:	f53f af12 	bmi.w	8007e38 <_vfiprintf_r+0x4c>
 8008014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008016:	e711      	b.n	8007e3c <_vfiprintf_r+0x50>
 8008018:	ab03      	add	r3, sp, #12
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	462a      	mov	r2, r5
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <_vfiprintf_r+0x258>)
 8008020:	a904      	add	r1, sp, #16
 8008022:	4630      	mov	r0, r6
 8008024:	f7fe f862 	bl	80060ec <_printf_i>
 8008028:	e7e4      	b.n	8007ff4 <_vfiprintf_r+0x208>
 800802a:	bf00      	nop
 800802c:	08008c4c 	.word	0x08008c4c
 8008030:	08008c6c 	.word	0x08008c6c
 8008034:	08008c2c 	.word	0x08008c2c
 8008038:	08008ad4 	.word	0x08008ad4
 800803c:	08008ade 	.word	0x08008ade
 8008040:	08005ba5 	.word	0x08005ba5
 8008044:	08007dc9 	.word	0x08007dc9
 8008048:	08008ada 	.word	0x08008ada

0800804c <__swbuf_r>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	460e      	mov	r6, r1
 8008050:	4614      	mov	r4, r2
 8008052:	4605      	mov	r5, r0
 8008054:	b118      	cbz	r0, 800805e <__swbuf_r+0x12>
 8008056:	6983      	ldr	r3, [r0, #24]
 8008058:	b90b      	cbnz	r3, 800805e <__swbuf_r+0x12>
 800805a:	f000 f9e7 	bl	800842c <__sinit>
 800805e:	4b21      	ldr	r3, [pc, #132]	; (80080e4 <__swbuf_r+0x98>)
 8008060:	429c      	cmp	r4, r3
 8008062:	d12b      	bne.n	80080bc <__swbuf_r+0x70>
 8008064:	686c      	ldr	r4, [r5, #4]
 8008066:	69a3      	ldr	r3, [r4, #24]
 8008068:	60a3      	str	r3, [r4, #8]
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	071a      	lsls	r2, r3, #28
 800806e:	d52f      	bpl.n	80080d0 <__swbuf_r+0x84>
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	b36b      	cbz	r3, 80080d0 <__swbuf_r+0x84>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	6820      	ldr	r0, [r4, #0]
 8008078:	1ac0      	subs	r0, r0, r3
 800807a:	6963      	ldr	r3, [r4, #20]
 800807c:	b2f6      	uxtb	r6, r6
 800807e:	4283      	cmp	r3, r0
 8008080:	4637      	mov	r7, r6
 8008082:	dc04      	bgt.n	800808e <__swbuf_r+0x42>
 8008084:	4621      	mov	r1, r4
 8008086:	4628      	mov	r0, r5
 8008088:	f000 f93c 	bl	8008304 <_fflush_r>
 800808c:	bb30      	cbnz	r0, 80080dc <__swbuf_r+0x90>
 800808e:	68a3      	ldr	r3, [r4, #8]
 8008090:	3b01      	subs	r3, #1
 8008092:	60a3      	str	r3, [r4, #8]
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	6022      	str	r2, [r4, #0]
 800809a:	701e      	strb	r6, [r3, #0]
 800809c:	6963      	ldr	r3, [r4, #20]
 800809e:	3001      	adds	r0, #1
 80080a0:	4283      	cmp	r3, r0
 80080a2:	d004      	beq.n	80080ae <__swbuf_r+0x62>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	07db      	lsls	r3, r3, #31
 80080a8:	d506      	bpl.n	80080b8 <__swbuf_r+0x6c>
 80080aa:	2e0a      	cmp	r6, #10
 80080ac:	d104      	bne.n	80080b8 <__swbuf_r+0x6c>
 80080ae:	4621      	mov	r1, r4
 80080b0:	4628      	mov	r0, r5
 80080b2:	f000 f927 	bl	8008304 <_fflush_r>
 80080b6:	b988      	cbnz	r0, 80080dc <__swbuf_r+0x90>
 80080b8:	4638      	mov	r0, r7
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <__swbuf_r+0x9c>)
 80080be:	429c      	cmp	r4, r3
 80080c0:	d101      	bne.n	80080c6 <__swbuf_r+0x7a>
 80080c2:	68ac      	ldr	r4, [r5, #8]
 80080c4:	e7cf      	b.n	8008066 <__swbuf_r+0x1a>
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <__swbuf_r+0xa0>)
 80080c8:	429c      	cmp	r4, r3
 80080ca:	bf08      	it	eq
 80080cc:	68ec      	ldreq	r4, [r5, #12]
 80080ce:	e7ca      	b.n	8008066 <__swbuf_r+0x1a>
 80080d0:	4621      	mov	r1, r4
 80080d2:	4628      	mov	r0, r5
 80080d4:	f000 f81a 	bl	800810c <__swsetup_r>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d0cb      	beq.n	8008074 <__swbuf_r+0x28>
 80080dc:	f04f 37ff 	mov.w	r7, #4294967295
 80080e0:	e7ea      	b.n	80080b8 <__swbuf_r+0x6c>
 80080e2:	bf00      	nop
 80080e4:	08008c4c 	.word	0x08008c4c
 80080e8:	08008c6c 	.word	0x08008c6c
 80080ec:	08008c2c 	.word	0x08008c2c

080080f0 <__ascii_wctomb>:
 80080f0:	b149      	cbz	r1, 8008106 <__ascii_wctomb+0x16>
 80080f2:	2aff      	cmp	r2, #255	; 0xff
 80080f4:	bf85      	ittet	hi
 80080f6:	238a      	movhi	r3, #138	; 0x8a
 80080f8:	6003      	strhi	r3, [r0, #0]
 80080fa:	700a      	strbls	r2, [r1, #0]
 80080fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008100:	bf98      	it	ls
 8008102:	2001      	movls	r0, #1
 8008104:	4770      	bx	lr
 8008106:	4608      	mov	r0, r1
 8008108:	4770      	bx	lr
	...

0800810c <__swsetup_r>:
 800810c:	4b32      	ldr	r3, [pc, #200]	; (80081d8 <__swsetup_r+0xcc>)
 800810e:	b570      	push	{r4, r5, r6, lr}
 8008110:	681d      	ldr	r5, [r3, #0]
 8008112:	4606      	mov	r6, r0
 8008114:	460c      	mov	r4, r1
 8008116:	b125      	cbz	r5, 8008122 <__swsetup_r+0x16>
 8008118:	69ab      	ldr	r3, [r5, #24]
 800811a:	b913      	cbnz	r3, 8008122 <__swsetup_r+0x16>
 800811c:	4628      	mov	r0, r5
 800811e:	f000 f985 	bl	800842c <__sinit>
 8008122:	4b2e      	ldr	r3, [pc, #184]	; (80081dc <__swsetup_r+0xd0>)
 8008124:	429c      	cmp	r4, r3
 8008126:	d10f      	bne.n	8008148 <__swsetup_r+0x3c>
 8008128:	686c      	ldr	r4, [r5, #4]
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008130:	0719      	lsls	r1, r3, #28
 8008132:	d42c      	bmi.n	800818e <__swsetup_r+0x82>
 8008134:	06dd      	lsls	r5, r3, #27
 8008136:	d411      	bmi.n	800815c <__swsetup_r+0x50>
 8008138:	2309      	movs	r3, #9
 800813a:	6033      	str	r3, [r6, #0]
 800813c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	f04f 30ff 	mov.w	r0, #4294967295
 8008146:	e03e      	b.n	80081c6 <__swsetup_r+0xba>
 8008148:	4b25      	ldr	r3, [pc, #148]	; (80081e0 <__swsetup_r+0xd4>)
 800814a:	429c      	cmp	r4, r3
 800814c:	d101      	bne.n	8008152 <__swsetup_r+0x46>
 800814e:	68ac      	ldr	r4, [r5, #8]
 8008150:	e7eb      	b.n	800812a <__swsetup_r+0x1e>
 8008152:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <__swsetup_r+0xd8>)
 8008154:	429c      	cmp	r4, r3
 8008156:	bf08      	it	eq
 8008158:	68ec      	ldreq	r4, [r5, #12]
 800815a:	e7e6      	b.n	800812a <__swsetup_r+0x1e>
 800815c:	0758      	lsls	r0, r3, #29
 800815e:	d512      	bpl.n	8008186 <__swsetup_r+0x7a>
 8008160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008162:	b141      	cbz	r1, 8008176 <__swsetup_r+0x6a>
 8008164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008168:	4299      	cmp	r1, r3
 800816a:	d002      	beq.n	8008172 <__swsetup_r+0x66>
 800816c:	4630      	mov	r0, r6
 800816e:	f7ff fb31 	bl	80077d4 <_free_r>
 8008172:	2300      	movs	r3, #0
 8008174:	6363      	str	r3, [r4, #52]	; 0x34
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	2300      	movs	r3, #0
 8008180:	6063      	str	r3, [r4, #4]
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	f043 0308 	orr.w	r3, r3, #8
 800818c:	81a3      	strh	r3, [r4, #12]
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	b94b      	cbnz	r3, 80081a6 <__swsetup_r+0x9a>
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800819c:	d003      	beq.n	80081a6 <__swsetup_r+0x9a>
 800819e:	4621      	mov	r1, r4
 80081a0:	4630      	mov	r0, r6
 80081a2:	f000 fa09 	bl	80085b8 <__smakebuf_r>
 80081a6:	89a0      	ldrh	r0, [r4, #12]
 80081a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081ac:	f010 0301 	ands.w	r3, r0, #1
 80081b0:	d00a      	beq.n	80081c8 <__swsetup_r+0xbc>
 80081b2:	2300      	movs	r3, #0
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	6963      	ldr	r3, [r4, #20]
 80081b8:	425b      	negs	r3, r3
 80081ba:	61a3      	str	r3, [r4, #24]
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	b943      	cbnz	r3, 80081d2 <__swsetup_r+0xc6>
 80081c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081c4:	d1ba      	bne.n	800813c <__swsetup_r+0x30>
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	0781      	lsls	r1, r0, #30
 80081ca:	bf58      	it	pl
 80081cc:	6963      	ldrpl	r3, [r4, #20]
 80081ce:	60a3      	str	r3, [r4, #8]
 80081d0:	e7f4      	b.n	80081bc <__swsetup_r+0xb0>
 80081d2:	2000      	movs	r0, #0
 80081d4:	e7f7      	b.n	80081c6 <__swsetup_r+0xba>
 80081d6:	bf00      	nop
 80081d8:	2000000c 	.word	0x2000000c
 80081dc:	08008c4c 	.word	0x08008c4c
 80081e0:	08008c6c 	.word	0x08008c6c
 80081e4:	08008c2c 	.word	0x08008c2c

080081e8 <abort>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	2006      	movs	r0, #6
 80081ec:	f000 fa54 	bl	8008698 <raise>
 80081f0:	2001      	movs	r0, #1
 80081f2:	f7f9 fd99 	bl	8001d28 <_exit>
	...

080081f8 <__sflush_r>:
 80081f8:	898a      	ldrh	r2, [r1, #12]
 80081fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fe:	4605      	mov	r5, r0
 8008200:	0710      	lsls	r0, r2, #28
 8008202:	460c      	mov	r4, r1
 8008204:	d458      	bmi.n	80082b8 <__sflush_r+0xc0>
 8008206:	684b      	ldr	r3, [r1, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	dc05      	bgt.n	8008218 <__sflush_r+0x20>
 800820c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	dc02      	bgt.n	8008218 <__sflush_r+0x20>
 8008212:	2000      	movs	r0, #0
 8008214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800821a:	2e00      	cmp	r6, #0
 800821c:	d0f9      	beq.n	8008212 <__sflush_r+0x1a>
 800821e:	2300      	movs	r3, #0
 8008220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008224:	682f      	ldr	r7, [r5, #0]
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	d032      	beq.n	8008290 <__sflush_r+0x98>
 800822a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	075a      	lsls	r2, r3, #29
 8008230:	d505      	bpl.n	800823e <__sflush_r+0x46>
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	1ac0      	subs	r0, r0, r3
 8008236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008238:	b10b      	cbz	r3, 800823e <__sflush_r+0x46>
 800823a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800823c:	1ac0      	subs	r0, r0, r3
 800823e:	2300      	movs	r3, #0
 8008240:	4602      	mov	r2, r0
 8008242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008244:	6a21      	ldr	r1, [r4, #32]
 8008246:	4628      	mov	r0, r5
 8008248:	47b0      	blx	r6
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	d106      	bne.n	800825e <__sflush_r+0x66>
 8008250:	6829      	ldr	r1, [r5, #0]
 8008252:	291d      	cmp	r1, #29
 8008254:	d82c      	bhi.n	80082b0 <__sflush_r+0xb8>
 8008256:	4a2a      	ldr	r2, [pc, #168]	; (8008300 <__sflush_r+0x108>)
 8008258:	40ca      	lsrs	r2, r1
 800825a:	07d6      	lsls	r6, r2, #31
 800825c:	d528      	bpl.n	80082b0 <__sflush_r+0xb8>
 800825e:	2200      	movs	r2, #0
 8008260:	6062      	str	r2, [r4, #4]
 8008262:	04d9      	lsls	r1, r3, #19
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	6022      	str	r2, [r4, #0]
 8008268:	d504      	bpl.n	8008274 <__sflush_r+0x7c>
 800826a:	1c42      	adds	r2, r0, #1
 800826c:	d101      	bne.n	8008272 <__sflush_r+0x7a>
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	b903      	cbnz	r3, 8008274 <__sflush_r+0x7c>
 8008272:	6560      	str	r0, [r4, #84]	; 0x54
 8008274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008276:	602f      	str	r7, [r5, #0]
 8008278:	2900      	cmp	r1, #0
 800827a:	d0ca      	beq.n	8008212 <__sflush_r+0x1a>
 800827c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008280:	4299      	cmp	r1, r3
 8008282:	d002      	beq.n	800828a <__sflush_r+0x92>
 8008284:	4628      	mov	r0, r5
 8008286:	f7ff faa5 	bl	80077d4 <_free_r>
 800828a:	2000      	movs	r0, #0
 800828c:	6360      	str	r0, [r4, #52]	; 0x34
 800828e:	e7c1      	b.n	8008214 <__sflush_r+0x1c>
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	2301      	movs	r3, #1
 8008294:	4628      	mov	r0, r5
 8008296:	47b0      	blx	r6
 8008298:	1c41      	adds	r1, r0, #1
 800829a:	d1c7      	bne.n	800822c <__sflush_r+0x34>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c4      	beq.n	800822c <__sflush_r+0x34>
 80082a2:	2b1d      	cmp	r3, #29
 80082a4:	d001      	beq.n	80082aa <__sflush_r+0xb2>
 80082a6:	2b16      	cmp	r3, #22
 80082a8:	d101      	bne.n	80082ae <__sflush_r+0xb6>
 80082aa:	602f      	str	r7, [r5, #0]
 80082ac:	e7b1      	b.n	8008212 <__sflush_r+0x1a>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	e7ad      	b.n	8008214 <__sflush_r+0x1c>
 80082b8:	690f      	ldr	r7, [r1, #16]
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d0a9      	beq.n	8008212 <__sflush_r+0x1a>
 80082be:	0793      	lsls	r3, r2, #30
 80082c0:	680e      	ldr	r6, [r1, #0]
 80082c2:	bf08      	it	eq
 80082c4:	694b      	ldreq	r3, [r1, #20]
 80082c6:	600f      	str	r7, [r1, #0]
 80082c8:	bf18      	it	ne
 80082ca:	2300      	movne	r3, #0
 80082cc:	eba6 0807 	sub.w	r8, r6, r7
 80082d0:	608b      	str	r3, [r1, #8]
 80082d2:	f1b8 0f00 	cmp.w	r8, #0
 80082d6:	dd9c      	ble.n	8008212 <__sflush_r+0x1a>
 80082d8:	6a21      	ldr	r1, [r4, #32]
 80082da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082dc:	4643      	mov	r3, r8
 80082de:	463a      	mov	r2, r7
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b0      	blx	r6
 80082e4:	2800      	cmp	r0, #0
 80082e6:	dc06      	bgt.n	80082f6 <__sflush_r+0xfe>
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	f04f 30ff 	mov.w	r0, #4294967295
 80082f4:	e78e      	b.n	8008214 <__sflush_r+0x1c>
 80082f6:	4407      	add	r7, r0
 80082f8:	eba8 0800 	sub.w	r8, r8, r0
 80082fc:	e7e9      	b.n	80082d2 <__sflush_r+0xda>
 80082fe:	bf00      	nop
 8008300:	20400001 	.word	0x20400001

08008304 <_fflush_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	690b      	ldr	r3, [r1, #16]
 8008308:	4605      	mov	r5, r0
 800830a:	460c      	mov	r4, r1
 800830c:	b913      	cbnz	r3, 8008314 <_fflush_r+0x10>
 800830e:	2500      	movs	r5, #0
 8008310:	4628      	mov	r0, r5
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	b118      	cbz	r0, 800831e <_fflush_r+0x1a>
 8008316:	6983      	ldr	r3, [r0, #24]
 8008318:	b90b      	cbnz	r3, 800831e <_fflush_r+0x1a>
 800831a:	f000 f887 	bl	800842c <__sinit>
 800831e:	4b14      	ldr	r3, [pc, #80]	; (8008370 <_fflush_r+0x6c>)
 8008320:	429c      	cmp	r4, r3
 8008322:	d11b      	bne.n	800835c <_fflush_r+0x58>
 8008324:	686c      	ldr	r4, [r5, #4]
 8008326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0ef      	beq.n	800830e <_fflush_r+0xa>
 800832e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008330:	07d0      	lsls	r0, r2, #31
 8008332:	d404      	bmi.n	800833e <_fflush_r+0x3a>
 8008334:	0599      	lsls	r1, r3, #22
 8008336:	d402      	bmi.n	800833e <_fflush_r+0x3a>
 8008338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800833a:	f000 f915 	bl	8008568 <__retarget_lock_acquire_recursive>
 800833e:	4628      	mov	r0, r5
 8008340:	4621      	mov	r1, r4
 8008342:	f7ff ff59 	bl	80081f8 <__sflush_r>
 8008346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008348:	07da      	lsls	r2, r3, #31
 800834a:	4605      	mov	r5, r0
 800834c:	d4e0      	bmi.n	8008310 <_fflush_r+0xc>
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	059b      	lsls	r3, r3, #22
 8008352:	d4dd      	bmi.n	8008310 <_fflush_r+0xc>
 8008354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008356:	f000 f908 	bl	800856a <__retarget_lock_release_recursive>
 800835a:	e7d9      	b.n	8008310 <_fflush_r+0xc>
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <_fflush_r+0x70>)
 800835e:	429c      	cmp	r4, r3
 8008360:	d101      	bne.n	8008366 <_fflush_r+0x62>
 8008362:	68ac      	ldr	r4, [r5, #8]
 8008364:	e7df      	b.n	8008326 <_fflush_r+0x22>
 8008366:	4b04      	ldr	r3, [pc, #16]	; (8008378 <_fflush_r+0x74>)
 8008368:	429c      	cmp	r4, r3
 800836a:	bf08      	it	eq
 800836c:	68ec      	ldreq	r4, [r5, #12]
 800836e:	e7da      	b.n	8008326 <_fflush_r+0x22>
 8008370:	08008c4c 	.word	0x08008c4c
 8008374:	08008c6c 	.word	0x08008c6c
 8008378:	08008c2c 	.word	0x08008c2c

0800837c <std>:
 800837c:	2300      	movs	r3, #0
 800837e:	b510      	push	{r4, lr}
 8008380:	4604      	mov	r4, r0
 8008382:	e9c0 3300 	strd	r3, r3, [r0]
 8008386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800838a:	6083      	str	r3, [r0, #8]
 800838c:	8181      	strh	r1, [r0, #12]
 800838e:	6643      	str	r3, [r0, #100]	; 0x64
 8008390:	81c2      	strh	r2, [r0, #14]
 8008392:	6183      	str	r3, [r0, #24]
 8008394:	4619      	mov	r1, r3
 8008396:	2208      	movs	r2, #8
 8008398:	305c      	adds	r0, #92	; 0x5c
 800839a:	f7fd fb5b 	bl	8005a54 <memset>
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <std+0x38>)
 80083a0:	6263      	str	r3, [r4, #36]	; 0x24
 80083a2:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <std+0x3c>)
 80083a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80083a6:	4b05      	ldr	r3, [pc, #20]	; (80083bc <std+0x40>)
 80083a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083aa:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <std+0x44>)
 80083ac:	6224      	str	r4, [r4, #32]
 80083ae:	6323      	str	r3, [r4, #48]	; 0x30
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	bf00      	nop
 80083b4:	080086d1 	.word	0x080086d1
 80083b8:	080086f3 	.word	0x080086f3
 80083bc:	0800872b 	.word	0x0800872b
 80083c0:	0800874f 	.word	0x0800874f

080083c4 <_cleanup_r>:
 80083c4:	4901      	ldr	r1, [pc, #4]	; (80083cc <_cleanup_r+0x8>)
 80083c6:	f000 b8af 	b.w	8008528 <_fwalk_reent>
 80083ca:	bf00      	nop
 80083cc:	08008305 	.word	0x08008305

080083d0 <__sfmoreglue>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	2268      	movs	r2, #104	; 0x68
 80083d4:	1e4d      	subs	r5, r1, #1
 80083d6:	4355      	muls	r5, r2
 80083d8:	460e      	mov	r6, r1
 80083da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083de:	f7ff fa65 	bl	80078ac <_malloc_r>
 80083e2:	4604      	mov	r4, r0
 80083e4:	b140      	cbz	r0, 80083f8 <__sfmoreglue+0x28>
 80083e6:	2100      	movs	r1, #0
 80083e8:	e9c0 1600 	strd	r1, r6, [r0]
 80083ec:	300c      	adds	r0, #12
 80083ee:	60a0      	str	r0, [r4, #8]
 80083f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083f4:	f7fd fb2e 	bl	8005a54 <memset>
 80083f8:	4620      	mov	r0, r4
 80083fa:	bd70      	pop	{r4, r5, r6, pc}

080083fc <__sfp_lock_acquire>:
 80083fc:	4801      	ldr	r0, [pc, #4]	; (8008404 <__sfp_lock_acquire+0x8>)
 80083fe:	f000 b8b3 	b.w	8008568 <__retarget_lock_acquire_recursive>
 8008402:	bf00      	nop
 8008404:	2000037d 	.word	0x2000037d

08008408 <__sfp_lock_release>:
 8008408:	4801      	ldr	r0, [pc, #4]	; (8008410 <__sfp_lock_release+0x8>)
 800840a:	f000 b8ae 	b.w	800856a <__retarget_lock_release_recursive>
 800840e:	bf00      	nop
 8008410:	2000037d 	.word	0x2000037d

08008414 <__sinit_lock_acquire>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__sinit_lock_acquire+0x8>)
 8008416:	f000 b8a7 	b.w	8008568 <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	2000037e 	.word	0x2000037e

08008420 <__sinit_lock_release>:
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <__sinit_lock_release+0x8>)
 8008422:	f000 b8a2 	b.w	800856a <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	2000037e 	.word	0x2000037e

0800842c <__sinit>:
 800842c:	b510      	push	{r4, lr}
 800842e:	4604      	mov	r4, r0
 8008430:	f7ff fff0 	bl	8008414 <__sinit_lock_acquire>
 8008434:	69a3      	ldr	r3, [r4, #24]
 8008436:	b11b      	cbz	r3, 8008440 <__sinit+0x14>
 8008438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800843c:	f7ff bff0 	b.w	8008420 <__sinit_lock_release>
 8008440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008444:	6523      	str	r3, [r4, #80]	; 0x50
 8008446:	4b13      	ldr	r3, [pc, #76]	; (8008494 <__sinit+0x68>)
 8008448:	4a13      	ldr	r2, [pc, #76]	; (8008498 <__sinit+0x6c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	62a2      	str	r2, [r4, #40]	; 0x28
 800844e:	42a3      	cmp	r3, r4
 8008450:	bf04      	itt	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	61a3      	streq	r3, [r4, #24]
 8008456:	4620      	mov	r0, r4
 8008458:	f000 f820 	bl	800849c <__sfp>
 800845c:	6060      	str	r0, [r4, #4]
 800845e:	4620      	mov	r0, r4
 8008460:	f000 f81c 	bl	800849c <__sfp>
 8008464:	60a0      	str	r0, [r4, #8]
 8008466:	4620      	mov	r0, r4
 8008468:	f000 f818 	bl	800849c <__sfp>
 800846c:	2200      	movs	r2, #0
 800846e:	60e0      	str	r0, [r4, #12]
 8008470:	2104      	movs	r1, #4
 8008472:	6860      	ldr	r0, [r4, #4]
 8008474:	f7ff ff82 	bl	800837c <std>
 8008478:	68a0      	ldr	r0, [r4, #8]
 800847a:	2201      	movs	r2, #1
 800847c:	2109      	movs	r1, #9
 800847e:	f7ff ff7d 	bl	800837c <std>
 8008482:	68e0      	ldr	r0, [r4, #12]
 8008484:	2202      	movs	r2, #2
 8008486:	2112      	movs	r1, #18
 8008488:	f7ff ff78 	bl	800837c <std>
 800848c:	2301      	movs	r3, #1
 800848e:	61a3      	str	r3, [r4, #24]
 8008490:	e7d2      	b.n	8008438 <__sinit+0xc>
 8008492:	bf00      	nop
 8008494:	080088b0 	.word	0x080088b0
 8008498:	080083c5 	.word	0x080083c5

0800849c <__sfp>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	4607      	mov	r7, r0
 80084a0:	f7ff ffac 	bl	80083fc <__sfp_lock_acquire>
 80084a4:	4b1e      	ldr	r3, [pc, #120]	; (8008520 <__sfp+0x84>)
 80084a6:	681e      	ldr	r6, [r3, #0]
 80084a8:	69b3      	ldr	r3, [r6, #24]
 80084aa:	b913      	cbnz	r3, 80084b2 <__sfp+0x16>
 80084ac:	4630      	mov	r0, r6
 80084ae:	f7ff ffbd 	bl	800842c <__sinit>
 80084b2:	3648      	adds	r6, #72	; 0x48
 80084b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	d503      	bpl.n	80084c4 <__sfp+0x28>
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	b30b      	cbz	r3, 8008504 <__sfp+0x68>
 80084c0:	6836      	ldr	r6, [r6, #0]
 80084c2:	e7f7      	b.n	80084b4 <__sfp+0x18>
 80084c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084c8:	b9d5      	cbnz	r5, 8008500 <__sfp+0x64>
 80084ca:	4b16      	ldr	r3, [pc, #88]	; (8008524 <__sfp+0x88>)
 80084cc:	60e3      	str	r3, [r4, #12]
 80084ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084d2:	6665      	str	r5, [r4, #100]	; 0x64
 80084d4:	f000 f847 	bl	8008566 <__retarget_lock_init_recursive>
 80084d8:	f7ff ff96 	bl	8008408 <__sfp_lock_release>
 80084dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084e4:	6025      	str	r5, [r4, #0]
 80084e6:	61a5      	str	r5, [r4, #24]
 80084e8:	2208      	movs	r2, #8
 80084ea:	4629      	mov	r1, r5
 80084ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084f0:	f7fd fab0 	bl	8005a54 <memset>
 80084f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084fc:	4620      	mov	r0, r4
 80084fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008500:	3468      	adds	r4, #104	; 0x68
 8008502:	e7d9      	b.n	80084b8 <__sfp+0x1c>
 8008504:	2104      	movs	r1, #4
 8008506:	4638      	mov	r0, r7
 8008508:	f7ff ff62 	bl	80083d0 <__sfmoreglue>
 800850c:	4604      	mov	r4, r0
 800850e:	6030      	str	r0, [r6, #0]
 8008510:	2800      	cmp	r0, #0
 8008512:	d1d5      	bne.n	80084c0 <__sfp+0x24>
 8008514:	f7ff ff78 	bl	8008408 <__sfp_lock_release>
 8008518:	230c      	movs	r3, #12
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	e7ee      	b.n	80084fc <__sfp+0x60>
 800851e:	bf00      	nop
 8008520:	080088b0 	.word	0x080088b0
 8008524:	ffff0001 	.word	0xffff0001

08008528 <_fwalk_reent>:
 8008528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800852c:	4606      	mov	r6, r0
 800852e:	4688      	mov	r8, r1
 8008530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008534:	2700      	movs	r7, #0
 8008536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800853a:	f1b9 0901 	subs.w	r9, r9, #1
 800853e:	d505      	bpl.n	800854c <_fwalk_reent+0x24>
 8008540:	6824      	ldr	r4, [r4, #0]
 8008542:	2c00      	cmp	r4, #0
 8008544:	d1f7      	bne.n	8008536 <_fwalk_reent+0xe>
 8008546:	4638      	mov	r0, r7
 8008548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854c:	89ab      	ldrh	r3, [r5, #12]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d907      	bls.n	8008562 <_fwalk_reent+0x3a>
 8008552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008556:	3301      	adds	r3, #1
 8008558:	d003      	beq.n	8008562 <_fwalk_reent+0x3a>
 800855a:	4629      	mov	r1, r5
 800855c:	4630      	mov	r0, r6
 800855e:	47c0      	blx	r8
 8008560:	4307      	orrs	r7, r0
 8008562:	3568      	adds	r5, #104	; 0x68
 8008564:	e7e9      	b.n	800853a <_fwalk_reent+0x12>

08008566 <__retarget_lock_init_recursive>:
 8008566:	4770      	bx	lr

08008568 <__retarget_lock_acquire_recursive>:
 8008568:	4770      	bx	lr

0800856a <__retarget_lock_release_recursive>:
 800856a:	4770      	bx	lr

0800856c <__swhatbuf_r>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	460e      	mov	r6, r1
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	2900      	cmp	r1, #0
 8008576:	b096      	sub	sp, #88	; 0x58
 8008578:	4614      	mov	r4, r2
 800857a:	461d      	mov	r5, r3
 800857c:	da08      	bge.n	8008590 <__swhatbuf_r+0x24>
 800857e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	602a      	str	r2, [r5, #0]
 8008586:	061a      	lsls	r2, r3, #24
 8008588:	d410      	bmi.n	80085ac <__swhatbuf_r+0x40>
 800858a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800858e:	e00e      	b.n	80085ae <__swhatbuf_r+0x42>
 8008590:	466a      	mov	r2, sp
 8008592:	f000 f903 	bl	800879c <_fstat_r>
 8008596:	2800      	cmp	r0, #0
 8008598:	dbf1      	blt.n	800857e <__swhatbuf_r+0x12>
 800859a:	9a01      	ldr	r2, [sp, #4]
 800859c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085a4:	425a      	negs	r2, r3
 80085a6:	415a      	adcs	r2, r3
 80085a8:	602a      	str	r2, [r5, #0]
 80085aa:	e7ee      	b.n	800858a <__swhatbuf_r+0x1e>
 80085ac:	2340      	movs	r3, #64	; 0x40
 80085ae:	2000      	movs	r0, #0
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	b016      	add	sp, #88	; 0x58
 80085b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080085b8 <__smakebuf_r>:
 80085b8:	898b      	ldrh	r3, [r1, #12]
 80085ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085bc:	079d      	lsls	r5, r3, #30
 80085be:	4606      	mov	r6, r0
 80085c0:	460c      	mov	r4, r1
 80085c2:	d507      	bpl.n	80085d4 <__smakebuf_r+0x1c>
 80085c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	2301      	movs	r3, #1
 80085ce:	6163      	str	r3, [r4, #20]
 80085d0:	b002      	add	sp, #8
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	ab01      	add	r3, sp, #4
 80085d6:	466a      	mov	r2, sp
 80085d8:	f7ff ffc8 	bl	800856c <__swhatbuf_r>
 80085dc:	9900      	ldr	r1, [sp, #0]
 80085de:	4605      	mov	r5, r0
 80085e0:	4630      	mov	r0, r6
 80085e2:	f7ff f963 	bl	80078ac <_malloc_r>
 80085e6:	b948      	cbnz	r0, 80085fc <__smakebuf_r+0x44>
 80085e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ec:	059a      	lsls	r2, r3, #22
 80085ee:	d4ef      	bmi.n	80085d0 <__smakebuf_r+0x18>
 80085f0:	f023 0303 	bic.w	r3, r3, #3
 80085f4:	f043 0302 	orr.w	r3, r3, #2
 80085f8:	81a3      	strh	r3, [r4, #12]
 80085fa:	e7e3      	b.n	80085c4 <__smakebuf_r+0xc>
 80085fc:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <__smakebuf_r+0x7c>)
 80085fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	6020      	str	r0, [r4, #0]
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	9b00      	ldr	r3, [sp, #0]
 800860c:	6163      	str	r3, [r4, #20]
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	6120      	str	r0, [r4, #16]
 8008612:	b15b      	cbz	r3, 800862c <__smakebuf_r+0x74>
 8008614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008618:	4630      	mov	r0, r6
 800861a:	f000 f8d1 	bl	80087c0 <_isatty_r>
 800861e:	b128      	cbz	r0, 800862c <__smakebuf_r+0x74>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	f043 0301 	orr.w	r3, r3, #1
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	89a0      	ldrh	r0, [r4, #12]
 800862e:	4305      	orrs	r5, r0
 8008630:	81a5      	strh	r5, [r4, #12]
 8008632:	e7cd      	b.n	80085d0 <__smakebuf_r+0x18>
 8008634:	080083c5 	.word	0x080083c5

08008638 <_malloc_usable_size_r>:
 8008638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800863c:	1f18      	subs	r0, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	bfbc      	itt	lt
 8008642:	580b      	ldrlt	r3, [r1, r0]
 8008644:	18c0      	addlt	r0, r0, r3
 8008646:	4770      	bx	lr

08008648 <_raise_r>:
 8008648:	291f      	cmp	r1, #31
 800864a:	b538      	push	{r3, r4, r5, lr}
 800864c:	4604      	mov	r4, r0
 800864e:	460d      	mov	r5, r1
 8008650:	d904      	bls.n	800865c <_raise_r+0x14>
 8008652:	2316      	movs	r3, #22
 8008654:	6003      	str	r3, [r0, #0]
 8008656:	f04f 30ff 	mov.w	r0, #4294967295
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800865e:	b112      	cbz	r2, 8008666 <_raise_r+0x1e>
 8008660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008664:	b94b      	cbnz	r3, 800867a <_raise_r+0x32>
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f830 	bl	80086cc <_getpid_r>
 800866c:	462a      	mov	r2, r5
 800866e:	4601      	mov	r1, r0
 8008670:	4620      	mov	r0, r4
 8008672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008676:	f000 b817 	b.w	80086a8 <_kill_r>
 800867a:	2b01      	cmp	r3, #1
 800867c:	d00a      	beq.n	8008694 <_raise_r+0x4c>
 800867e:	1c59      	adds	r1, r3, #1
 8008680:	d103      	bne.n	800868a <_raise_r+0x42>
 8008682:	2316      	movs	r3, #22
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	2001      	movs	r0, #1
 8008688:	e7e7      	b.n	800865a <_raise_r+0x12>
 800868a:	2400      	movs	r4, #0
 800868c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008690:	4628      	mov	r0, r5
 8008692:	4798      	blx	r3
 8008694:	2000      	movs	r0, #0
 8008696:	e7e0      	b.n	800865a <_raise_r+0x12>

08008698 <raise>:
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <raise+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f7ff bfd3 	b.w	8008648 <_raise_r>
 80086a2:	bf00      	nop
 80086a4:	2000000c 	.word	0x2000000c

080086a8 <_kill_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d07      	ldr	r5, [pc, #28]	; (80086c8 <_kill_r+0x20>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	f7f9 fb27 	bl	8001d08 <_kill>
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	d102      	bne.n	80086c4 <_kill_r+0x1c>
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	b103      	cbz	r3, 80086c4 <_kill_r+0x1c>
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	bd38      	pop	{r3, r4, r5, pc}
 80086c6:	bf00      	nop
 80086c8:	20000378 	.word	0x20000378

080086cc <_getpid_r>:
 80086cc:	f7f9 bb14 	b.w	8001cf8 <_getpid>

080086d0 <__sread>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d8:	f000 f894 	bl	8008804 <_read_r>
 80086dc:	2800      	cmp	r0, #0
 80086de:	bfab      	itete	ge
 80086e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086e2:	89a3      	ldrhlt	r3, [r4, #12]
 80086e4:	181b      	addge	r3, r3, r0
 80086e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086ea:	bfac      	ite	ge
 80086ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80086ee:	81a3      	strhlt	r3, [r4, #12]
 80086f0:	bd10      	pop	{r4, pc}

080086f2 <__swrite>:
 80086f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	461f      	mov	r7, r3
 80086f8:	898b      	ldrh	r3, [r1, #12]
 80086fa:	05db      	lsls	r3, r3, #23
 80086fc:	4605      	mov	r5, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	4616      	mov	r6, r2
 8008702:	d505      	bpl.n	8008710 <__swrite+0x1e>
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	2302      	movs	r3, #2
 800870a:	2200      	movs	r2, #0
 800870c:	f000 f868 	bl	80087e0 <_lseek_r>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	4632      	mov	r2, r6
 800871e:	463b      	mov	r3, r7
 8008720:	4628      	mov	r0, r5
 8008722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008726:	f000 b817 	b.w	8008758 <_write_r>

0800872a <__sseek>:
 800872a:	b510      	push	{r4, lr}
 800872c:	460c      	mov	r4, r1
 800872e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008732:	f000 f855 	bl	80087e0 <_lseek_r>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	bf15      	itete	ne
 800873c:	6560      	strne	r0, [r4, #84]	; 0x54
 800873e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008746:	81a3      	strheq	r3, [r4, #12]
 8008748:	bf18      	it	ne
 800874a:	81a3      	strhne	r3, [r4, #12]
 800874c:	bd10      	pop	{r4, pc}

0800874e <__sclose>:
 800874e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008752:	f000 b813 	b.w	800877c <_close_r>
	...

08008758 <_write_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	; (8008778 <_write_r+0x20>)
 800875c:	4604      	mov	r4, r0
 800875e:	4608      	mov	r0, r1
 8008760:	4611      	mov	r1, r2
 8008762:	2200      	movs	r2, #0
 8008764:	602a      	str	r2, [r5, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	f7f9 fb05 	bl	8001d76 <_write>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d102      	bne.n	8008776 <_write_r+0x1e>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	b103      	cbz	r3, 8008776 <_write_r+0x1e>
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	20000378 	.word	0x20000378

0800877c <_close_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	; (8008798 <_close_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f9 fb11 	bl	8001dae <_close>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_close_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_close_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000378 	.word	0x20000378

0800879c <_fstat_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	; (80087bc <_fstat_r+0x20>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	4611      	mov	r1, r2
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	f7f9 fb0c 	bl	8001dc6 <_fstat>
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d102      	bne.n	80087b8 <_fstat_r+0x1c>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	b103      	cbz	r3, 80087b8 <_fstat_r+0x1c>
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	bf00      	nop
 80087bc:	20000378 	.word	0x20000378

080087c0 <_isatty_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d06      	ldr	r5, [pc, #24]	; (80087dc <_isatty_r+0x1c>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	f7f9 fb0b 	bl	8001de6 <_isatty>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_isatty_r+0x1a>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b103      	cbz	r3, 80087da <_isatty_r+0x1a>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	20000378 	.word	0x20000378

080087e0 <_lseek_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d07      	ldr	r5, [pc, #28]	; (8008800 <_lseek_r+0x20>)
 80087e4:	4604      	mov	r4, r0
 80087e6:	4608      	mov	r0, r1
 80087e8:	4611      	mov	r1, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	602a      	str	r2, [r5, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7f9 fb04 	bl	8001dfc <_lseek>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_lseek_r+0x1e>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_lseek_r+0x1e>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20000378 	.word	0x20000378

08008804 <_read_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_read_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f9 fa92 	bl	8001d3c <_read>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_read_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_read_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20000378 	.word	0x20000378

08008828 <_init>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	bf00      	nop
 800882c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882e:	bc08      	pop	{r3}
 8008830:	469e      	mov	lr, r3
 8008832:	4770      	bx	lr

08008834 <_fini>:
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	bf00      	nop
 8008838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883a:	bc08      	pop	{r3}
 800883c:	469e      	mov	lr, r3
 800883e:	4770      	bx	lr
